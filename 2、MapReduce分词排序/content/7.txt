在RHEL6中配置YUM源
1 创建rhel-debuginfo.repo，如果有则先备份再删除
 cd  /etc/yum.repos.d
 rm  rhel-debuginfo.repo
 vi  rhel-debuginfo.repo 
插入以下内容：
 [Server] 
 name=Red Hat Enterprise Linux Server 
 baseurl=file:///home/redhat-iso  #本地iso的挂载路径
 enabled=1       #可以使用yum
 gpgcheck=0      #设置不检查gpgkey 
 gpgkey=file:///home/redhat-iso/RPM-GPG-KEY-RedHat-release    

2 修改yumRepo.py配置文件
cd /usr/lib/python2.6/site-packages/yum/
vi yumRepo.py
找到  remote = url + ‘/’ + relative  #802行 
改为  remote = "/home/redhat-iso" + '/' + relative
3 挂载iso文件
  mkdir /home/redhat-iso
  mount /dev/cdrom /mnt/cdrom
或者：
mount -o loop /home/Soft/rhel-server-6.3-x86_64-dvd.iso /mnt/cdrom
4 拷贝数据
cp /mnt/redhat-iso/* /home/redhat-iso
5 清除yum缓存：
yum clean all
6 测试安装ftp 默认没有安装
 yum list | grep vsftpd
[附-1]ubuntu设置本地软件安装源【DVD版】
(1) 转到镜像的下载目录，挂载ISO镜像挂载至 /media/cdrom 下:

> sudo mount -o loop -t iso9660 update-i386-20080312-CD1.iso /media/cdrom
(2) 手动添加ISO镜像至软件源列表，这样就可以在软件库里找到ISO上所有的软件包:
> sudo apt-cdrom -m -d=/media/cdrom add
(3) 刷新软件库:
> sudo apt-get update
注意，执行完成后查看 /etc/apt/sources.list 文件，确保文件如下一行在文件顶部或者在网络源前面， 
否者，安装软件的时候系统还是优先从网络上下载;

【建议把除了dvd本地源之外的下面所有项注释掉，不建议删除，之后在apt-get update更新下】

deb cdrom:[Ubuntu 9.04 _Jaunty Jackalope_ - Release i386 (20090421.3)]/ 
jaunty main restricted
之后就可以用 apt-get install ** 来安装软件包了， 
不过有点问题，这命令执行一次可能会不成功，多执行几次就OK了.
[附-2]Centos使用第三方软件源RepoForge
RepoForge源可以做为Centos官方源及EPEL源的补充，这样Centos下常用软件基本都可使用yum安装了。 
Centos5：
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.i386.rpm
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm
Centos6:
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
国内使用sohu提供的镜像：
cat > /etc/yum.repos.d/mirrors-rpmforge <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/rpmforge
EOF
cat > /etc/yum.repos.d/mirrors-rpmforge-extras <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/extras
EOF
cat > /etc/yum.repos.d/mirrors-rpmforge-testing <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/testing
EOF
Repoforge ，以 RPMforge为人所熟知。它是专门为 Red Hat Enterprise Linux (RHEL)， CentOS和科学Linux系统提供库包。如果你是这个类型的OS用户，可以添加其提高的源。安装如下： 
对于64-bit CentOS 6.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
对于For 32-bit CentOS 5.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.i386.rpm
对于64-bit CentOS 5.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm
一旦RPMforge源安装成功，你可以使用过yum命令去安装其有的库包。
[附-3] Ali-OSM : Alibaba Open Source Mirror Site
cd  /etc/yum.repos.d/
mv CentOS-Base.repo CentOS-Base.repo.back
wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-６.repo
[附-4] [Webstatic Yum Repository]
Installation
To set up the repository, install the webtatic-release RPM:
Webtatic EL7 for CentOS/RHEL 7:
rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
Webtatic EL6 for CentOS/RHEL 6:
rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
Webtatic EL5.1 for CentOS/RHEL 5:
rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm
Webtatic 5 for CentOS/RHEL 5:
rpm -Uvh http://mirror.webtatic.com/yum/centos/5/latest.rpm
Webtatic.com: 

https://webtatic.com/projects/yum-repository/



查看原文 
相关阅读

Markdown——入门指南
献给写作者的 Markdown 新手指南




热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理
Rsync同步错误处理
Fix Elementary Boot Screen (plymouth)  After Installing Nvidia Drivers
LNMP环境搭建——MySQL篇
Shell Step by Step (3) —— Stdin & if
Shell Step by Step (4) —— Cron & Echo




            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

Shell Step by Step (4) —— Cron & Echo
6.脚本定时任务
# Example of job definition:
# .-------------------------  minute (0 - 59)
# |    .---------------------  hour (0 - 23)
# |    |    .-----------------  day of month (1 - 31)
# |    |    |    .-------------  month (1 - 12) 
# |    |    |    |    .---------  day of week (0 - 6) 
# |    |    |    |    |
# *    *    *    *    *   user-name   command to be executed
7.查看当前用户的UID
root@kallen:/usr/data/kallendb_backup# ps -ef | grep UID 
UID PID PPID C STIME TTY TIME CMD 
root 2872 2384 0 09:43 pts/2 00:00:00 grep --color=auto UID
8.用Shell模拟一个进度条
  #! /bin/bash
  #
  # Progress Bar
  # Print # to view the process bar

  # create variable
  b=''

  # for loop
  for ((i=0;$i<=100;i+=2))
  do
      printf "Progress:[%-50s]%d%%\r" $b $i
      sleep 0.1

      b=#$b
  done
  echo


在Shell脚本的编写应用中，有时候会需要用到图形界面的案例，比如默认cp拷贝文件为静默模式，无法看到拷贝的进度与百分比。而dialog正是为Shell提供图形界面的工具，该工具可以为Shell脚本提供各式各样的图形界面，今天为大家介绍的是dialog提供的进度条图形功能。

dialog指令可以单独执行，格式为
 dialog --title "Copy" --gauge "files" 6 70 10
备注：

title表示图形进度条的标题， 
  gauge为正文内容，进度条高度为6，宽度70，显示进度为10%

for i in {1..100} ; 
do sleep 1; 
    echo $i | dialog --title 'Copy' --gauge 'I am busy!' 10 70 0; 
done

下面案例中通过统计源文件个数，再据此计算出拷贝文件的百分比，在Shell中提供进度的显示。 
  该脚本有两个参数，第一个参数为源文件路径，第二个参数为目标路径。 
  如果您的应用案例不同可以据此稍作修改即可使用。

#!/bin/bash    
# Description: A shell script to copy parameter1 to 
# parameter2 and Display a progress bar    
# Author:Jacob    
# Version:0.1 beta    

# Read the parameter for copy,$1 is source dir 
# and $2 is destination dir.    
dir=$1/*    
des=$2    
# Test the destination dirctory whether exists    
[ -d $des ] && echo "Dir Exist" && exit 1    
# Create the destination dirctory    
mkdir $des    
# Set counter, it will auto increase to the number of 
# source file.    
i=0    
# Count the number of source file    
n=`echo $1/* |wc -w`    

for file in `echo $dir`    
do
    # Calculate progress    
    percent=$((100*(++i)/n))    
    cat <<EOF    
    XXX    
    $percent    
    Copying file $file ...    
    XXX    
    EOF    
    /bin/cp -r $file $des &>/dev/null
done | dialog --title "Copy" --gauge "files" 6 70    
clear
效果如图： 

9.Echo输出
功能说明：    显示文字 
语    法：         
echo [ -ne ]  [ 字符串 ]  或  
echo [ --help ]  [--version ]  
参数：
-n          不要在最后自动换行
-e          若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出;  
\b          删除前一个字符；    
\f          换行但光标仍旧停留在原来的位置；     
\r          光标移至行首，但不换行；    
\t          插入tab；   
\v          与\f相同；   
\nnn        插入nnn（八进制）所代表的ASCII字符；
--help      显示帮助
--version   显示版本信息


热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理



            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

LNMP环境搭建——Apache篇

1.Apache DSO（Dynamic Shared Object）
(1) 查看已编译模块:
[root@kallen ~]# httpd -M
Loaded Modules:
 core_module (static)
 mpm_prefork_module (static)
 http_module (static)
 so_module (static)
 auth_basic_module (shared)
 auth_digest_module (shared)
 authn_file_module (shared)
 authn_alias_module (shared)
(2) 查看静态编译模块：
[root@kallen ~]# httpd -l
Compiled in modules:
 core.c
 prefork.c
 http_core.c
 mod_so.c
2.Apache MPM（Multi Process Modules）
(1) 不同平台默认MPM：



Architecture
MPM Type



BeOS
beos


Netware
mpm_netware


OS/2
mpmt_os2


Unix
prefork, worker


Windows
mpm_winnt


(2) 查看当前apache服务的MPM:
[root@kallen ~]# httpd -V 或 httpd -l
 [root@kallen ~]# httpd -V
Server version: Apache/2.2.15 (Unix)
Server built: Aug 2 2013 08:02:15
Server's Module Magic Number: 20051115:25
Server loaded: APR 1.3.9, APR-Util 1.3.9
Compiled using: APR 1.3.9, APR-Util 1.3.9
Architecture: 64-bit
Server MPM: Prefork
 threaded: no
 forked: yes (variable process count)
Server compiled with....
 -D APACHE_MPM_DIR="server/mpm/prefork"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_PIDLOG="run/httpd.pid"
 -D DEFAULT_SCOREBOARD="logs/apache_runtime_status"
 -D DEFAULT_LOCKFILE="logs/accept.lock"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"

Prefork：非线程、预生成进程型MPM
这个MPM具有很强的自我调节能力，只需要很少的配置指令调整。最重要的是将MaxClients设置为一个足够大的数值以处理潜在的请求高峰，同时又不能太大，以致需要使用的内存超出物理内存的大小;

<IfModule prefork.c>
StartServers            8 
MinSpareServers         5 
MaxSpareServers         20 
ServerLimit             256 
MaxClients              256 
MaxRequestsPerChild     4000 
</IfModule> 

Worker：线程化、多进程型MPM
由于使用线程来处理请求，可以处理海量请求，而系统资源的开销小于基于进程的MPM。但是，它也使用了多进程，每个进程又有多个线程，以获得基于进程的MPM的稳定性。控制这个MPM的最重要的指令是，控制每个子进程允许建立的线程数的ThreadsPerChild，和控制允许建立的总线程数的MaxClients指令；

 <IfModule worker.c>
StartServers            4
MaxClients              300
MinSpareThreads         25
MaxSpareThreads         75
ThreadsPerChild         25
MaxRequestsPerChild     0
</IfModule> 


【注】文中所指的LNMP泛指LAMP 或LNMP.



热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理
Rsync同步错误处理
Fix Elementary Boot Screen (plymouth)  After Installing Nvidia Drivers
LNMP环境搭建——MySQL篇
Shell Step by Step (3) —— Stdin & if
Shell Step by Step (4) —— Cron & Echo




            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

在Linux、ubuntu 11下安装无线网卡 、杂牌无线网卡、ndiswrapper的使用
本片文章是之前在百度空间所写的（2011-10-11），由于百度空间已无法浏览。考虑本文还有一定实用性，固转载至此。
原百度链接：http://hi.baidu.com/ccboyhi/blog/item/a358840077a6b2ca277fb5eb.html


首先说一下，我的电脑个组装台式机，无线网卡是自己在淘宝上买了一个杂牌子（台湾inventel UR054g(R01) v1.1 cohiba 3887 rev0），前段时间在电脑上安装了双系统xp+ubuntu，学校的网是用深澜软件Srun3000限制登录上网的，虽然学校提供了srun3000的Linux，Ubuntu和java等版本，但是都不能使用，提示“error mode”等错误。因此在我的Ubuntu下完全不能连接到互联网，只能在校园网内逛逛。因此只能想办法将window上的软件srun3000.exe能在运行，寝室一个哥们说 要想在Linux上运行exe的文件，就要安装wine，听到这个消息真是很高兴，就开始网上收办法安装，经过一番收缩，真是郁闷之极，因为在ubuntu上无法上网，就不能使用在线安装。因此就有先在xp平台上下载wine的离线安装包，再拿到ubuntu上安装，结果下了很多的wine的离线安装包，都无法在ubuntu上正常的安装。因为我们学校有电信的无线网ChinaNet每个月可以免费上五个小时，因此就想通过无线网络来安装wine，但是我的ubuntu系统下无线网卡在安装ubuntu系统的时候没有自动安装（该网卡不在Ubuntu的硬件支持列表中），因此无线网卡不能使用。

接下来就是google、baidu怎么在ubuntu下安装杂牌无线网卡。经过一番努力真是功夫不负有心人！终于找到了可行的办法,下面就来看看怎么在一台无法上网的ubuntu系统上安装无线网卡。经过顽强的搜索与尝试，终于发现通过ndiswrapper可以安装好网卡！

1.下载ndiswrapper

http://ndiswrapper.sourceforge.net/（主页）

http://sourceforge.net/projects/ndiswrapper/files/（下载页面）

csdn免费积分下载：http://download.csdn.net/detail/ccboy2009/3672493



它是源码来的要自己编译，但过程很简单。但在没装网卡前不能上网怎么下载，嘿嘿，自己想办法。我是在xp上下载好了后，然后在ubuntu上找到该文件



2、接下来是编译安装ndiswrapper
将你下载的ndiswrapper解压，然后进入相应目录，输入

make install

如果没有出错的话ndiswrapper算是安装成功。



如果是从CD版新安装的系统可能没带相应编译头文件，也要下载，又要头痛。

3、安装驱动
简单的理解ndiswrapper是用来挂载win下网卡的驱动。所以还要找到网卡在WinXP的网卡，一定要XP的。翻出我的网卡自带的光碟（或者你在xp下该网卡的驱动包），为了安全将相关的文件一起拷贝了过来，当然也可以只拷贝必须的几个文件。

以下文件下载：http://download.csdn.net/detail/ccboy2009/3672515






网卡驱动找到了就安装吧。
sudo ndiswrapper -i <<网卡驱动inf文件的完整路径>>

没出错提示的话，说明一切正常。

也可以用
ndiswrapper -l

来看下是否有安装成功。


如果有driver installed说明驱动已安装，同时有device (XXXX:XXXX) present说明驱动可以识别设备。说明：XXXX代表设备ID。没有present的话说明驱动不能驱动设备。删除原驱动，再换个驱动重装一次吧。

可以用
ndiswrapper -r prisma02（prisma02是驱动程序名称）来删除驱动

4、加载驱动
驱动程序安装完了，还要加载才能使用。

sudo modprobe ndiswrapper

如果不出意外网卡可以使用了。看下无线网的指示灯是否亮了，系统的网络链接管理图标是否多了一个无线链接，并开始获取IP。

总算大功告成。



5.通过上面的步骤虽然可以正常使用无线网卡了，但电脑重启后 每次都要手动输入：

sudo modprobe ndiswrapper    启动驱动，这样很麻烦，所以就想法让其开机自动启动。

gedit   /etc/rc.local

在最后一行添加（在exit 0之前）

modprobe ndiswrapper

保存即可，以后开机就能自动启动了！

6.现在就可以通过无线网卡连上中国电信ChinaNet的上网了，在这五个小时的时间内，通过ubuntu自带的程序安装程序将wine安装上，这样就可以运行简单的exe文件了，包括我们学校的上网客户端srun3000.exe，如果对wine进行更好的配置，他将可以运行复杂的exe程序，如QQ。

到此大功告成，真是欣喜若狂！


转载请注明：来自IccBoY(http://blog.csdn.net/ccboy2009/article/details/47986247)

版权声明：本文为博主原创文章，未经博主IccBoY允许不得转载。

关于《IT运维之道》的扩充建议

《IT运维之道》出版半年多了，感谢广大书友的厚爱，不少书友还提了很多真知灼见，非常感谢，由于当时出书时，太赶，有些内容没说透，很有意犹未尽的感觉，而现在也很忙，很难有大段时间来整理完善，所以，有一想法，希望朋友们在原来基础上续写，写的稿子一经采纳，会再再版时引入，引入会注明作者，由于出书不赚钱，费用就没有了，请大家理解，这也算一种新众筹吧，有兴趣请加QQ：630559761 ，注明IT运维之道
    
        
版权声明：本文为博主原创文章，未经博主允许不得转载。

使用Nagios搭建监控服务器
第二十四章 使用Nagios搭建监控服务器【关于Nagios】Nagios是一款用于监控系统和网络的开源应用软件，它的模式是服务器—客户端，也就是说首先要在在一台服务器上（server）部署相应的主要套件，然后在要监控的服务器上部署客户端程序，这样server会和client通信，从而监控client端的各项资源。Nagios功能十分强大几乎所有的项目都可以监控，大到服务器的存活状态，小到服务器上的某一个服务（web）。这些功能都是通过自定义插件（或者叫做脚本）来实现。当Nagios监控到某项资源发生异常会通知到用户，你可以接入手机短信接口也可以接入邮件接口。我们可以通过web页面来查看Nagios所监控的各项资源，默认搭建的Nagios服务器只能监控简单的几个项目，而其他服务之类的监控项目都是由我们自己开发的插件来实现的。 【需要下载的软件】nagios-3.0.5  nagios-plugins-1.4.13  nrpe-2.12.tar.gz apache-2.2.11   // 以上软件版本可以不一样 【监控中心Server端的配置】1. 安装apache （略，请参考第16章中相关内容，只需安装，到后边再配置） 2. 建立nagios账户useradd  nagios 3. 下载软件cd  /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/nagios-3.0.5.tar.gzwget  http://syslab.comsenz.com/downloads/linux/nagios-plugins-1.4.13.tar.gzwget  http://syslab.comsenz.com/downloads/linux/nrpe-2.12.tar.gz 4. 编译安装nagioscd  /usr/local/src/tar  zxvf  nagios-3.0.5.tar.gzcd  nagios-3.0.5./configure  --prefix=/usr/local/nagiosmake allmake installmake install-init  # 把nagios做成一个运行脚本，使nagios随系统开机启动make install-config  # 把配置文件样例复制到nagios的安装目录make install-commandmode # 给外部命令访问nagios配置文件的权限chown -R nagios:nagios /usr/local/nagios 5. 编译安装nagios-pluginscd  /usr/local/src/tar zxvf nagios-plugins-1.4.13.tar.gzcd  nagios-plugins-1.4.13./configure  --prefix=/usr/local/nagios --with-nagios-user=nagios --with-nagios-group=nagiosmake && make install查看是否安装成功的方法是：ls /usr/local/nagios/libexec/看这个目录下是否有插件文件 6. 安装nrpecd /usr/local/src/tar zxvf  nrpe-2.12.tar.gz cd nrpe-2.12./configure --enable-ssl --enable-command-argsmake allmake install-pluginmake install-daemonmake install-daemon-config 7. 配置web接口vim  /usr/local/apache2/conf/httpd.conf在最后加入以下内容：ScriptAlias /nagios/cgi-bin /usr/local/nagios/sbin <Directory "/usr/local/nagios/sbin/">     AllowOverride AuthConfig     Options ExecCGI     Order allow,deny     Allow from all</Directory>  Alias /nagios/ /usr/local/nagios/share/<Directory "/usr/local/nagios/share">     Options None     AllowOverride AuthConfig     Order allow,deny     Allow from all</Directory> 8. 配置nagioscd  /usr/local/nagios/etc/vim cgi.cfg把 use_authentication=1  改成  use_authentication=0  意思是不用用户验证 9. 启动nagios 在启动前先检测一下：/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg如果最后显示如下，则说明配置没有问题了。Total Warnings: 0Total Errors:   0启动命令：/etc/init.d/nagios start或者：/usr/local/nagios/bin/nagios -d /usr/local/nagios/etc/nagios.cfg 此时，就可以访问web页面的nagios了，在浏览器中输入：http://IP/nagios/ 看看吧。 【在要监控的机器上client部署nagios】如果你打开了web页面，点击左栏的Host Detail 会在右栏看到一行数据，其中Host 名为 “localhost” ，Status显示为”up”，并且显示为绿色，如果是其他颜色就说明你的localhost出了问题。目前只有一行数据，也就是说只监控了监控中心（localhost）一台主机，那么如何添加其他机器被它监控呢？这就需要在要被监控的机器上也部署nagios软件。1. 添加账户useradd nagios 2. 安装nrpecd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/nrpe-2.12.tar.gztar zxvf  nrpe-2.12.tar.gz cd nrpe-2.12./configure --enable-ssl --enable-command-argsmake allmake install-pluginmake install-daemonmake install-daemon-config 3. 安装nagios-plugincd  /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/nagios-plugins-1.4.13.tar.gztar zxvf nagios-plugins-1.4.13.tar.gzcd  nagios-plugins-1.4.13./configure  --prefix=/usr/local/nagios --with-nagios-user=nagios --with-nagios-group=nagiosmake && make install到此就算安装完成了，请查看/usr/local/nagios/目录下是否有四个目录分别为：bin  etc  libexec  share 另外在libexec目录下会有很多check_开头的文件。如果你的机器上没有，就请重新安装吧。 4. 配置vim /usr/local/nagios/etc/nrpe.cfg找到”allowed_hosts=127.0.0.1” 改成 “allowed_hosts=127.0.0.1,10.0.4.67” // 后边的IP是server的IP找到” dont_blame_nrpe=0” 改成 “dont_blame_nrpe=1” 5. 启动nrpe/usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d 【在监控中心添加被监控主机】添加主机当然是要到server端（监控中心）修改配置文件了。1. 修改主配置文件cd  /usr/local/nagios/etc/vim nagios.cfg增加内容：cfg_dir=/usr/local/nagios/etc/services   ##定义一个目录，以后把新增加的主机信息文件全部放到这里 2. 添加被监控主机信息mkdir /usr/local/nagios/etc/servicescd  /usr/local/nagios/etc/servicesvim  10.0.4.56.cfg  加入如下内容：define host{        use     linux-server        host_name       10.0.4.56        alias           10.0.4.56        address         10.0.4.56}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_ping        check_command           check_ping!100.0,20%!200.0,50%        max_check_attempts 5        normal_check_interval 1}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_ssh        check_command           check_ssh        max_check_attempts 5        normal_check_interval 1}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_http        check_command           check_http        max_check_attempts 5        normal_check_interval 1}// 注意，这里的IP是client端的IP，监控的项目有三个ping, ssh, http。其实这三个项目使用的脚本都为本地脚本，也就是说，即使远程主机没有安装nagios和nrpe同样可以监控这些项目。但是如果想监控load，disk，等等就需要通过nrpe服务来搞定了，道理很简单，load和disk都需要登录到远程主机上去获得信息，而ping，ssh，http都不需要的。这个到远程主机获取相关的信息的过程是由nrpe完成的。如果你的client上没有启动nrpe服务那么我们是无法获取远程主机的load和disk等信息的。下面笔者配置一下使用nrpe来监控远程主机的相关项目。在server端编辑/usr/local/nagios/etc/objects/commands.cfgvim  /usr/local/nagios/etc/objects/commands.cfg  # 在最后面添加如下内容define command{        command_name    check_nrpe        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$        }然后编辑10.0.4.56.cfg （还是server上）cd   /usr/local/nagios/etc/servicesvim  10.0.4.56.cfg   # 加入如下内容：define service{        use     generic-service        host_name       10.0.4.56        service_description     check_load        check_command           check_nrpe!check_load        max_check_attempts 5        normal_check_interval 1} define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk_hda1        check_command           check_nrpe!check_hda1        max_check_attempts 5        normal_check_interval 1} define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk_hda2        check_command           check_nrpe!check_hda2        max_check_attempts 5        normal_check_interval 1}// 这里需要解释一下相关的”check_command”, 先看这个” check_nrpe!check_load” 这里的check_nrpe就是上面/usr/local/nagios/etc/objects/commands.cfg中刚刚定义的，后面的check_load是在远程主机上定义的一个命令脚本。具体在哪里定义稍后介绍。为什么中间加一个”!”，这个是nagios特有的形式，无需关心。下面需要到远程主机上去定义上面用到的脚本了。在远程主机上编辑/usr/local/nagios/etc/nrpe.cfg 文件vim  /usr/local/nagios/etc/nrpe.cfg (client上)把” command[check_hda1]”那行改成：command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1然后再增加一行：command[check_hda2]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda2// 这里的check_hda1 和 check_hda2 都是自定义的，和server端的定义的service中的check_command对应。也就是说，如果在server端定义了一个service（通过nrpe方式）那么必须要在客户端上的nrpe.cfg中定义相应的脚本。保存这个文件后，需要重新启动一下nrpe服务。killall nrpe ; /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d （client上） 3. 重启nagios服务修改了配置需要重启服务才能使添加的监控主机生效。/etc/init.d/nagios  restart  （server上）此时再到web页面去观察是否多了一台10.0.4.56  【在nagios客户端上自定义监控脚本】在开始，笔者就讲过，我们可以自定义写监控脚步，从上面的例子中也可以看到监控磁盘状态时，是根据磁盘分区来监控的。这样不免有些麻烦，因为每台主机的磁盘分区状况都不一样（一样还好），而且有多少个分区就需要定义多少个命令。所以笔者就自定义写一个shell脚本来监控所有的磁盘分区：1. 在客户端上创建脚本/usr/local/nagios/libexec/check_disk.shvim  /usr/local/nagios/libexec/check_disk.sh 写入如下内容：(client上)#!/bin/bashrow=`df -h -P|wc -l`status=0for i in `seq 2 $row`do        spare=`df -h -P|sed -n "$i"p|awk '{print $4}'`        use_percentage=`df -h -P|sed -n "$i"p|sed -n "s/\%//"p|awk '{print $5}'`        spare_percentage=`expr 100 - $use_percentage`        partition_name=`df -h -P|sed -n "$i"p|awk '{print $6}'`        if [ "$spare_percentage" -lt "3"  ];then                echo -n "$partition_name CRITICAL ${spare_percentage}% $spare  "                status[$i]=2        elif [ "$spare_percentage" -lt "5" ];then                echo -n  "$partition_name WARNING! ${spare_percentage}% $spare  "                status[$i]=1        else                echo -n  "$partition_name OK ${spare_percentage}% $spare  "                status[$i]=0        fidonezhuangtai=0for j in `seq 2 $row`do        if [ "${status[$j]}" -gt "$zhuangtai"  ];then                zhuangtai=${status[$j]}        fidoneexit $zhuangtai2. 保存后，修改该脚本的权限chmod +x  /usr/local/nagios/libexec/check_disk.sh （client上）3. 然后编辑/usr/local/nagios/etc/nrpe.cfg文件vim /usr/local/nagios/etc/nrpe.cfg  # 加入一行：（client上）command[check_disk]=/usr/local/nagios/libexec/check_disk.sh保存，重启nrpe服务killall nrpe ; /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d （client上）4. 检测刚才的脚本是否正常运行的方法是，到server端执行如下命令：/usr/local/nagios/libexec/check_nrpe -H 10.0.4.56 -c check_disk （server上）如果正常的话，会输出一行磁盘检测的数据，否则可能会报错。5. 到server上添加相应的servicecd   /usr/local/nagios/etc/services  （server上）vim  10.0.4.56.cfg   # 加入如下内容：define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk        check_command           check_nrpe!check_disk        max_check_attempts 5        normal_check_interval 1}6. 重启nagios服务/etc/init.d/nagios restart   （server上） 【配置nagios报警邮件】现在139邮箱有顺便发短信的功能，所以当有报警时，只需发送到你的139邮箱你就同样会收到一条报警短信。这样做的优势就是不用再去买短信网关了，节省了很大一笔钱。vim /usr/local/nagios/etc/objects/contacts.cfg把” email         nagios@localhost”  修改成 “email   你的139邮箱”vim /usr/local/nagios/etc/objects/templates.cfg找到：define service{        name                            generic-service之所以看这一段，是因为在上面添加的10.0.4.56.cfg 定义了很多generic-service所以要关注这段的配置。define service{name     generic-service                 active_checks_enabled          1                              passive_checks_enabled          1                       parallelize_check               1                       obsess_over_service             1                              check_freshness                 0                      notifications_enabled           1                              event_handler_enabled           1                       flap_detection_enabled          1                       failure_prediction_enabled      1                       process_perf_data               1                       retain_status_information        1                               retain_nonstatus_information    1                       is_volatile                     0                       check_period                    24x7         max_check_attempts              3                      normal_check_interval           10                      retry_check_interval            2                       ontact_groups                  admins                  notification_options            w,u,c,r                 notification_interval           60                      notification_period             24x7                    register                        0                      }其中有几个参数需要你注意：notifications_enabled : 是否开启提醒功能。1为开启，0为禁用。一般，这个选项会在主配置文件（nagios.cfg）中定义，效果相同。notification_interval: 重复发送提醒信息的最短间隔时间。默认间隔时间是60分钟。如果这个值设置为0，将不会发送重复提醒。notification_period: 发送提醒的时间段。非常重要的主机（服务）我定义为7×24，一般的主机（服务）就定义为上班时间。如果不在定义的时间段内，无论什么问题发生，都不会发送提醒。notification_options: 这个参数定义了发送提醒包括的情况：d = 状态为DOWN, u = 状态为UNREACHABLE , r = 状态恢复为OK ,  f = flapping。，n=不发送提醒。要想正确发送邮件，上面的参数得配置合理才行。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

文档的压缩与打包
  在windows下我们接触最多的压缩文件就是.rar格式的了。但在linux下这样的格式是不能识别的，它有自己所特有的压缩工具。但有一种文件在windows和linux下都能使用那就是.zip格式的文件了。压缩的好处不用笔者介绍相信你也晓得吧，它不仅能节省磁盘空间而且在传输的时候还能节省网络带宽呢。在linux下最常见的压缩文件通常都是以.tar.gz 为结尾的，除此之外还有.tar, .gz, .bz2, .zip等等。以前也介绍过linux系统中的后缀名其实要不要无所谓，但是对于压缩文件来讲必须要带上。这是为了判断压缩文件是由哪种压缩工具所压缩，而后才能去正确的解压缩这个文件。以下介绍常见的后缀名所对应的压缩工具。.gz    gzip 压缩工具压缩的文件.bz2   bzip2 压缩工具压缩的文件.tar    tar 打包程序打包的文件(tar并没有压缩功能，只是把一个目录合并成一个文件)	.tar.gz	可以理解为先用tar打包，然后再gzip压缩.tar.bz2	 同上，先用tar打包，然后再bzip2压缩【gzip】语法： gzip  [-d#] filename   其中#为1-9的数字-d ：解压缩时使用-# ：压缩等级，1压缩最差，9压缩最好，6为默认压缩test.txt后，则变成了test.txt.gz用-d解压缩要注意的是，gzip不可以压缩目录【bzip2】语法：bzip2  [-dz] filename-d ：解压缩-z ：压缩其实-z参数是可以省略掉的，你不妨试试跟gzip的解压类似，也是用-d解压。【tar】语法：tar [-zjxcvfpP] filename-z ：是否同时用gzip压缩-j ：是否同时用bzip2压缩-x ：解包或者解压缩-t ：查看tar包里面的文件-c ：建立一个tar包或者压缩文件包-v ：可视化-f ：后面跟文件名，压缩时跟-f文件名，意思是压缩后的文件名为filename，解压时跟-f文件名，意思是解压filename。请注意，如果是多个参数组合的情况下带有-f，请把f写到最后面。-p ：使用原文件的属性，压缩前什么属性压缩后还什么属性。（不常用）-P ：可以使用绝对路径。（不常用）--exclude  filename ：在打包或者压缩时，不要将filename文件包括在内。（不常用）首先在test目录下建立test111目录，然后在test111目录下建立test2.txt，并写入”nihao”到test2.txt中，接着是用tar把test111打包成test111.tar。请记住-f参数后跟的是打包后的文件名。删除原来的test111目录，然后解包test111.tar，不管是打包还是解包，原来的文件是不会删除的。打包的同时使用gzip压缩用-tf 跟包名来查看包或者压缩包内的文件都有哪些先删除test111,然后用tar -zxvf 来解压.tar.gz的压缩包。-jcvf 打包的同时用bzip2压缩，-tf同样可以查看.tar.bz2的压缩包-jxvf解压缩.tar.bz2的压缩包--exclude参数的作用就是打包的时候过滤掉某些文件，如果想过滤多个文件怎么办只能是继续跟 --exclude filename了。   

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

administrator无法创建新用户的解决
操作系统win2003sp2，已经是administrator了，但是创建新用户时提示：
在计算机 SERVER-05 上创建用户 abc 时，出现了以下错误:
拒绝访问。

百思不得其解，搜遍google和百度都没对症解药。
然后打开事件查看器，发现创建用户时系统抛错如下：
SAM 无法更改数据库。很可能是因为内存 或磁盘空间不足。SAM 数据库会被还原为先前状态。 最近的更改都会丢失。请检查可用磁盘空间 和页面文件大小设置的最大值。

搜了下SAM的相关知识，估摸着要么是文件被破坏，要么是权限不足
检查了windows/system32/config下面的SAM文件，都还健在，大小正常，查看权限administrator有完全控制权限。估计这块应该没问题。
打开注册表HKEY_LOCAL_MACHINE\SAM，发现是空的，应该是没有权限，右键，给administrators赋权完全控制后刷新。
继续打开到HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\这层，发现下面三个子项aliases、groups、users，竟然都没有权限，估计就是这儿了，继续给administrators赋权。
然后试着重新创建用户，这次成功了。
估计是什么安全软件把这个注册表项的权限给去掉了，才引起的这个问题。

版权声明：本文为博主原创文章，未经博主允许不得转载。

LAMP环境搭建
第十六章 LAMP环境搭建经过前部分章节的学习，你已经掌握了linux的基础知识了。但是想成为一名系统管理员恐怕还有点难度，因为好多单位招聘这个职位的时候都要求有一定的工作经验。然而真正的经验一天两天是学不来的，是靠长时间积累得来的。不过你也不要灰心，所谓的工作经验无非也就是一些运行在linux系统上的软件的配置以及应用。就好像是装在windows上的office一样，大部分人都会装，但是十分会用的却不多。是因为office太难吗，当然不是，只是因为只有一小部分人花费了很长很长的时间去使用和研究office而已。LAMP 是Linux Apache MySQL PHP的简写，其实就是把Apache, MySQL以及PHP安装在Linux系统上，组成一个环境来运行php的脚本语言。至于什么是php脚本语言，笔者不再介绍，请自己查资料吧。Apache是最常用的WEB服务软件，而MySQL是比较小型的数据库软件，这两个软件以及PHP都可以安装到windows的机器上。下面笔者就教你如何构建这个LAMP环境。【安装MySQL】一般我们平时安装MySQL都是源码包安装的，但是由于它的编译需要很长的时间，所以，笔者建议你安装二进制免编译包。你可以到MySQL官方网站去下载:http://www.mysql.com/downloads/ 具体版本根据你的平台和需求而定，目前比较常用的mysql-5.1.x 和mysql-5.3.x下面是安装步骤：1. 下载mysql到/usr/local/src/ cd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz2. 解压tar zxvf /usr/local/src/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz3. 把解压完的数据移动到/usr/local/mysqlmv mysql-5.0.86-linux-i686-icc-glibc23 /usr/local/mysql4. 建立mysql用户useradd mysql5. 初始化数据库cd /usr/local/mysqlmkdir /data/mysql ; chown -R mysql:mysql /data/mysql./scripts/mysql_install_db --user=mysql --datadir=/data/mysql --user定义数据库的所属主，--datadir定义数据库安装到哪里，建议放到大空间的分区上，这个目录需要自行创建。6. 拷贝配置文件cp support-files/my-large.cnf /etc/my.cnf7. 拷贝启动脚本文件并修改其属性cp support-files/mysql.server  /etc/init.d/mysqldchmod 755 /etc/init.d/mysqld8. 修改启动脚本vim /etc/init.d/mysqld需要修改的地方有datadir=/data/mysql（前面初始化数据库时定义的目录）9. 把启动脚本加入系统服务项，并设定开机启动，启动mysqlchkconfig --add mysqldchkconfig mysqld onservice mysqld start如果启动不了，请到/data/mysql/ 下查看错误日志，这个日志通常是主机名.err。关于mysql的配置文件/etc/my.cnf请参考这篇文章 http://www.92csz.com/19/603.html【安装Apache】cd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/httpd-2.2.11.tar.gzuseradd www （增加 Apache运行账户）tar zvxf httpd-2.2.11.tar.bz2cd httpd-2.2.11./configure --prefix=/usr/local/apache2 --with-included-apr --enable-so  --enable-deflate=shared --enable-expires=shared --enable-rewrite=shared  --enable-static-support --disable-userdirmakemake install 【安装PHP】wget http://syslab.comsenz.com/downloads/linux/php-5.2.10.tar.gztar zvxf php-5.2.10.tar.gzcd php-5.2.10./configure --prefix=/usr/local/php \ --with-apxs2=/usr/local/apache2/bin/apxs \--with-config-file-path=/usr/local/php/etc \--with-mysql=/usr/local/mysql \--with-libxml-dir \--with-gd \--with-jpeg-dir \--with-png-dir \--with-freetype-dir \--with-iconv-dir \--with-zlib-dir  \--with-bz2 \--with-openssl \--with-mcrypt \--enable-soap \--enable-gd-native-ttf \--enable-ftp \--enable-mbstring \--enable-sockets \--enable-exif \--disable-ipv6 make && make installmkdir /usr/local/php/etccp php.ini-dist /usr/local/php/etc/php.ini【apache结合php】Apache主配置文件为：/usr/local/apache2/conf/httpd.conf# vim /usr/local/apache2/conf/httpd.conf找到：AddType application/x-gzip .gz .tgz在该行下面添加AddType application/x-httpd-php .php找到：<IfModule dir_module>    DirectoryIndex index.html</IfModule>将该行改为<IfModule dir_module>    DirectoryIndex index.html index.htm index.php</IfModule>找到：#Include conf/extra/httpd-mpm.conf#Include conf/extra/httpd-info.conf#Include conf/extra/httpd-vhosts.conf#Include conf/extra/httpd-default.conf去掉前面的“#”号，取消注释。【配置apache的进程管理以及虚拟主机】1. 配置Apache进程管理配置文件为：/usr/local/apache2/conf/extra/httpd-mpm.conf将配置文件中下面一段修改为如下：<IfModule mpm_prefork_module>    ServerLimit          2048    新添加    StartServers          5    MinSpareServers      5    MaxSpareServers      10    MaxClients           1024 默认最大为256，设置为超过256必须增加有ServerLimit    MaxRequestsPerChild   0</IfModule>2. 配置Apache虚拟主机配置文件为：/usr/local/apache2/conf/extra/httpd-vhosts.conf将配置文件中下面一段修改为如下：<VirtualHost *:80>   # ServerAdmin webmaster@dummy-host.example.com    DocumentRoot "/data/www"    ServerName www.example.com.cn    ErrorLog "|/usr/local/apache2/bin/rotatelogs -l /www/logs/error.log-%Y%m%d 86400"   CustomLog "|/usr/local/apache2/bin/rotatelogs -l /www/logs/access.log-%Y%m%d 86400" combined   </VirtualHost>说明：ServerAdmin 参数后为管理员emailDocumentRoot 指的是论坛文件存放的目录ServerName  是论坛的域名ErrorLog 是论坛错误日志  通过管道使用apache自带的rotatelogs工具将日志切割为每天一个文件CustomLog 是论坛访问日志，同样切割为每天一个文件配置Apache缺省httpd设置配置文件为：/usr/local/apache2/conf/extra/httpd-default.conf将配置文件中下面一段：将KeepAlive On 改为KeepAlive Off配置Apache的访问权限vim /usr/local/apache2/conf/httpd.conf找到<Directory />Options FollowSymlinksAllowOverride NoneOrder deny,allowDeny form all</Directory>改成：<Directory />Options FollowSymlinksAllowOverride NoneOrder deny,allowAllow form all</Directory>        配置Apache的运行账户vim  /usr/local/apache2/conf/httpd.conf找到User  daemonGroup daemon改成User wwwGroup www配置完上述内容之后，启动Apache：/usr/local/apache2/bin/apachectl start【测试LAMP是否成功】vim /data/www/1.php写入：<?php phpinfo();?>保存后，然后在浏览器中输入 http://你配置的域名/1.php 看是否能看到php的相关配置信息。【Zend安装】有时，需要在你的LAMP环境中配置ZEND，因为有些php的应用程序比如Discuz! 或者phpwind等是需要用zend来解密的，不装zend会显示乱码。安装步骤为：cd /usr/local/srcwget http://syslab.comsenz.com/downloads/linux/ZendOptimizer-3.3.3-linux-glibc23-i386.tar.gztar zxvf ZendOptimizer-3.3.3-linux-glibc23-i386.tar.gzcd ZendOptimizer-3.3.3-linux-glibc23-i386 ./install.sh 根据提示安装。php.ini文件的路径为：/usr/local/php/etc/ 当提示是否重启apache时，选择不重启。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

vmware 复制一台虚机 （vmware copy/clone vm)
今天同事问关于如何复制一台已经配置好的VM， 本人研究了一下，其实这个功能还挺好用的。主要的方法如下： 
1. 选择创建虚机 
2. 这步很关健，选择自定义（使用其他设备或特定的配置选项创建虚机） 
3. 给虚机命一个响亮的名字 
4. 选择虚机文件的目标存储，默认的即可，直接【下一步】 
5. 选择虚机的版本，一般主机或集群支持多个VM版本（4， 7， 8），我们选择适合自己的，比如我的是5.5的，所以选择版本8. 
6. 选择虚机的客户操作系统（这个依赖于你想clone或备份的VM） 
7. 选择虚机中虚拟CPU的数量, 默认的即可，直接【下一步】 
8. 选择虚机内存大小，默认的即可，直接【下一步】 
9. 为虚机设置网络，选择虚机需要使用的虚拟网卡数量及适配器。默认的即可，直接【下一步】 
10. 选择虚机SCSI控制器。默认的即可，直接【下一步】 
11. 这步很关健，选择要使用的磁盘的类型，我们选择“使用现有虚拟磁盘，重新使用以前配置的虚拟磁盘” 
12. 选择现有磁盘（磁盘文件路径），即要将现有的哪个磁盘用作该虚拟磁盘，选择【浏览】，选择datastore, 然后找到该虚机的vmdk格式文件。【下一步】 
13. 指定虚拟磁盘的高级选项，正常情况下不需要更改这些选项，默认的即可，直接【下一步】 
14. 单击【完成】即可。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

小议：Site Collection中SharePoint Publishing Feature无法激活的解决方案
有些时候，我们在使用SharePoint某个功能的时候，需要Activate一些feature才能实现，比如Navigation，就需要ActivatePublishing
 feature，但是往往在Activate这个feature的时候，会遇到一些错误，比如：
 
问题描述：SiteCollection feature中的SharePoint
 Publishing Infrastructurefeature激活成功后，在site feature中激活SharePoint
 Publishing失败，提示：sorry, something went wrong。
 
问题分析：可能在激活Site Collection级别的Publishing
 feature的时候，有一些功能还是没有成功激活，所显示的状态可能是假象。
 
解决方案：可以借助SharePoint Manager Tool，找到Site
 Collection Feature下的PublishingInfrastructure feature变为deactivate，然后借着tool重新对site
 collection和site
级别中的publishingfeature进行activate，可以解决上述问题。
 
具体步骤：
 

打开SharePoint Manager 2013，找到具体的Site
 Collection->Root Site的Feature，如下图所示：

 



 

展开Site Collection->Root Site的Feature，找到SharePoint
 Server Publishing Feature，点击Deactivate。

 


 

展开Site Collection->Feature，找到SharePoint
 Server Publishing Infrastructure Feature，点击Deactivate。

 



 

之后在Site Collection Setting页面按照顺序依次Activate这两个Feature，就可以解决问题了。
 
希望本篇文章能给大家带来帮助。

版权声明：本文为博主原创文章，未经博主允许不得转载。

学习shell脚本之前的基础知识
第十二章 学习	shell脚本之前的基础知识日常的linux系统管理工作中必不可少的就是shell脚本，如果不会写shell脚本，那么你就不算一个合格的管理员。目前很多单位在招聘linux系统管理员时，shell脚本的编写是必考的项目。有的单位甚至用shell脚本的编写能力来衡量这个linux系统管理员的经验是否丰富。笔者讲这些的目的只有一个，那就是让你认真对待shell脚本，从一开始就要把基础知识掌握牢固，然后要不断的练习，只要你shell脚本写的好，相信你的linux求职路就会轻松的多。笔者在这一章中并不会多么详细的介绍shell脚本，而只是带你进入shell脚本的世界，如果你很感兴趣那么请到网上下载相关的资料或者到书店购买相关书籍吧。在学习shell 脚本之前，需要你了解很多关于shell的知识，这些知识是编写shell脚本的基础，所以希望你能够熟练的掌握。【什么是shell】简单点理解，就是系统跟计算机硬件交互时使用的中间介质，它只是系统的一个工具。实际上，在shell和计算机硬件之间还有一层东西那就是系统内核了。打个比方，如果把计算机硬件比作一个人的躯体，而系统内核则是人的大脑，至于shell，把它比作人的五官似乎更加贴切些。回到计算机上来，用户直接面对的不是计算机硬件而是shell，用户把指令告诉shell，然后shell再传输给系统内核，接着内核再去支配计算机硬件去执行各种操作。笔者接触的linux发布版本（Redhat/CentOS）系统默认安装的shell叫做bash，即Bourne Again Shell，它是sh（Bourne Shell）的增强版本。Bourn Shell 是最早行起来的一个shell，创始人叫Steven Bourne，为了纪念他所以叫做Bourn Shell，检称sh。那么这个bash有什么特点呢？1）记录命令历史我们敲过的命令，linux是会有记录的，预设可以记录1000条历史命令。这些命令保存在用户的家目录中的.bash_history文件中。有一点需要你知道的是，只有当用户正常退出当前shell时，在当前shell中运行的命令才会保存至.bash_history文件中。与命令历史有关的有一个有意思的字符那就是”!”了。常用的有这么几个应用：（1）!! （连续两个”!”），表示执行上一条指令；（2）!n（这里的n是数字），表示执行命令历史中第n条指令，例如”!100”表示执行命令历史中第100个命令；（3）!字符串（字符串大于等于1），例如!ta，表示执行命令历史中最近一次以ta为开头的指令。2）指令和文件名补全在本教程最开始笔者就介绍过这个功能了，记得吗？对了就是按tab键，它可以帮你补全一个指令，也可以帮你补全一个路径或者一个文件名。连续按两次tab键，系统则会把所有的指令或者文件名都列出来。3）别名前面也出现过alias的介绍，这个就是bash所特有的功能之一了。我们可以通过alias把一个常用的并且很长的指令别名一个简洁易记的指令。如果不想用了，还可以用unalias解除别名功能。直接敲alias会看到目前系统预设的alias ：看到了吧，系统预设的alias指令也就这几个而已，你也可以自定义你想要的指令别名。alias语法很简单，alias  [命令别名]=[’具体的命令’]。4）通配符在bash下，可以使用*来匹配零个或多个字符，而用?匹配一个字符。5）输入输出从定向输入重定向用于改变命令的输入，输出重定向用于改变命令的输出。输出重定向更为常用，它经常用于将命令的结果输入到文件中，而不是屏幕上。输入重定向的命令是<，输出重定向的命令是>，另外还有错误重定向2>，以及追加重定向>>，稍后会详细介绍。6）管道符前面已经提过过管道符”|”，就是把前面的命令运行的结果丢给后面的命令。7）作业控制。当运行一个进程时，你可以使它暂停（按Ctrl+z），然后使用fg命令恢复它，利用bg命令使他到后台运行，你也可以使它终止（按Ctrl+c）。【变量】前面章节中笔者曾经介绍过环境变量PATH，这个环境变量就是shell预设的一个变量，通常shell预设的变量都是大写的。变量，说简单点就是使用一个较简单的字符串来替代某些具有特殊意义的设定以及数据。就拿PATH来讲，这个PATH就代替了所有常用命令的绝对路径的设定。因为有了PATH这个变量，所以我们运行某个命令时不再去输入全局路径，直接敲命令名即可。你可以使用echo命令显示变量的值。除了PATH, HOME, LOGNAME外，系统预设的环境变量还有哪些呢？使用env命令即可全部列出系统预设的全部系统变量了。不过登录的用户不一样这些环境变量的值也不一样。当前显示的就是root这个账户的环境变量了。下面笔者简单介绍一下常见的环境变量：PATH	决定了shell将到哪些目录中寻找命令或程序HOME	当前用户主目录HISTSIZE	历史记录数LOGNAME	当前用户的登录名HOSTNAME	指主机的名称SHELL	前用户Shell类型LANG	语言相关的环境变量，多语言可以修改此环境变量MAIL	当前用户的邮件存放目录PWD	当前目录env命令显示的变量只是环境变量，系统预设的变量其实还有很多，你可以使用set命令把系统预设的全部变量都显示出来。限于篇幅，笔者在上例中并没有把所有显示结果都截图。set不仅可以显示系统预设的变量，也可以连同用户自定义的变量显示出来。用户自定义变量？是的，用户自己同样可以定义变量。虽然你可以自定义变量，但是该变量只能在当前shell中生效，不信你再登录一个shell试试？使用bash命令即可再打开一个shell，此时先前设置的myname变量已经不存在了，退出当前shell回到原来的shell，myname变量还在。那要想设置的变量一直生效怎么办？有两种情况：1） 要想系统内所有用户登录后都能使用该变量需要在/etc/profile文件最末行加入 “export  myname=Aming” 然后运行”source /etc/profile”就可以生效了。此时你再运行bash命令或者直接su - test账户看看。2）只想让当前用户使用该变量需要在用户主目录下的.bashrc文件最后一行加入“export  myname=Aming” 然后运行”source .bashrc”就可以生效了。这时候再登录test账户，myname变量则不会生效了。上面用的source命令的作用是，讲目前设定的配置刷新，即不用注销再登录也能生效。笔者在上例中使用”myname=Aming”来设置变量myname，那么在linux下设置自定义变量有哪些规则呢？a. 设定变量的格式为”a=b”，其中a为变量名，b为变量的内容，等号两边不能有空格；b. 变量名只能由英、数字以及下划线组成，而且不能以数字开头；c. 当变量内容带有特殊字符（如空格）时，需要加上单引号；有一种情况，需要你注意，就是变量内容中本身带有单引号，这就需要用到双引号了。d. 如果变量内容中需要用到其他命令运行结果则可以使用反引号；e. 变量内容可以累加其他变量的内容，需要加双引号；在这里如果你不小心把双引号加错为单引号，将得不到你想要的结果通过上面几个例子也许你能看得出，单引号和双引号的区别：用双引号时不会取消掉里面出现的特殊字符的本身作用（这里的$），而使用单引号则里面的特殊字符全部失去它本身的作用。在前面的例子中笔者多次使用了bash命令，如果在当前shell中运行bash指令后，则会进入一个新的shell，这个shell就是原来shell的子shell了，不妨你用pstree指令来查看一下。pstree这个指令会把linux系统中所有进程通过树形结构打印出来。限于篇幅笔者没有全部列出，你可以直接输入pstree查看即可。在父shell中设定一个变量后，进入子shell后该变量是不会生效的，如果想让这个变量在子shell中生效则要用到export指令，笔者曾经在前面用过。export其实就是声明一下这个变量的意思，让该shell的子shell也知道变量abc的值是123.如果export后面不加任何变量名，则它会声明所有的变量。在最后面连同我们自定义的变量都被声明了。前面光讲如何设置变量，如果想取消某个变量怎么办？只要输入”unset  变量名”即可。用unset  abc后，再echo  $abc则不再输出任何内容。【系统环境变量与个人环境变量的配置文件】上面讲了很多系统的变量，那么在linux系统中，这些变量被存到了哪里呢，为什么用户一登陆shell就自动有了这些变量呢？/etc/profile ：这个文件预设了几个重要的变量，例如PATH, USER, LOGNAME, MAIL, INPUTRC, HOSTNAME, HISTSIZE, umas等等。/etc/bashrc ：这个文件主要预设umask以及PS1。这个PS1就是我们在敲命令时，前面那串字符了，例如笔者的linux系统PS1就是 [root@localhost ~]# ，你不妨看一下PS1的值。\u就是用户，\h 主机名， \W 则是当前目录，\$就是那个’#’了，如果是普通用户则显示为’$’除了两个系统级别的配置文件外，每个用户的主目录下还有几个这样的隐藏文件：.bash_profile ：定义了用户的个人化路径与环境变量的文件名称。每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。.bashrc ：该文件包含专用于你的shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。例如你可以将用户自定义的alias或者自定义变量写到这个文件中。.bash_history ：记录命令历史用的。.bash_logout ：当退出shell时，会执行该文件。可以把一些清理的工作放到这个文件中。 【linux shell中的特殊符号】你在学习linux的过程中，也许你已经接触过某个特殊符号，例如”*”，它是一个通配符号，代表零个或多个字符或数字。下面笔者就说一说常用到的特殊字符。1.  *  ：代表零个或多个字符或数字。test后面可以没有任何字符，也可以有多个字符，总之有或没有都能匹配出来。2.  ?  ：只代表一个任意的字符不管是数字还是字母，只要是一个都能匹配出来。3.  #  ：这个符号在linux中表示注释说明的意思，即”#”后面的内容linux忽略掉。在命令的开头或者中间插入”#” ，linux都会忽略掉的。这个符号在shell脚本中用的很多。4.  \  ：脱意字符，将后面的特殊符号（例如”*” ）还原为普通字符。5.  |  ：管道符，前面多次说过，它的作用在于将符号前面命令的结果丢给符号后面的命令。这里提到的后面的命令，并不是所有的命令都可以的，一般针对文档操作的命令比较常用，例如cat, less, head, tail, grep, cut, sort, wc, uniq, tee, tr, split, sed, awk等等，其中grep, sed, awk为正则表达式必须掌握的工具，在后续内容中详细介绍。6.  $ ：除了用于变量前面的标识符外，还有一个妙用，就是和’!’结合起来使用。‘!$’表示上条命中中最后一个变量（也许称为变量不合适，总之就是上条命令中最后出现的那个东西）例如上边命令最后是test.txt那么在当前命令下输入!$则代表test.txt。1）grep ：过滤一个或多个字符，将会在后续内容中详细介绍其用法。2) cut ：截取某一个字段语法：cut  -d  “分隔字符”  [-cf] n  这里的n是数字-d ：后面跟分隔字符，分隔字符要用双引号括起来-c ：后面接的是第几个字符-f ：后面接的是第几个区块-d 后面跟分隔字符，这里使用冒号作为分割字符，-f 1 就是截取第一段，-f和1之间的空格可有可无。-c 后面可以是1个数字n，也可以是一个区间n1-n2，还可以是多个数字n1,n2,n33) sort ：用做排序语法：sort  [-t 分隔符]  [-kn1,n2]  [-nru]  这里的n1 < n2-t 分隔符 ：作用跟cut的-d一个意思-n ：使用纯数字排序-r ：反向排序-u ：去重复-kn1,n2 ：由n1区间排序到n2区间，可以只写-kn1，即对n1字段排序4) wc ：统计文档的行数、字符数、词数，常用的选项为：-l ：统计行数-m ：统计字符数-w ：统计词数5） uniq ：去重复的行，笔者常用的选项只有一个：-c ：统计重复的行数，并把行数写在前面有一点需要注意，在进行uniq之前，需要先用sort排序然后才能uniq，否则你将得不到你想要的，笔者上面的试验当中已经是排序过所以省略掉那步了。6）tee ：后跟文件名，类似与重定向”>”，但是比重定向多了一个功能，在把文件写入后面所跟的文件中的同时，还显示在屏幕上。7）tr ：替换字符，常用来处理文档中出现的特殊符号，如DOS文档中出现的^M符号。常用的选项有两个：-d ：删除某个字符，-d 后面跟要删除的字符-s ：把重复的字符去掉最常用的就是把小写变大写： tr  ‘[a-z]’ ‘[A-Z]’当然替换一个字符也是完全可以的。不过替换、删除以及去重复都是针对一个字符来讲的，有一定局限性。如果是针对一个字符串就不再管用了，所以笔者建议只是简单了解这个tr即可，以后你还会学到更多可以实现针对字符串操作的工具。8）split ：切割文档，常用选项：-b ：依据大小来分割文档，单位为byte格式如上例，后面的passwd为分割后文件名的前缀，分割后的文件名为passwdaa, passwdab, passwdac … -l ：依据行数来分割文档6.  ； ：分号。平时我们都是在一行中敲一个命令，然后回车就运行了，那么想在一行中运行两个或两个以上的命令如何呢？则需要在命令之间加一个”;”了。7. ~ ：用户的家目录，如果是root则是 /root ，普通用户则是 /home/username8. & ：如果想把一条命令放到后台执行的话，则需要加上这个符号。通常用于命令运行时间非常长的情况。使用jobs可以查看当前shell中后台执行的任务。用fg可以调到前台执行。这里的sleep命令就是休眠的意思，后面跟数字，单位为秒，常用语循环的shell脚本中。此时你按一下CTRL +z 使之暂停，然后再输入bg可以再次进入后台执行。如果是多任务情况下，想要把任务调到前台执行的话，fg后面跟任务号，任务号可以使用jobs命令得到。9. >, >>, 2>, 2>> ：前面讲过重定向符号> 以及>>　分别表示取代和追加的意思，然后还有两个符号就是这里的2> 和 2>>　分别表示错误重定向和错误追加重定向，当我们运行一个命令报错时，报错信息会输出到当前的屏幕，如果想重定向到一个文本里，则要用2>或者2>>。10. [ ] ：中括号，中间为字符组合，代表中间字符中的任意一个11.  && 与 || 在上面刚刚提到了分号，用于多条命令间的分隔符。另外还有两个可以用于多条命令中间的特殊符号，那就是 “&&”和”||”。下面笔者把这几种情况全列出：1)  command1 ; command22)  command1 && command23)  command1 || command2使用”;”时，不管command1是否执行成功都会执行command2； 使用”&&”时，只有command1执行成功后，command2才会执行，否则command2不执行；使用”||”时，command1执行成功后command2 不执行，否则去执行command2，总之command1和command2总有一条命令会执行。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

配置Tomcat
第二十二章 配置Tomcat【关于Tomcat】目前有很多网站使用jsp的程序编写，所以解析jsp的程序就必须要有相关的软件来完成。Tomcat就是用来解析jsp程序的一个软件， Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应对HTML 页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。【安装Tomcat】Tomcat的安装分为两个步骤：安装JDK；安装Tomcat。JDK(Java Development Kit)是Sun Microsystems针对Java开发员的产品。自从Java推出以来，JDK已经成为使用最广泛的Java SDK。JDK 是整个Java的核心，包括了Java运行环境，Java工具和Java基础的类库。所以要想运行jsp的程序必须要有JDK的支持，理所当然安装Tomcat的前提是安装好JDK。 1. 安装JDK下载jdk-6u23-linux-i586.bin cd /usr/local/src/wget http://dl.dropbox.com/u/182853/jdk-6u23-linux-i586.bin（如果该版本不合适请到下面的官方网站下载适合你的版本）：https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jdk-6u23-oth-JPR@CDS-CDS_Developerchmod a+x jdk-6u23-linux-i586.binsh jdk-6u23-linux-i586.bin此时会出现JDK 安装授权协议。可以一路按Enter浏览，当出现Do you agree to the above license terms? [yes or no] 的字样,输入yes即可。mv  jdk1.6.0_23  /usr/local/ 2. 设置环境变量vim /etc/profile在末尾输入以下内容#set java environmentJAVA_HOME=/usr/local/jdk1.6.0_23/JAVA_BIN=/usr/local/jdk1.6.0_23/binJRE_HOME=/usr/local/jdk1.6.0_23/jrePATH=$PATH:/usr/local/jdk1.6.0_23/bin:/usr/local/jdk1.6.0_23/jre/binCLASSPATH=/usr/local/jdk1.6.0_23/jre/lib:/usr/local/jdk1.6.0_23/lib:/usr/local/jdk1.6.0_23/jre/lib/charsets.jarexport  JAVA_HOME  JAVA_BIN JRE_HOME  PATH  CLASSPATH执行命令source /etc/profile，使配置立即生效source /etc/profile检测是否设置正确：java –version如果显示如下内容，则配置正确。java version "1.4.2"gij (GNU libgcj) version 4.1.2 20080704 (Red Hat 4.1.2-46) Copyright (C) 2006 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 3.安装Tomcatcd /usr/local/src/wget http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.14/bin/apache-tomcat-7.0.14.tar.gz如果觉得这个版本不适合你，请到tomcat官方网站下载适合你的版本。tar zxvf apache-tomcat-7.0.14.tar.gzmv apache-tomcat-7.0.14 /usr/local/tomcatcp -p /usr/local/tomcat/bin/catalina.sh /etc/init.d/tomcatvim /etc/init.d/tomcat 在第二行加入以下内容：# chkconfig: 2345 63 37# description: tomcat server init script JAVA_HOME=/usr/local/jdk1.6.0_23/CATALINA_HOME=/usr/local/tomcat chmod 755 /etc/init.d/tomcatchkconfig --add tomcatchkconfig tomcat on 启动tomcat：service tomcat start查看是否启动成功：ps aux |grep tomcat如果有进程的话，请在浏览器中输入http://IP:8080/ 你会看到tomcat的主界面。【配置tomcat】在配置tomcat前，先来看看tomcat的几个目录：find /usr/local/tomcat/ -maxdepth 1 -type d （-maxdepth的作用指定目录级数，后边跟1代表只查找1级目录）/usr/local/tomcat//usr/local/tomcat/lib       # tomcat的库文件目录/usr/local/tomcat/temp           # 临时文件存放目录/usr/local/tomcat/webapps             # web应用目录，也就是我们访问的web程序文件所在目录/usr/local/tomcat/conf             # 配置文件目录/usr/local/tomcat/logs             # 日志文件所在目录/usr/local/tomcat/work            # 存放JSP编译后产生的class文件/usr/local/tomcat/bin               # tomcat的脚本文件Tomcat的主配置文件为/usr/local/tomcat/conf/server.xml1. 配置tomcat服务的访问端口。默认是8080，如果你想修改为80，则需要修改server.xml文件。找到 <Connector port="8080" protocol="HTTP/1.1"修改为：<Connector port="80" protocol="HTTP/1.1"2. 配置新的虚拟主机cd /usr/local/tomcat/conf/vim server.xml找到</Host>，下一行插入新的<Host>，内容如下：      <Host name="www.example.cn" appBase="/data/tomcatweb"            unpackWARs="false" autoDeploy="true"            xmlValidation="false" xmlNamespaceAware="false">      <Context path="" docBase="./" debug="0" reloadable="true" crossContext="true"/>      </Host>完成后，重启tomcatservice tomcat stop; service tomcat start测试新建的虚拟主机，首先需要修改你电脑的hosts文件vim /data/tomcatweb/test.jsp 加入以下内容：<html><body><center>Now time is: <%=new java.util.Date()%></center></body></html>保存后，在你的浏览器里输入 http://www.example.cn/test.jsp 看是否访问到如下内容：Now time is: Thu Jun 02 14:32:34 CST 2011 上面的test.jsp就是要显示当前系统的时间。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

配置samba服务器
第二十三章  配置samba服务器以前我们在windows上共享文件的话，只需右击要共享的文件夹然后选择共享相关的选项设置即可。然而如何实现windows和linux的文件共享呢？这就涉及到了samba服务了，这个软件配置起来也不难，使用也非常简单。 【samba配置文件smb.conf】一般你装系统的时候会默认安装samba，如果没有安装，只需要运行这个命令安装(CentOS)：“yum install -y samba samba-client”Samba的配置文件为/etc/samba/smb.conf，通过修改这个配置文件来完成我们的各种需求。打开这个配置文件，你会发现很多内容都用”#”或者”;”注视掉了。先看一下未被注释掉的部分：[global]        workgroup = MYGROUP        server string = Samba Server Version %v        security = user        passdb backend = tdbsam        load printers = yes        cups options = raw[homes]        comment = Home Directories        browseable = no        writable = yes[printers]        comment = All Printers        path = /var/spool/samba        browseable = no        guest ok = no        writable = no        printable = yes主要有以上三个部分：[global], [homes], [printers]。 [global] 定义全局的配置，”workgroup”用来定义工作组，相信如果你安装过windows的系统，你会对这个workgroup不陌生。一般情况下，需要我们把这里的”MYGROUP”改成”WORKGROUP”（windows默认的工作组名字）。security = user #这里指定samba的安全等级。关于安全等级有四种：share：用户不需要账户及密码即可登录samba服务器user：由提供服务的samba服务器负责检查账户及密码（默认）server：检查账户及密码的工作由另一台windows或samba服务器负责domain：指定windows域控制服务器来验证用户的账户及密码。passdb backend = tdbsam  # passdb backend （用户后台），samba有三种用户后台：smbpasswd, tdbsam和ldapsam.smbpasswd：该方式是使用smb工具smbpasswd给系统用户（真实用户或者虚拟用户）设置一个Samba 密码，客户端就用此密码访问Samba资源。smbpasswd在/etc/samba中，有时需要手工创建该文件。tdbsam：使用数据库文件创建用户数据库。数据库文件叫passdb.tdb，在/etc/samba中。passdb.tdb用户数据库可使用smbpasswd –a创建Samba用户，要创建的Samba用户必须先是系统用户。也可使用pdbedit创建Samba账户。pdbedit参数很多，列出几个主要的：pdbedit –a username：新建Samba账户。pdbedit –x username：删除Samba账户。pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。pdbedit –Lv：列出Samba用户列表详细信息。pdbedit –c “[D]” –u username：暂停该Samba用户账号。pdbedit –c “[]” –u username：恢复该Samba用户账号。ldapsam：基于LDAP账户管理方式验证用户。首先要建立LDAP服务，设置“passdb backend = ldapsam:ldap://LDAP Server”load printers 和 cups options 两个参数用来设置打印机相关。除了这些参数外，还有几个参数需要你了解：netbios name = MYSERVER  # 设置出现在“网上邻居”中的主机名hosts allow = 127.  192.168.12.  192.168.13. # 用来设置允许的主机，如果在前面加”;”则表示允许所有主机log file = /var/log/samba/%m.log #定义samba的日志，这里的%m是上面的netbios namemax log size = 50 # 指定日志的最大容量，单位是K [homes] 该部分内容共享用户自己的家目录，也就是说，当用户登录到samba服务器上时实际上是进入到了该用户的家目录，用户登陆后，共享名不是homes而是用户自己的标识符，对于单纯的文件共享的环境来说，这部分可以注视掉。 [printers] 该部分内容设置打印机共享。 【samba实践】注意：在试验之前，请先检测selinux是否关闭，否则可能会试验不成功。关于如何关闭selinux请查看第十五章 linux系统日常管理的“linux的防火墙”部分 1. 共享一个目录，任何人都可以访问，即不用输入密码即可访问，要求只读。打开samba的配置文件/etc/samba/smb.conf [global]部分把”MY GROUP”改成”WORKGROUP”把” security = user” 修改为 “security = share”然后在文件的最末尾处加入以下内容：[share]        comment = share all        path = /tmp/samba        browseable = yes        public = yes        writable = no mkdir /tmp/sambachmod 777 /tmp/samba启动samba服务/etc/init.d/smb start 测试：首先测试你配置的smb.conf是否正确，用下面的命令testparm如果没有错误，则在你的windows机器上的浏览器中输入 file://IP/share 看是否能访问 2. 共享一个目录，使用用户名和密码登录后才可以访问，要求可以读写打开samba的配置文件/etc/samba/smb.conf [global] 部分内容如下：[global]        workgroup = WORKGROUP        server string = Samba Server Version %v        security = user        passdb backend = tdbsam        load printers = yes        cups options = raw 然后加入以下内容：[myshare]        comment = share for users        path = /samba        browseable = yes        writable = yes        public = no 保存配置文件，创建目录：mkdir /sambachmod 777 /samba然后添加用户。因为在[globa]中” passdb backend = tdbsam”，所以要使用” pdbedit” 来增加用户，注意添加的用户必须在系统中存在。useradd  user1 user2pdbedit -a user1  # 添加user1账号，并定义其密码pdbedit -a user2pdbedit -L # 列出所有的账号测试：打开IE浏览器输入file://IP/myshare/ 然后输入用户名和密码 3. 使用linux访问samba服务器Samba服务在linux下同样可以访问。前提是你的linux安装了samba-client软件包。安装完后就可以使用smbclient命令了。smbclient //IP/共享名  -U 用户名  如：[root@localhost]# smbclient //10.0.4.67/myshare/ -U user1Password:Domain=[LOCALHOST] OS=[Unix] Server=[Samba 3.0.33-3.29.el5_6.2]smb: \>出现如上所示的界面。可以打一个”?”列出所有可以使用的命令。常用的有cd, ls, rm, pwd, tar, mkdir, chown, get, put等等，使用help + 命令可以打印该命令如何使用，其中get是下载，put是上传。另外的方式就是通过mount挂载了：如：mount -t cifs //10.0.4.67/myshare /mnt -o username=user1,password=123456格式就是这样，要指定-t cifs //IP/共享名 本地挂载点  -o后面跟username 和 password挂载完后就可以像使用本地的目录一样使用共享的目录了。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

windows下把本地代码同步到github上
1、在windows上安装gith客户端——msysgit，网址http://msysgit.github.io/下载。


2、注册github帐号，然后在github上创建仓库








3、然后在本地创建一个文件夹(名字和github上的仓库名一样，例如test)，把要同步的代码文件放进去


4、最后，按照github上的提示命令执行，如下：
 1）本地进入到test目录，执行git init
 2）执行 git add .  把本地仓库中所有文件添加到版本库；
 3）提交：git  commit -m "first"
 4）执行：git remote add origin https://github.com/lanjingling/test.git
 5）提交：git push -u origin master 
  输入用户名、密码 即可

版权声明：本文为博主原创文章，未经博主允许不得转载。

配置squid服务
第二十一章配置squid服务【什么是squid】Squid是比较知名的代理软件，它不仅可以跑在linux上还可以跑在windows以及Unix上，它的技术已经非常成熟。目前使用Squid的用户也是十分广泛的。Squid与Linux下其它的代理软件如Apache、Socks、TIS FWTK和delegate相比，下载安装简单，配置简单灵活，支持缓存和多种协议。Squid的缓存功能相当好用，不仅可以减少带宽的占用，同样也大大降低了后台的WEB服务器的磁盘I/O的压力。Squid接收用户的下载申请，并自动处理所下载的数据。也就是说，当一个用户象要下载一个主页时，它向Squid发出一个申请，要Squid替它下载，然后Squid 连接所申请网站并请求该主页，接着把该主页传给用户同时保留一个备份，当别的用户申请同样的页面时，Squid把保存的备份立即传给用户，使用户觉得速度相当快。 Squid将数据元缓存在内存中，同时也缓存DNS查寻的结果，除此之外，它还支持非模块化的DNS查询，对失败的请求进行消极缓存。Squid支持SSL，支持访问控制。由于使用了ICP，Squid能够实现重叠的代理阵列，从而最大限度的节约带宽。 Squid对硬件的要求是内存一定要大，不应小于128M，硬盘转速越快越好，最好使用服务器专用SCSI 硬盘，处理器要求不高，400MH以上既可。【安装squid】wget http://www.squid-cache.org/Versions/v2/2.6/squid-2.6.STABLE20.tar.gztar zxvf squid-2.6.STABLE20.tar.gzcd squid-2.6.STABLE20ulimit -HSn 65535useradd  squid编译参数./configure --prefix=/usr/local/squid \--disable-dependency-tracking \--enable-dlmalloc \--enable-gnuregex \--disable-carp \--enable-async-io=240 \--with-pthreads \--enable-storeio=ufs,aufs,diskd,null \--disable-wccp \--disable-wccpv2 \--enable-kill-parent-hack \--enable-cachemgr-hostname=localhost \--enable-default-err-language=Simplify_Chinese \--with-build-environment=POSIX_V6_ILP32_OFFBIG \--with-maxfd=65535 \--with-aio \--disable-poll \--enable-epoll \--enable-linux-netfilter \--enable-large-cache-files \--disable-ident-lookups \--enable-default-hostsfile=/etc/hosts \--with-dl \--with-large-files \--enable-removal-policies=heap,lru \--enable-delay-pools \--enable-snmp \--disable-internal-dnsmake && make install 关于squid的版本，有必要提一下，目前squid最新版本已经到了3.1了，但是笔者认为2.6版本比较好用，如果你有兴趣可以研究一下3.1。【squid配置】编辑配置文件 /usr/local/squid/etc/squid.conf把原来配置文件删除，替换成：http_port 80 transparentcache_replacement_policy lru  #如果有多个（下面两行）缓存目录，则需要写这个参数cache_dir aufs  /cache1 8192 16 256  #缓存目录1 /cache1 大小为8Gcache_dir aufs /cache2 4096 16 256  #缓存目录2 /cache2 大小为4G## 上面两行定义了缓存目录，这个缓存目录可以只有一个，也可以定义很多个。cache_mem 2048 MB  #分配多少内存给squid，建议留至少512M给系统，如果你是虚拟机内存很小，只作为试验用的话，那就分一半内存给squidmaximum_object_size 2048 KB  #缓存的文件最大不能超过2Mmaximum_object_size_in_memory 512 KB #缓存在内存中的文件最大不超过512kvisible_hostname cache.example.com  #显示给用户的主机名client_persistent_connections off  #client端关闭长连接server_persistent_connections on  #server端打开长连接memory_pools onmemory_pools_limit 1024 MBforwarded_for onlog_icp_queries offcache_mgr  cache@example.com  #定义管理员的mail为cache@example.comvia onhttpd_suppress_version_string offcache_effective_user squid   #定义以squid用户的身份运行squidcache_effective_group squiderror_directory /usr/local/squid/share/errors/Simplify_Chineseicon_directory /usr/local/squid/share/iconsmime_table /usr/local/squid/etc/mime.confie_refresh offtcp_recv_bufsize 32 KBacl all src 0.0.0.0/0.0.0.0acl localhost src 127.0.0.0/8 acl Mgr_ip src 127.0.0.0/8 acl allow_ip dst 127.0.0.0/8  192.168.0.0/16  #定义允许代理的web的IP或者IP段acl PURGE method PURGEacl Safe_ports port 80 8080acl CONNECT method CONNECTacl manager proto cache_objectacl HTTP proto HTTPhttp_access allow allow_iphttp_access allow manager Mgr_iphttp_access deny managerhttp_access deny PURGEhttp_access deny !Safe_portshttp_access deny allicp_access deny allipcache_size 1024ipcache_low 90ipcache_high 95memory_replacement_policy lruhosts_file /etc/hostsrequest_header_max_size 128 KBhierarchy_stoplist cgi-bin ? \.php \.htmlacl QUERY urlpath_regex cgi-bin \? \.php \.htmlcache deny QUERYquick_abort_min -1 KBquick_abort_max 32 KBquick_abort_pct 95# error page#error_map http://www.92csz.com/404.html 403#deny_info http://www.92csz.com/error.html cctv_Domain# timeoutpeer_connect_timeout 20 secondsconnect_timeout 20 secondsread_timeout 60 secondsrequest_timeout 20 secondspconn_timeout 20 secondsshutdown_lifetime 5 secondsstrip_query_terms officp_port 0# logfileemulate_httpd_log onlogformat combined %>a %ui %un [%tl] "%rm %ru HTTP/%rv" %Hs %<st "%{Referer}>h" "%{User-Agent}>h" %Ss:%Sh#access_log /log/squid-log/access.log combinedcache_store_log /dev/nullcache_log /var/log/squid/cache.loglogfile_rotate 12# MISCELLANEOUSstore_objects_per_bucket 15client_db off 修改完配置文件后保存，然后初始化squidmkdir /cache1  /cache2 /var/log/squidchown -R squid:squid /cache1 /cache2 /var/log/squid/usr/local/squid/sbin/squid  -z  # 用来生成cache目录，如果你的配置文件配置出错，往往会在初始化的时候报错，错误信息会直接显示在屏幕上。初始化成功后，就可以启动squid了，启动命令为：nohup /usr/local/squid/bin/RunCache &启动后，可以去看看cache.log 在这个日志中，你可以看到很多关于squid的信息，当然也包括一些错误日志。如果想开机启动则需要在/etc/rc.d/rc.local中最后加入一行/usr/local/bin/RunCache &到这里算是配置完成了，但是还有一个问题，就是如何定义被代理的web以及域名？单单看配置文件并没有说代理的web是哪一个。确实，这个配置文件其实可以代理多台web，只要你在/etc/hosts中定义要代理的域名以及IP即可，hosts格式在前面已经介绍过。笔者要提醒你的是，如果是一台web上的多个域名，请不要写一行，虽然hosts是允许的，但是如果写成一个IP对应多个域名，squid代理时就会出错。所以有几个域名就要写几行。更改/etc/hosts后要重启squid才能生效：/usr/local/squid/sbin/squid  -krec在重启前可以先检测一下，是否有错，命令为：/usr/local/squid/sbin/squid –kcheck如果没有错，则不会显示任何信息，否则会显示一些信息出来。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

﻿﻿﻿﻿双机热备数据库备份脚本 v2.1
Text
/*
THIS4.0 数据库备份脚本

[作者] Rulition QQ:7355157

[版本] v2.1

[修改]
       2010年5月21日15:35:13 完成
       2010年5月24日11:35:13 细节修改
       2010年5月25日11:31:13 增加[完整备份]前的一致性检查
       2010年5月27日10:31:13 检查差异备份的大小,避免过大文件影响差异备份.
       2010年5月28日11:14:15 补备份时查看最近是否已做过完全备份.
       2010年10月17日21:58:32 切换@备份路径[如果是第一次运行,可以 Select @备份路径 = @备份路径1]
       2011年03月17日15:00:00 增加单双月备份,增加完全备份频次,修证(30)删除过期备份文件
       2012-10-26 14:53 修改 月备份 到 \\202.202.202.26\Y$\This_BackUp
       2012-10-31 10:00 增加 正常运行时 显示 ‘可用磁盘空间不足’的中间计算结果。
       2015年03月31日10:00:00 修改说明，并将 DBCC 改成晚上执行.
----
       2015-04-03 09:00 v2.0 修改流程，将外部引用的程序放在前部，处理参数校验，增加更多的说明，差异备份文件太大时改为提示手工处理。

[环境] SQL2000 和 SQL2005 中测试通过

[来源] http://blog.csdn.net/rulition/article/details/47999561

[说明]
	利用双机热备的磁盘空间,将 THIS4.0 数据库的备份计划设置为以下方式:

	"差异备份"-每N小时执行一次,分别存储到 1# 和 2# 的 C: , 保留N天。
	"完整备份"-按可用空间，指定在 12:25 21:25 03:25 ,存储到 群集空间，保留X天。

        例如：本脚目前的设置状态为:

              1\按 SQL 计划任务的要求，每3小时的25分时运行一次，在 12:25、21:25、03:25 这三个时间点进行完整备份，其他时间点进行差异备份。
              2\每月1号的月备份后缀名不再是.bak 而是 .ybf。（还可以按单双月，将备份放在不同的地方.）
              3\数据库的一致性检查放在下半夜进行。

[特点]
	1）备份频度由 SQL 计划任务来调节
	2）操作日志由 SQL 计划任务通过追加方式进行收集 (详见计划任务的高级选项)
	3) 先删除过期备份文件，然后再执行备份操作，与 SQL 操作模式相反 
  	 （也可以修改 (备份前的准备工作) 这一小节，与 SQL 操作模式一样。）
	4）自动判断并建立备份文件夹、按保留时间删除过期备份文件
	5）在执行备份操作前，自动检查空间是否够用，自动回避[差异备份][完整备份]同时进行，并进行一致性检查。
	6）检查差异备份的大小,避免过大文件影响差异备份.并自动做一次[完整备份]

[注意]
	1）脚本中大量使用 MS-DOS 命令，如果不是很熟悉，请不要修改！
	2）为删除过期备份文件使用了 FORFILES.exe 命令，否则无法执行。
	   这个可以在 Win2000 环境下使用的命令，是 FORFILES v 1.1 - emmanubo@microsoft.com - 4/98
	   与 Win7 系统自带的中文版，在使用参数上有一点区别，使用时请注意！
	3）为减少操作日志大小，在 (一致性检查) 这一小节调用了 isql.exe ，这个文件在 SQL2005 中没有，
	   可以从 SQL2000 系统中拷贝过来，使用时注意路径。 
        4) 所有外部引用的程序(含路径)，必须在 1#机 和 2#机 存放在同一路径下，且此程序不缺少相应的
           支持文件，否则，程序将无法正常运行。
        5) 所需 FORFILES.exe 和 isql.exe 可从以下地址获取：http://download.csdn.net/detail/rulition/9048595


[参考]
	1)清理系统备份日志、 删除备份作业的历史记录
	2)关于SQL2005 远程备份

	*以上资料详见脚本最后一部分

exec usp_job_backup_this4 0

*/


CREATE Proc usp_job_backup_this4
(@Is_Run int = 0 )	---- 0-测试运行并显示操作记录 ,当 @Is_Run = 1 时，自动执行所有操作。
AS
----
----
SET NOCOUNT ON
----
Select GetDate() AS '【开始时间】'
--- Test
-- Declare @Is_Run int
-- Select @Is_Run = 0
----
IF @Is_Run = 0 Print '【测试状态】'
----
----
/*设置外部引用程序(含路径)*/
declare @ISQL varchar(50)
declare @FORFILES varchar(50)
 Select @ISQL='C:\THIS_BAT\isql.exe'
 Select @FORFILES='C:\THIS_BAT\forfiles.exe'
----开启 xp_cmdshell 支持
-- Exec sp_configure 'show advanced options', 1
-- reconfigure with override
-- Exec sp_configure 'xp_cmdshell', 1 
-- reconfigure with override
-- Exec sp_configure 'show advanced options', 0
-- reconfigure with override
----参数检查
declare @SQL varchar(8000)
 Select @SQL='dir '+@ISQL
declare @result int
   Exec @result = xp_cmdshell @SQL,NO_OUTPUT
IF (@result = 1)
        Begin
        Print '错误:没有找到外部引用程序: '+@ISQL
        Return
        End
Select @SQL=Replace(@SQL,@ISQL,@FORFILES)
  Exec @result = xp_cmdshell @SQL,NO_OUTPUT
IF (@result = 1)
        Begin
        Print '错误:没有找到外部引用程序: '+@FORFILES
        Return
        End
----
----
/*设置运行参数*/
Declare @数据库名 varchar(100)
Declare @备份路径 varchar(100)
Declare @备份文件 varchar(100)
Declare @备份方式 varchar(50)
Declare @保留时间 varchar(10)
Declare @备份语句 varchar(1000)
----
 Select @数据库名 = 'THIS4'
 Select @备份文件 = Convert(char(8),getdate(),112) + replace(convert(char(6),getdate(),108),':','')
----
----
/*完整备份-参数设置*/
IF Convert(varchar,getdate(),24) between '03:00:00' and '04:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.26\Y$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	----每月1号的备份其后缀名改为 .ybf
----	IF ( DAY(getdate())=1 and MONTH(getdate())%2 = 1 )	----单月
----	IF ( DAY(getdate())=1 and MONTH(getdate())%2 = 0 )	----双月
        IF DAY(getdate())=1
		Begin
                Select @备份方式 =  @备份方式 +'【月备份】'
	        Select @备份路径 = '\\202.202.202.26\Y$\This_BackUp'
		Select @备份文件 = Replace(@备份文件,'.bak','.ybf')
		Select @保留时间 = '9600'
		End
	End
----
ELSE
IF Convert(varchar,getdate(),24) between '12:00:00' and '13:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.46\X$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	End
----
ELSE
IF Convert(varchar,getdate(),24) between '21:00:00' and '22:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.26\Z$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	End
ELSE
----
----
/*差异备份-参数设置（如需时间限制，可以参考上面的方法。）*/
	Begin
	 Select @备份方式 = '差异备份'
	Declare @备份路径1 varchar(100)	
	Declare @备份路径2 varchar(100)	
	 Select @备份路径1 = '\\202.202.202.32\C$\This_BackUp'
	 Select @备份路径2 = '\\202.202.202.33\C$\This_BackUp'
	 Select @备份文件  = @备份文件+'.dif'
	 Select @保留时间 = '1'
	End
----
----
Select  '★' + @备份方式 + '★' 
----
----
/*参数检查*/
----检查@数据库名
IF not exists ( Select 1 from master.dbo.sysdatabases where name=@数据库名) 
        Begin
        Select '错误:没有找到指定的数据库名，或者是当前实例区分大小写！'
        Return
        End
----提取上次备份的有效数据
	Declare @backup_set_id int		----备份操作的ID号
	Declare @backup_size   numeric		----备份文件大小，其结果/1024才能与电脑看到的一致[单位:KB]
	Declare @description   nvarchar(510)	----备份描述
	Declare @name	       nvarchar(256)	----备份名称，后面跟上'_KB'+当时备份时的库文件大小[单位:KB]
        Declare @backup_finish_date datetime    ----备份完成时间
        Declare @expiration_date datetime       ----备份过期时间
        ----初值设置
        Select @backup_size=1, @description='没有找到有效可用的备份文件', @name='无'
        ----按备份方式提供取最后一次数据
	 Select top 1 @backup_set_id = backup_set_id , @backup_size = isnull(backup_size/1024,1) , 
		      @description = [description] ,   @name = [name] , @backup_finish_date = backup_finish_date , @expiration_date = expiration_date
	  from msdb.dbo.backupset (NOLOCK)
	 where type = case when @备份方式 = '差异备份' then 'I' ELSE 'D' end
	   and database_name = @数据库名
           and expiration_date > getdate() ----有效数据
	 order by backup_set_id DESC
        ----显示中间数据
        IF @Is_Run = 0 
                Begin
                Print '上次备份的有效数据'
                Select @backup_set_id as 'ID号', @backup_size as '文件大小', @description as '描述', @name as '名称',
                       @backup_finish_date as '完成时间', @expiration_date as '过期时间'
                End
----处理@备份路径
IF @备份方式 = '差异备份'
	Begin
	----切换@备份路径
	Select @备份路径 = @备份路径2
	IF @description = @备份路径1+'\'+@数据库名 Select @备份路径 = @备份路径2 
	IF @description = @备份路径2+'\'+@数据库名 Select @备份路径 = @备份路径1
           else Print '【上次备份】' + @description 
	End
        Print '【本次备份】' + @备份路径 + '\' + @数据库名
----检查@备份路径
 Select @SQL = ' IF not exist ' + @备份路径 +'\'+@数据库名 + '\*.* md '+ @备份路径 +'\' +@数据库名 
   Exec @result = xp_cmdshell @SQL , NO_OUTPUT
	IF (@result = 1)
		Begin
		Print('错误:无法访问指定的备份路径 '+ @备份路径+' (原因：1、没有访问权限。2、目标磁盘不存在。) ' )
		Print( @SQL )
		Return
		End
----
----
Print  '【备份文件】' + @备份文件
----
----
/*备份前的准备工作*/
	---------------------------------------------------------------------------------------------
	----(10)获取@备份路径所在分区的剩余空间大小[已换成KB,近似值= 可用字节/1024*0.95 ]
	Select @SQL=' dir '+ @备份路径 + ' | find "可用字节" > "%temp%\Rulition" '
	  Exec xp_cmdshell @SQL , NO_OUTPUT
	  Exec xp_cmdshell ' for /f "tokens=3 delims= " %i in (%temp%\Rulition) do @echo %i > "%temp%\Rulition" ' , NO_OUTPUT
	Select @SQL=' for /f "tokens=1-9 delims=," %1 in (%temp%\Rulition) do @echo %1%2%3%4%5%6%7%8%9 '
	----将结果传入到表[必须充许空值插入，否则会出错！]
	Create Table #disk_space (free_sizes VarChar(100) NULL )
	Insert into  #disk_space Exec xp_cmdshell @SQL
	Delete from  #disk_space where free_sizes is null
	----提取结果
	Declare @disk_space numeric
	 Select @disk_space = Convert(numeric,free_sizes)/1024*0.95 from #disk_space
	   Drop table #disk_space
	---------------------------------------------------------------------------------------------	
	----(20)获取当前数据库大小(参考:sp_spaceused)[已换成KB,近似值= 统计结果/1024*0.95 ]
	Select @SQL = ' Declare @dbsize  bigint ' + CHAR(10) +
		      ' Declare @logsize bigint ' + CHAR(10) +
		      ' Declare @database_size bigint ' + CHAR(10) +
		' Select @dbsize  = sum(convert(bigint,case when status & 64 = 0 then size ELSE 0 end)) ,'+ CHAR(10) +
		'        @logsize = sum(convert(bigint,case when status & 64 <> 0 then size ELSE 0 end))' + CHAR(10) +
			' from ' + @数据库名 + '.dbo.sysfiles ' + CHAR(10) +
		' Select (convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize) ) * 8192 '
	----将结果传入到表
	Create Table #database_size (files_sizes dec(15,2) NULL )
	Insert into  #database_size Exec (@SQL)
	----提取结果
	Declare @database_size numeric
	 Select @database_size = Convert(numeric,files_sizes)/1024*0.95 from #database_size
	   Drop table #database_size
	---------------------------------------------------------------------------------------------
	----(25)一致性检查
	/*如果一致性检查在白天进行时要花费很长时间,可以设置为只在晚上处理。(具体情况详见操作结果日志)*/
	IF (@备份方式 = '完整备份' and (Convert(varchar,getdate(),24) between '03:00:00' and '04:00:00') )
        	Begin
                	/*
                	在数据库备份之前，应该进行数据的一致性检查：   
                	     1。运行检查点进程	checkpoint  [强制将当前数据库的所有脏页写到磁盘上。]
                	     2。检查数据库	dbcc checkdb   
                	     3。检查页面	dbcc checkalloc 
                	     4。检查系统表	dbcc checkcatalog   
                	然后再进行数据库备份。 
                	----
                	【DBCC CHECKDB】 是大量占用 CPU 和磁盘的操作。每一个需要检查的数据页都必须首先从磁盘读入内存。
                		另外，DBCC CHECKDB 使用 tempdb 排序。建议在服务器负荷较少的时候运行 DBCC CHECKDB。
                		如果在负荷高峰期运行 DBCC CHECKDB，那么事务吞吐量性能和 DBCC CHECKDB 完成时间性能都会受到影响。
                	----
                	【DBCC CHECKALLOC】 对数据库中的分配和页使用（包括索引视图）情况进行检查。
                		只用于向后兼容性的 NOINDEX 选项也适用于索引视图。
                		如果已经执行 DBCC CHECKDB，则不必执行 DBCC CHECKALLOC。
                		DBCC CHECKDB 是 DBCC CHECKALLOC 的超集，除了对索引结构和数据完整性进行检查之外，它还包括对分配进行检查。
                	*/
                	----★一致性检查[只保留检查的最终结果到日志文件，注意修改 isql.exe 使用的用户名和密码还有 isql.exe 所在的路径]★
                	Print '【一致性检查】'
                	Declare @CHECK VarChar(1000)
                	----
                	Print '1.运行检查点进程		(' + Convert(varchar,GetDate(),21) + ')'
                		IF (@Is_Run = 1) CHECKPOINT
                	----
                	Print '2.检查数据库		(' + Convert(varchar,GetDate(),21) + ')'
                	 	Select @CHECK = @ISQL+' -S '+ @@SERVERNAME + ' -d '+ @数据库名 + ' -U sa -P SERVER -Q "dbcc checkdb (' + @数据库名 + ') " -o "%temp%\check_db.log" -w 9999 & find "CHECKDB" "%temp%\check_db.log" '
                		IF (@Is_Run = 0) Print @CHECK 
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '3.检查页面		(' + Convert(varchar,GetDate(),21) + ')'
                	 	Select @CHECK = @ISQL+' -S '+@@SERVERNAME + ' -d '+ @数据库名 + ' -U sa -P SERVER -Q "dbcc checkalloc (' + @数据库名 + ') " -o "%temp%\check.log" -w 9999 & find "CHECKALLOC" "%temp%\check.log" '
                		IF (@Is_Run = 0) Print @CHECK
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '4.检查系统表		(' + Convert(varchar,GetDate(),21) + ')'
                		Select @CHECK = @ISQL+' -S ' + @@SERVERNAME + ' -d ' + @数据库名 + ' -U sa -P SERVER -Q "dbcc checkcatalog (' + @数据库名 + ')" '
                		IF (@Is_Run = 0) Print @CHECK
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '5.一致性检查已完成		(' + Convert(varchar,GetDate(),21) + ')'
        	End
	---------------------------------------------------------------------------------------------
	----(30)删除过期备份文件
	----   凡大于(@保留时间)24小时的都会被删除,注意扩展名!! 
	----   forfiles.exe 也要指定路径，否则无法执行这个操作.
	Declare @删除操作 nvarchar(4000)
	----
	Select  @删除操作 =' pushd ' + @备份路径 + '\' + @数据库名 + ' && ' +
			@FORFILES +' -M'+@数据库名+'_*.bak -c"cmd /c echo 删除 @FILE & del @FILE " -D-'+ @保留时间 + ' && ' +
			' popd '
	 Print '【删除文件】保留时间: ' + @保留时间 + ' 天'
	----处理差异备份 .dif
	IF @备份方式='差异备份' Select @删除操作=Replace(@删除操作,'_*.bak','_*.dif')
	----每月1号的备份其后缀名改为 .ybf
	  IF DAY(getdate())=1 Select @删除操作=Replace(@删除操作,'_*.bak','_*.ybf')
	----
	  IF (@Is_Run = 0) Print @删除操作
	  IF (@Is_Run = 1) Exec xp_cmdshell @删除操作
	---------------------------------------------------------------------------------------------
	----(40)备份可行性估算
	----  如果 [剩余空间] 不够存放 [预期备份]的大小，先删除过期备份文件，如果还不够用，则退出。
	----       [预期备份的大小] = [上次备份文件的大小] / [上次备份时数据库的大小] * [当前数据库的大小]
	----       SQL的备份策略是先备份后删除，事先也不判断一下，很浪费时间。
	----
	----[上次备份时数据库的大小]取自 msdb.dbo.backupset.name ,在生成备份语句时进行标记。
	----
	Declare @last_data_sizes numeric
	Declare @评估结果 varchar(8)
	----
	 Select @last_data_sizes = 1
	 Select @评估结果 = '通过'
	----如果上次备份时没有'_KB'标记，则默认为1。
	IF ( CharIndex('_KB',@name) = 0 )  Select @last_data_sizes = 1
	    ELSE
		Begin
		----如果仅有'_KB'标记，但没有数据，也默认为1。
		IF ( CharIndex('_KB',@name) + 3 ) > LEN(@name) Select @last_data_sizes = 1 
		----否则，提取'_KB'后的数据
		ELSE Select @last_data_sizes = Convert(numeric,SubString(@name,CharIndex('_KB',@name)+3,20))
		End
	----显示评估情况明细
	IF (@Is_Run = 0) 
		Begin
		Print '【评估情况】'
		Select @backup_set_id as   '上次备份的ID: '
		Select isnull(@backup_size,1) as '上次备份文件的大小(KB)' , isnull(@last_data_sizes,1) as '上次备份时数据库的大小(KB)' 
		Select @database_size as '当前数据库的大小(KB)' , @disk_space as '可用磁盘空间(KB)' 
		Print '【本次备份】' + @备份路径 + '\'+ @数据库名
		End
	----开始评估
	----检查[完整备份]的大小
        IF @备份方式='完整备份' 
        	/* 如果[上次备份文件的大小] = 1 , 则比较 [当前数据库的大小]*0.80 与 [可用磁盘空间]
        	   这里的 (*0.80) 是人个经验值,可以结合每次的【评估情况】大致算出来。*/
        Begin
        	IF @last_data_sizes = 1
        		Begin
        		IF @database_size * 0.80 > @disk_space 
        			Begin
        			Select @备份路径 + ' 可用磁盘空间不足，无法存入数据库备份文件，退出操作！' + CHAR(10) as '【错误提示1】'
                                Select @database_size * 0.80 as '@database_size * 0.80' , @disk_space as '@disk_space'
        			Return			
        			End
        		End
        	----[预期备份的大小] = [上次备份文件的大小] / [上次备份时数据库的大小] * [当前数据库的大小]
        	ELSE
        		Begin
        		IF ( @backup_size / @last_data_sizes ) * @database_size  > @disk_space 
        			Begin
        			Select @备份路径 + ' 可用磁盘空间不足，无法存入数据库备份文件，退出操作！' + CHAR(10) as '【错误提示2】'
                                Select ( @backup_size / @last_data_sizes ) * @database_size as '预期备份的大小', @disk_space as '磁盘空间'
        			Return			
        			End
        		End
        End
	----检查[差异备份]的大小
	IF(  @备份方式 = '差异备份' and ( @last_data_sizes <> 1 ) )
        	/*如果 [上次备份文件的大小] 相对 [当前数据库的大小] 超过 30% ,说明上次的完全备份失败了,与此同时，最近又没有做过完整备份,
        	  则必须再次进行完整备份,否则,数量过多的大体积差异备份文件会占用对应的磁盘空间,造成差异备份的失败。(v2.0提示并退出)
               	  这里的 (超过 30%) 是人个经验值,可以结合每次的【评估情况】大致算出来。*/
	Begin
        	IF (isnull(@backup_size,1) / @database_size > 0.3)
        	   IF NOT EXISTS (Select 1 from msdb.dbo.backupset where type = 'D' and backup_set_id > @backup_set_id and [name] like '%' + @数据库名 + '%' )
        		Begin
                		Print  '【有情提示】' +  '上次(差异备份)的文件偏大，有可能最近一次的完整备份失败！请手工运行【完整备份】进行补救。' 
                		Print  '【有情提示】' +  '如果多次出现这个问题，请检查相关所有操作或设置。' 
                		Select @评估结果 = '失败'
                                Return
        		End
	End
	----
	IF @评估结果 = '通过' Print '【评估通过，可以备份!】'
	---------------------------------------------------------------------------------------------
/*组织@备份语句*/
Select @备份语句=''
Select @备份语句='BACKUP DATABASE '+ @数据库名 + ' TO DISK = N''' + @备份路径+'\'+@数据库名+'\'+ @数据库名 + '_' +@备份文件 + 
		 ''' WITH RETAINDAYS = ' + @保留时间 + ', NOFORMAT, NOINIT, NAME = N''' + 
		 @数据库名 + '_' + @备份方式 + '_' + @备份文件 +'_KB' + Convert(varchar,@database_size) +
		 ''', SKIP, NOREWIND, NOUNLOAD, STATS = 100,'
		+ ' DESCRIPTION = '''+ @备份路径 + '\' + @数据库名 +'''' 
----
    IF @备份方式 = '差异备份' Select @备份语句 = @备份语句 + ' , DIFFERENTIAL '
----
/*显示@备份语句*/
Print '【备份语句】'
Print @备份语句
----
/*[差异备份]回避[完整备份]*/
IF exists(Select spid from  master.dbo.sysprocesses where db_name(dbid) = @数据库名
             and status = 'runnable' and cmd= 'BACKUP DATABASE')
	Begin
	 Print @数据库名 + ' 正在备份，跳过本次操作!'+ CHAR(10)
	 Return
	End
----
/*执行操作*/
IF (@Is_Run = 1) Exec (@备份语句)
----
Select GetDate() AS '【结束时间】'
----
/*
[参考资料1]
	----清理日志记录
	Select * from msdb.dbo.backupset
	Select * from msdb.dbo.restorehistory
	----
	删除备份和还原历史记录表中所有早于指定日期的备份集的条目。
	由于执行备份或还原操作后会在备份和还原历史记录表中添加一些行，
	因此使用 sp_delete_backuphistory 可以减小 msdb 数据库中历史记录表的大小。
	----
	Declare @dt datetime 
	 Select @dt = cast(N'01/01/2015 00:00:00' as datetime) 
	   exec msdb.dbo.sp_delete_backuphistory @dt

	----删除作业的历史记录
	EXEC msdb.dbo.sp_purge_jobhistory  @oldest_date='01/01/2015 00:00:00'
	EXEC msdb..sp_maintplan_delete_log null,null,'01/01/2015 00:00:00'


[参考资料2]

关于 SQL2005 远程备份

Rulition 10:19 2009-10-17

要实现 SQL 远程备份,必须处理好本机远程访问的问题：

第一、远程计算机与本机最好在同一网段内，如果跨了网段（或VLAN），需交换机路由支持，甚至修改本地路由表。

第二、为本机提供 SQL 服务的“用户名”和“密码”必须是[远程计算机]的[合法用户]，且能对[远程计算机]的[备份文件夹]进行[完全操作]。
      一般情况下，在安装 SQL 服务时使用的是系统帐户（多半是 administrator），如果刚好是远程计算机的合法用户，则处理起来就简单多了。
      否则，在进行远程备份时必须使用 xp_cmdshell 调用 MS-DOS 的 net use 命令，使用对方的[合法用户]进行登记，以操作[备份文件夹]。 
      
第三、至于[远程计算机]的[备份文件夹]，可以事先在[远程计算机]上将[备份文件夹]进行共享，并指定可完全访问的用户名。
      如果不想让无关的人看到这个[备份文件夹]，可在共享时将共享名后加上$，例如：备份文件夹$
      或者，在使用 net use 进行[合法用户]登记时，直接使用对方超级用户，这样可直接访问[备份文件夹]。
      例如：\\COMPUTER\E$\备份文件夹

      net use \\COMPUTER\E$\备份文件夹 /user:用户名 口令

      如果是空口令，可用""代替: /user:用户名 ""
*/
<span style="font-family:Arial;BACKGROUND-COLOR: #ffffff"></span>
 

版权声明：本文为博主原创文章，未经博主允许不得转载。

第八章 Linux磁盘管理
【查看磁盘或者目录的容量 df 和 du】df  查看已挂载磁盘的总容量、使用容量、剩余容量等，可以不加任何参数，默认是按k为单位显示的df常用参数有 –i  -h  -k  –m等-i  使用inodes 显示结果-h  使用合适的单位显示，例如G	-k  -m 分别为使用K，M为单位显示简单介绍一下，你看到的相关数据。Filesystem 表示扇区，也就是你划分磁盘时所分的区；1K-blocks/1M-blocks表示以1K/1M为单位；Used 和 Available 分别是已使用和剩余；Use% 就是已经使用的百分比，如果这个值大于90% 那么你就应该注意了，磁盘很有可能马上就会变满的；Mounted on 则表示该分区（扇区）所挂载的地方。du  用来查看某个目录所占空间大小语法：du [-abckmsh]  [文件或者目录名]  常用的参数有：-a：全部文件与目录大小都列出来。如果不加任何选项和参数只列出目录（包含子目录）大小。-b：列出的值以bytes为单位输出，默认是以Kbytes	-c：最后加总	-k：以KB为单位输出-m：以MB为单位输出-s：只列出总和-h：系统自动调节单位，例如文件太小可能就几K，那么就以K为单位显示，如果大到几G，则就以G为单位显示。笔者习惯用  du –sh  filename  这样的形式。【磁盘的分区和格式化】笔者经常做的事情就是拿一个全新的磁盘来分区并格式化。这也说明了作为一个linux系统管理员，对于磁盘的操作必须要熟练。所以请你认真学习该部分内容。fdisk  linux下的硬盘分区工具语法： fdisk  [-l ] [设备名称]-l ：后边不跟设备名会直接列出系统中所有的磁盘设备以及分区表，加上设备名会列出该设备的分区表。如果不加-l 则进入另一个模式，在该模式下，可以对磁盘进行分区操作。刚进入该模式下，会有一个提示Command (m for help): 此时按m则会打印出帮助列表，如果你英文好，我想你不难理解这些字母的功能。笔者常用的有p, n,d, w, q. 	P：打印当前磁盘的分区情况。n：重新建立一个新的分区。w：保存操作。q：退出。d：删除一个分区因为笔者的linux系统是安装在虚拟机上的，所以我可以增加一块新的磁盘。然后笔者会把新的磁盘分成多个分区。当再次fdisk -l 查看时发现多了一个/dev/hdb 设备，并提示该设备没有可用的分区表。那么下面就来分一下这个/dev/hdb.首先用p查看一下，并没有任何分区信息。用n创建一个新的分区，会提示要建立e （extended 扩展分区）或者p （primary partition主分区），这里笔者选择主分区，所以按了p回车后，又让输入First  cylinder 你或者直接回车或者输入一个数字，因为这块磁盘是新的并没有任何分区，所以直接回车其实就是从1开始了。你也可以自定义输入，但不要超过2080，笔者这里输入1回车。此时会提示要分多大，可以写一个数值（2-2080），也可以输入+sizeK或者+sizeM，后者比较直观容易理解，所以笔者在这里输入+100M，即我分了一个100M的主分区。再用p查看时，果真多出来一个分区。然后笔者继续重复前面的操作，建立了4个主分区。当笔者再次输入n创建分区时，结果提示错了。由此你会发现，在linux中最多只能创建4个主分区，那如果你想多创建几个分区如何做？很容易，在创建完第三个分区后，创建第四个分区时选择扩展分区。先删除第四个主分区，然后建立一个扩展分区在建立扩展分区时，会问你要分多少给这个扩展分区，笔者直接回车，即把所有空间都分给了这个扩展分区。这个扩展分区/dev/hdb4并不能往里写数据，它只是一个空壳子，需要我们继续在这个空壳中继续创建分区。当建立完扩展分区，然后按n创建新分区时你会发现不再提示是要建立p还是e了，因为我们已经不能再创建p了。在这里需要你明白的是，hdb5 其实只是 hdb4 中的一个子分区，到目前为止可用的分区也才4个，那笔者就再创建第5个分区出来。然后按w保存，该模式自动退出，如果你不想保存分区信息直接按q即可退出。下面我们把刚分好的分区删除，重新建立分区。如何删除你还记得吧，对了就是直接按d然后选择合适的数字。删除完所有分区后，这块磁盘就恢复如初了。第一个分区，我们就建立成扩展分区。并且分给它200M。当再次新建分区时，发生了变化，不再是p或者e了，而是p或者l（逻辑分区），这是为什么呢？在上面也提到了，一个扩展分区只是一个空壳，在扩展分区下才可以继续划分小的分区，这个小的分区其实就是逻辑分区了。而且这个逻辑分区默认都是从字数5开始的，因为前面的数字要么给主分区留着，要么给扩展分区留着。由此我们也可以得到，在linux中最多可以创建4个主分区，一旦创建4个主分区后就不能增加任何分区了。另外最多也只能创建一个扩展分区。扩展分区下的逻辑分区最多可以创建多少呢？IDE的硬盘（类似于hda, hdb, hdc 等）最多可以创建10个（hdb5-hdb15），这是笔者试验出来的结果。有的资料说linux下的逻辑分区是没有限制的，也有的说最大可以到64，至于对不对，需要你去近一步考察了，我们没有必要多么深入的研究这个问题，也没有什么意义。通过以上操作，相信你也学会了用fdisk 来分区了吧。值得提出的是，不要闲着没事分区玩儿，这操作的危险性是很高的，一不留神就把你服务器上的数据全部给分没有了。如果有分区的操作，那么请保持百分之二百的细心，切记切记！mkfs.ext2 / mkfs.ext3 /mke2fs 格式化linux硬盘分区当用man查询这三个命令的帮助文档时，你会发现我们看到了同一个帮助文档，这说明三个命令是一样的。常用的选项有：-b：分区时设定每个数据区块占用空间大小，目前支持1024, 2048 以及4096 bytes每个块。-i：设定inode大小-N：设定inode数量，有时使用默认的inode数不够用，所以要自定设定inode数量。-c：在格式化前先检测一下磁盘是否有问题，加上这个选项后会非常慢-L：预设该分区的标签label	-j：建立ext3格式的分区，如果使用mkfs.ext3 就不用加这个选项了不加任何选项，直接格式化/dev/hdb1 上例中更改了block size为4096 默认是1024，而inode大小设定为4096。下面的例子分区时自定义分区的label（标签）名。e2label  用来查看或者修改分区的标签（label）这个命令很简单，后边直接跟分区编号，即可查看该分区的label，当想要修改标签名时，分区编号后边跟想要的标签名即可。fsck 检查硬盘有没有坏道语法： fsck [-Aar] [分区]-A ：加该参数时，后不需要跟分区名作为参数。它会自动检查/etc/fstab 文件下的所有分区（开机过程中就会执行一次该操作）；-a ：自动修复检查到有问题的分区；-r ：当检查到有坏道的分区时会让用户决定是否修复。当你使用fsck检查磁盘有无坏道时，会提示用户“跑这个任务可能会导致某些挂载的文件系统损坏”，所以这个命令不要轻易运行。否则真的遇到问题，系统甚至都不能启动了。【挂载/卸载磁盘】在上面的内容中讲到了磁盘的分区和格式化，那么格式化完了后，如何去用它呢？这就涉及到了挂载这块磁盘。格式化后的磁盘其实是一个块设备文件，类型为b，也许你会想，既然这个块文件就是那个分区，那么直接在那个文件中写数据不就写到了那个分区中么？当然不行。在挂载某个分区前需要先建立一个挂载点，这个挂载点是以目录的形式出现的。一旦把某一个分区挂载到了这个挂载点（目录）下，那么再往这个目录写数据使，则都会写到该分区中。这就需要你注意一下，在挂载该分区前，挂载点（目录）下必须是个空目录。其实目录不为空并不影响所挂载分区的使用，但是一旦挂载上了，那么该目录下以前的东西就不能看到了。只有卸载掉该分区后才能看到。mount 挂载设备先建立/test1  /test2 目录，然后在/test1目录下建立一个1.txt文件。把/dev/hdb1分区挂载到/test1目录，然后再查看/test1目录发下，1.txt不存在了。此时往/test1目录下写数据，则会写到/dev/hdb1分区中。在讲mount的-a选项时，我们有必要先了解一下这个文件 /etc/fstab这个文件是系统启动时，需要挂载的各个分区。第一列就是分区的label；第二列是挂载点；第三列是分区的格式；第四列则是mount的一些挂载参数，等下会详细介绍一下有哪些参数，一般情况下，直接写defaults即可；第五列的数字表示是否被dump备份，是的话这里就是1，否则就是0；第六列是开机时是否自检磁盘，就是刚才讲过的那个fsck检测。1，2都表示检测，0表示不检测，在Redhat中，这个1，2还有个说法，/ 分区必须设为1，而且整个fstab中只允许出现一个1，这里有一个优先级的说法。1比2优先级高，所以先检测1，然后再检测2，如果有多个分区需要开机检测那么都设置成2吧，1检测完了后会同时去检测2。下面该说说第四列中常用到的参数了。async/sync ：async表示和磁盘和内存不同步，系统每隔一段时间把内存数据写入磁盘中，而sync则会时时同步内存和磁盘中数据；auto/noauto ：开机自动挂载/不自动挂载；default：按照大多数永久文件系统的缺省值设置挂载定义，它包含了rw, suid, dev, exec, auto, nouser,async  ；ro：按只读权限挂载 ；rw：按可读可写权限挂载 ；exec/noexec ：允许/不允许可执行文件执行，但千万不要把根分区挂载为noexec，那就无法使用系统了，连mount命令都无法使用了，这时只有重新做系统了；user/nouser ：允许/不允许root外的其他用户挂载分区，为了安全考虑，请用nouser ；suid/nosuid ：允许/不允许分区有suid属性，一般设置nosuid ；usrquota ：启动使用者磁盘配额模式，磁盘配额相关内容在后续章节会做介绍；grquota ：启动群组磁盘配额模式；学完这个/etc/fstab后，我们就可以自己修改这个文件，增加一行来挂载新增分区。例如，笔者增加了这样一行/dev/hdb1	/test1	ext3		defaults		0  0那么系统再重启时就会挂载这个分区了。讲完了/etc/fstab 我们继续回来讲这个mount，mout -a 如果运行了这个命令，则会把/etc/fstab中出现的所有磁盘分区挂载上。所以当你在/etc/fstab文件中增加一行后，你完全可以直接运行mount -a 来挂载你增加的那行，这样就不用重启啦。你可以使用mount -o 选项来重新挂载一个分区，并同时指定你想要的选项（即上边介绍fstab第六列中那些）看到了吧，使用了ro选项，则不能新建文件了。再重新挂载一次就恢复正常了，如果不加任何其他选项，则就是defaults。笔者在日常的运维工作中遇到过这样的情况，一台服务器上新装了亮块磁盘，磁盘a（在服务器上显示为sdc）和磁盘b（在服务器上显示为sdd），有一次把这两块磁盘都拔掉了，然后再重新插上，重启机器，结果磁盘编号调换了，a变成了sdd，b变成了sdc（这是因为把磁盘插错了插槽），问题来了。通过上边的学习，你挂载磁盘是通过/dev/hdb1 这样的分区名字来挂载的，如果先前加入到了/etc/fstab 中，结果系统启动后则会挂载错分区。那么怎么样避免这样的情况发生？blkid  这个命令是用来显示磁盘分区uuid的，uuid其实就是一大串字符，在linux系统中每一个分区都会有唯一的一个uuid。说到这，聪明的你想到了吧，没有错，我们就用这唯一的uuid来挂载磁盘分区。这个命令笔者只是用来显示uuid，没有其他用途所以不做详细介绍，当然你也可以在命令后边跟某一个分区，只显示该分区的uuid。看到了吧，其实是很好用的。那么怎么让它也开机启动？很简单，把刚才敲的mount 磁盘的命令直接写到 /etc/rc.d/rc.local 文件即可。对了，笔者到现在还没有给你讲过这个rc.local文件的作用。简单点说，系统启动完后会执行这个文件中的命令。所以只要你想开机后运行什么命令统统写入到这个文件下面吧。其实这个文件就是一个shell 脚本，以后笔者会单独用一章来介绍它。行开头的”#”是注释的意思，代表这行在这个脚本中不生效。你想让系统开机后运行什么命令，就把什么命令写到这里面来。就比如刚才笔者挂载的那条命令。你可以这样实现：mount 还有一个比较常用的选项就是-t ，后边指定文件系统的类型，比如挂载软盘时就需要指定 vfat，而挂载光盘时就需要指定iso9660，但在笔者多年来的经验，目前的系统都是智能识别所要挂载分区的系统格式类别的。也就是说，用不着你去指定，它会自动判断的。umount  卸载设备现在你学会了如何挂载一个设备，那么如何去卸载一个设备呢，这就要用到umount了，这个命令也简单的很，后边可以跟挂载点，也可以跟分区名(/dev/hdb1) 有时也许你会遇到比较难卸载的设备，就像在windows下无法删除U盘一样，教你一个特管用的方法就是  umount -l /dev/hdb1 ，这个-l选项有强制卸载的意思，你一定要记住哦，非常有用的。【建立一个swap文件】从装系统时就接触过这个swap了，前面也说过它类似与windows的虚拟内存，分区的时候一般大小为内存的2倍，如果你的内存超过4G，那么你分8G似乎是没有必要了。分4G足够日常交换了。然而，还会有虚拟内存不够用的情况发生。如果真遇到了，莫非还要重新分一下磁盘？当然不能！那我们就增加一个虚拟的磁盘出来。基本的思路就是：建立swapfile  格式化为swap格式  启用该虚拟磁盘利用dd 来创建一个419M的文件/tmp/newdisk出来，其中if代表从哪个文件读，/dev/zero是linux下特有的一个0生成器，of表示输出到哪个文件，bs即块大小，count则定义有多少个块。mkswap 这个命令是专门格式化swap格式的分区的，这个命令用的时候一定要看清楚了，否则把其他分区给格式化错了就只有哭了。free 是用来查看系统内存以及虚拟内存使用情况的，-m选项是以M的形式查看。可以看到当前系统的。而swapon 是启用我们新建的swap文件，启用后再用free查看发现多了400M。我们还可以用swapoff 关闭启用的swap文件。【磁盘配额】磁盘配合其实就是给每个用户分配一定的磁盘额度，只允许他使用这个额度范围内的磁盘空间。在linux系统中，是多用户多任务的环境，所以会有很多人共用一个磁盘的情况。针对每个用户去限定一定量的磁盘空间是有必要的，这样才显得公平。在linux中，用来管理磁盘配额的东西就是quota了。如果你的linux上没有quota，则需要你安装这个软件包 quota-3.13-5.el5.RPM （其实版本是多少无所谓了，关键是这个软件包）。quota在实际应用中是针对整个分区进行限制的。如果你的/dev/hda3 是挂载在/home 目录下的，那么/home 所有目录都会受到限制。quota 这个模块主要分为quota quotacheck quotaoff  quotaon quotastats edquota  setquota  warnquota repquota这几个命令，下面就分别介绍这些命令。quota 用来显示某个组或者某个使用者的限额。语法：quota  [-guvs]  [user,group]	-g ：显示某个组的限额-u ：显示某个用户的限额-v ：显示的意思-s ：选择inod或硬盘空间来显示 quotacheck 用来扫描某一个磁盘的quota空间。语法：quotacheck  [-auvg]  /path	-a ：扫描所有已经mount的具有quota支持的磁盘-u ：扫描某个使用者的文件以及目录-g ：扫描某个组的文件以及目录-v ：显示扫描过程-m ：强制进行扫描 edquota  用来编辑某个用户或者组的quota值。语法：edquota  [-u user]  [-g group] [-t]		  edquota  -p user  -u user	-u ：编辑某个用户的quota	-g ：编辑某个组的quota	-t ：编辑宽限时间-p ：拷贝某个用户或组的quta到另一个用户或组当运行edquota  -u user 时，系统会打开一个文件，你会看到这个文件中有7列，它们分别代表的含义是：Filesystem ：磁盘分区，如/dev/hda3	blocks ：当前用户在当前的Filesystem中所占用的磁盘容量，单位是Kb。该值请不要修改。soft/hard ：当前用户在该Filesystem内的quota值，soft指的是最低限额，可以超过这个值，但必须要在宽限时间内将磁盘容量降低到这个值以下。hard指的是最高限额，即不能超过这个值。当用户的磁盘使用量高于soft值时，系统会警告用户，提示其要在宽限时间内把使用空间降低到soft值之下。inodes ：目前使用掉的inode的状态，不用修改。quotaon 启动quta，在编辑好quota后，需要启动才能是quta生效语法：quotaon  [-a] [-uvg  directory]	-a ：全部设定的quota启动-u ：启动某个用户的quota	-g ：启动某个组的quota	-s ：显示相关信息 quotaoff 关闭quota该命令常用只有一种情况  quotaoff -a 关闭全部的quota以上讲了很多quota的相关命令，那么接下来笔者教你如何在实践应用中去做这个磁盘配额。整个执行过程如下：首先先确认一下，你的/home目录是不是单独的挂载在一个分区下，用df 查看即可。如果不是则需要你跟我一起做。否则这一步即可省略。笔者的linux系统中，/home并没有单独占用一个分区。所以需要把/home目录挂载在一个单独的分区下，因为quota是针对分区来限额的。笔者用fdisk -l 查看目前/dev/hdb 磁盘有5个可用分区，所以笔者打算把/dev/hdb1挂载在/home 目录下看到了吧，目前笔者的/home目录已经是一个单独的分区了。1）建立测试用户首先建立一个test用户，则同时建立了一个test组。可以在/etc/passwd中有以test为开头的行，其中uid和gid都为500 ，然后又建立一个test1账号，使其加入test组，查看/etc/passwd文件发现test和test1用户的gid都为500。（也许你对/etc/passwd文件、增加一个用户以及uid和gid等概念不熟悉，没有关系，在以后的章节中会做介绍，在这里只需要你明白即可）2）打开磁盘的quota功能默认linux并没有对任何分区做quota的支持，所以需要我们手动打开磁盘的quota功能，你是否记得，在前面内容中分析/etc/fstab文件的第四列时讲过这个quota选项（usrquota, grpquota）。没错，要想打开这个磁盘的quota支持就是需要修改这个第四列的。用vim编辑/etc/fstab 加入一行，如下图：vim命令将会在后续章节详细介绍，前面介绍过如何进入编辑模式以及如何保存文件。如果你的linux系统已经有/home这一行，那么直接修改第四列，加上usrquota,grpguota（中间没有空格）。接下来需要重新挂载/home。另外你也可以这样实现重新挂载/home如何查看是否启用了quota呢？只要查看/etc/mtab文件中/home所在那行是否有usrguota,grpquota即可。笔者的/dev/hdb1现在已经支持了quota	3）扫描磁盘的使用者使用状况，并产生重要的aquota.group与aquota.user这一步就需要用到quotacheck了，aquota.group与aqouta.user分别是组以及用户磁盘配额需要的配置文件。如果没有这两个文件，则磁盘配额是不会生效的。当首次使用quotacheck命令时，会提示“cannot stat old user quota file ……”其实这是在提示你在/home目录下没有aquota.user以及aquota.group两个文件。没有关系，因为以前并没有配置过磁盘配额，当然没有这两个文件了。当执行完quotacheck命令后，会在/home目录下生成这两个文件的。4）启动quota配额5）编辑用户磁盘配额先来设定test账户的配额，然后直接把test的配额拷贝给test1即可。这里就需要用到edquota了。讲上面内容修改为其中单位是Kb，所以soft 值大约为20Mb，hard值为30Mb，保存这个文件，保存的方式跟vim一个文件的方式一样的。将test的配额复制给test1。下面继续设定宽限时间。默认是7days 在这里我们改为1days。下面查看一下test以及test1用户的配额吧。6）编辑组磁盘配额设定组test的soft配额值为40M，hard值为50M。下面查看组test的配额。7）设定开机启动前面已经讲到启动磁盘配额的命令是quotaon -aug ，所以要想开机启动，只需将这条命令加入到 /etc/rc.d/rc.local文件即可。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

SHELL 脚本
终于到shell 脚本这章了，在以前笔者卖了好多关子说shell脚本怎么怎么重要，确实shell脚本在linux系统管理员的运维工作中非常非常重要。下面笔者就带你正式进入shell脚本的世界吧。到现在为止，你明白什么是shell脚本吗？如果明白最好了，不明白也没有关系，相信随着学习的深入你就会越来越了解到底什么是shell脚本。首先它是一个脚本，并不能作为正式的编程语言。因为是跑在linux的shell中，所以叫shell脚本。说白了，shell脚本就是一些命令的集合。举个例子，我想实现这样的操作：1）进入到/tmp/目录；2）列出当前目录中所有的文件名；3）把所有当前的文件拷贝到/root/目录下；4）删除当前目录下所有的文件。简单的4步在shell窗口中需要你敲4次命令，按4次回车。这样是不是很麻烦？当然这4步操作非常简单，如果是更加复杂的命令设置需要几十次操作呢？那样的话一次一次敲键盘会很麻烦。所以不妨把所有的操作都记录到一个文档中，然后去调用文档中的命令，这样一步操作就可以完成。其实这个文档呢就是shell脚本了，只是这个shell脚本有它特殊的格式。Shell脚本能帮助我们很方便的去管理服务器，因为我们可以指定一个任务计划定时去执行某一个shell脚本实现我们想要需求。这对于linux系统管理员来说是一件非常值得自豪的事情。现在的139邮箱很好用，发邮件的同时还可以发一条邮件通知的短信给用户，利用这点，我们就可以在我们的linux服务器上部署监控的shell脚本，比如网卡流量有异常了或者服务器web服务器停止了就可以发一封邮件给管理员，同时发送给管理员一个报警短信这样可以让我们及时的知道服务器出问题了。有一个问题需要约定一下，凡是自定义的脚本建议放到/usr/local/sbin/目录下，这样做的目的是，一来可以更好的管理文档；二来以后接管你的管理员都知道自定义脚本放在哪里，方便维护。【shell脚本的基本结构以及如何执行】Shell脚本通常都是以.sh 为后缀名的，这个并不是说不带.sh这个脚本就不能执行，只是大家的一个习惯而已。所以，以后你发现了.sh为后缀的文件那么它一定会是一个shell脚本了。test.sh中第一行一定是 “#! /bin/bash” 它代表的意思是，该文件使用的是bash语法。如果不设置该行，那么你的shell脚本就不能被执行。’#’表示注释，在前面讲过的。后面跟一些该脚本的相关注释内容以及作者和创建日期或者版本等等。当然这些注释并非必须的，如果你懒的很，可以省略掉，但是笔者不建议省略。因为随着你工作时间的增加，你写的shell脚本也会越来越多，如果有一天你回头查看你写的某个脚本时，很有可能忘记该脚本是用来干什么的以及什么时候写的。所以写上注释是有必要的。另外系统管理员并非你一个，如果是其他管理员查看你的脚本，他看不懂岂不是很郁闷。该脚本再往下面则为要运行的命令了。Shell脚本的执行很简单，直接”sh  filename “ 即可，另外你还可以这样执行默认我们用vim编辑的文档是不带有执行权限的，所以需要加一个执行权限，那样就可以直接使用’./filename’ 执行这个脚本了。另外使用sh命令去执行一个shell脚本的时候是可以加-x选项来查看这个脚本执行过程的，这样有利于我们调试这个脚本哪里出了问题。该shell脚本中用到了’date’这个命令，它的作用就是用来打印当前系统的时间。其实在shell脚本中date使用率非常高。有几个选项笔者常常在shell脚本中用到：%Y表示年，%m表示月，%d表示日期，%H表示小时，%M表示分钟，%S表示秒注意%y和%Y的区别。-d 选项也是经常要用到的，它可以打印n天前或者n天后的日期，当然也可以打印n个月/年前或者后的日期。 另外星期几也是常用的【shell脚本中的变量】在shell脚本中使用变量显得我们的脚本更加专业更像是一门语言，开个玩笑，变量的作用当然不是为了专业。如果你写了一个长达1000行的shell脚本，并且脚本中出现了某一个命令或者路径几百次。突然你觉得路径不对想换一下，那岂不是要更改几百次？你固然可以使用批量替换的命令，但是也是很麻烦，并且脚本显得臃肿了很多。变量的作用就是用来解决这个问题的。在test2.sh中使用到了反引号，你是否还记得它的作用？’d’和’d1’在脚本中作为变量出现，定义变量的格式为 “变量名=变量的值”。当在脚本中引用变量时需要加上’$’符号，这跟前面讲的在shell中自定义变量是一致的。下面看看脚本执行结果吧。下面我们用shell计算两个数的和。数学计算要用’[ ]’括起来并且外头要带一个’$’。脚本结果为：Shell脚本还可以和用户交互。这就用到了read命令了，它可以从标准输入获得变量的值，后跟变量名。”read  x”表示x变量的值需要用户通过键盘输入得到。脚本执行过程如下：我们不妨加上-x选项再来看看这个执行过程：在test4.sh中还有更加简洁的方式。read -p 选项类似echo的作用。执行如下：你有没有用过这样的命令”/etc/init.d/iptables restart “ 前面的/etc/init.d/iptables 文件其实就是一个shell脚本，为什么后面可以跟一个”restart”? 这里就涉及到了shell脚本的预设变量。实际上，shell脚本在执行的时候后边是可以跟变量的，而且还可以跟多个。不妨笔者写一个脚本，你就会明白了。执行过程如下：在脚本中，你会不会奇怪，哪里来的$1和$2，这其实就是shell脚本的预设变量，其中$1的值就是在执行的时候输入的1，而$2的值就是执行的时候输入的$2，当然一个shell脚本的预设变量是没有限制的，这回你明白了吧。另外还有一个$0，不过它代表的是脚本本身的名字。不妨把脚本修改一下。执行结果想必你也猜到了吧。【shell脚本中的逻辑判断】如果你学过C或者其他语言，相信你不会对if 陌生，在shell脚本中我们同样可以使用if逻辑判断。在shell中if判断的基本语法为：1）不带else	if  判断语句; then		command	fi在if1.sh中出现了 ((a<60))这样的形式，这是shell脚本中特有的格式，用一个小括号或者不用都会报错，请记住这个格式，即可。执行结果为：2）带有elseif  判断语句  ; then		commandelse 		commandfi执行结果为：3）带有elifif  判断语句一  ; then		commandelif  判断语句二; then 		command	else		commandfi这里的 && 表示“并且”的意思，当然你也可以使用 || 表示“或者”，执行结果：以上只是简单的介绍了if语句的结构。在判断数值大小除了可以用”(( ))”的形式外，还可以使用”[ ]”。但是就不能使用>, < , = 这样的符号了，要使用 -lt （小于），-gt （大于），-le （小于等于），-ge （大于等于），-eq （等于），-ne （不等于）。再看看if中使用 && 和 ||的情况。shell 脚本中if还经常判断关于档案属性，比如判断是普通文件还是目录，判断文件是否有读写执行权限等。常用的也就几个选项：-e ：判断文件或目录是否存在-d ：判断是不是目录，并是否存在-f ：判断是否是普通文件，并存在-r ：判断文档是否有读权限-w ：判断是否有写权限-x ：判断是否可执行使用if判断时，具体格式为： if [ -e filename ] ; then 在shell 脚本中，除了用if来判断逻辑外，还有一种常用的方式，那就是case了。具体格式为：case  变量  in	value1)		command		;;	value2)		command		;;	value3)		command		;;	*)		command		;;	esac上面的结构中，不限制value的个数，*则代表除了上面的value外的其他值。下面笔者写一个判断输入数值是奇数或者偶数的脚本。$a 的值或为1或为0，执行结果为：也可以看一下执行过程：case脚本常用于编写系统服务的启动脚本，例如/etc/init.d/iptables中就用到了，你不妨去查看一下。【shell脚本中的循环】Shell脚本中也算是一门简易的编程语言了，当然循环是不能缺少的。常用到的循环有for循环和while循环。下面就分别介绍一下两种循环的结构。脚本中的seq 1 5 表示从1到5的一个序列。你可以直接运行这个命令试下。脚本执行结果为：通过这个脚本就可以看到for循环的基本结构 ：for 变量名 in 循环的条件； do	commanddone循环的条件那一部分也可以写成这样的形式，中间用空格隔开即可。你也可以试试，for i in `ls`; do echo $i; done 和  for i in `cat test.txt`； do echo $i; done再来看看这个while循环，基本格式为：while  条件; do		command	done脚本的执行结果为：另外你可以把循环条件忽略掉，笔者常常这样写监控脚本。while :; do command done【shell脚本中的函数】如果你学过开发，肯定知道函数的作用。如果你是刚刚接触到这个概念的话，也没有关系，其实很好理解的。函数就是把一段代码整理到了一个小单元中，并给这个小单元起一个名字，当用到这段代码时直接调用这个小单元的名字即可。有时候脚本中的某段代总是重复使用，如果写成函数，每次用到时直接用函数名代替即可，这样就节省了时间还节省了空间。fun.sh 中的sum() 为自定义的函数，在shell脚本中要用 function 函数名() { command }这样的格式去定义函数。上个脚本执行过程如下：有一点笔者要提醒你一下，在shell脚本中，函数一定要写在最前面，不能出现在中间或者最后，因为函数是要被调用的，如果还没有出现就被调用，肯定是会出错的。Shell脚本大体上就介绍这么多了，笔者所举的例子都是最基础的，所以即使你把所有例子完全掌握也不代表你的shell脚本编写能力有多么好。所以剩下的日子里你尽量要多练习，多写脚本，你写的脚本越多，你的能力就越强。希望你能够找专门介绍shell脚本的书籍深入的去研究一下它。随后笔者将给你留几个shell脚本的练习题，你最好不要偷懒。1. 编写shell脚本，计算1-100的和；2. 编写shell脚本，要求输入一个数字，然后计算出从1到输入数字的和，要求，如果输入的数字小于1，则重新输入，直到输入正确的数字为止；3. 编写shell脚本，把/root/目录下的所有目录（只需要一级）拷贝到/tmp/目录下；4. 编写shell脚本，批量建立用户user_00, user_01, … ,user_100并且所有用户同属于users组；5. 编写shell脚本，截取文件test.log中包含关键词’abc’的行中的第一列（假设分隔符为”:”），然后把截取的数字排序（假设第一列为数字），然后打印出重复次数超过10次的列；6. 编写shell脚本，判断输入的IP是否正确（IP的规则是，n1.n2.n3.n4，其中1<n1<255, 0<n2<255, 0<n3<255, 0<n4<255）。以下为练习题答案：1. #! /bin/bashsum=0for i in `seq 1 100`; do        sum=$[$i+$sum]doneecho $sum2. #! /bin/bashn=0while [ $n -lt "1" ]; do        read -p "Please input a number, it must greater than "1":" ndone sum=0for i in `seq 1 $n`; do        sum=$[$i+$sum]doneecho $sum 3. #! /bin/bashfor f in `ls /root/`; do        if [ -d $f ] ; then                cp -r $f /tmp/        fidone 4. #! /bin/bashgroupadd usersfor i in `seq 0 9`; do        useradd -g users user_0$idone for j in `seq 10 100`; do        useradd -g users user_$jdone 5. #! /bin/bashawk -F':' '$0~/abc/ {print $1}' test.log >/tmp/n.txtsort -n n.txt |uniq -c |sort -n >/tmp/n2.txtawk '$1>10 {print $2}' /tmp/n2.txt 6. #! /bin/bashcheckip() {        if echo $1 |egrep -q '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' ; then                a=`echo $1 | awk -F. '{print $1}'`                b=`echo $1 | awk -F. '{print $2}'`                c=`echo $1 | awk -F. '{print $3}'`                d=`echo $1 | awk -F. '{print $4}'`                 for n in $a $b $c $d; do                        if [ $n -ge 255 ] || [ $n -le 0 ]; then                                echo "the number of the IP should less than 255 and greate than 0"                                return 2                        fi                done        else                echo "The IP you input is something wrong, the format is like 192.168.100.1"                return 1        fi} rs=1while [ $rs -gt 0 ]; doread -p  "Please input the ip:" ipcheckip $iprs=`echo $?`doneecho "The IP is right!"

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

SharePoint 2013 IT Professional——New Feature（Work Management Service）
众所周知，SharePoint企业管理平台对数据管理是非常有效的，一个公司对于一个项目而言，借助SharePoint的Task管理能很清晰的表现出项目在各个Team的进展情况，但是对于用户个人来说，管理Task就有点难度了，比如下面一个案例：
 
企业中每个部门都有一个WebSite进行数据管理，如下所示：
 
http://www.contoso.com/Sites/QA
http://www.contoso.com/Sites/Project
http://www.contoso.com/Sites/Package
 
每个Team可能都会给用户Shelley分配Task，那么对于Shelley来说管理和更新Task进展情况就比较有难度，希望能有个集中的List管理这些Task。
 
这个需求Make Sense，微软在SharePoint
 2013就实现了这个功能——Work Management Services。
 
具体实现步骤：
 

http://www.contoso.com/Sites/QA
这个站点下的SP Training这个List
下，Assign给Shelley一些培训相关的Task，如下所示：

 



 

http://www.contoso.com/sites/Project
这个站点下的Project Document这个List下，Assign给Shelley一些Project的Task，如下图所示：

 


 
 

将这些Site Collection所在的Web
 Application 与Work Management Service进行关联，如下图所示：

 



进入Shelley的My
 Site，点击Task，如下图所示：

 



 

 
 

就能在Shelley的My
 Site中看到来自哪个站点Assign to给自己的task以及状态了，如下图所示：

 


 
注意：WorkManagement Service的使用前提是有End
 user的My Site，所以要保证User Profile Service也是可用的，并且部署了EndUser的My
 Site 。

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ubuntu Win8双系统  Grub引导Win8
Win8的基础上添加Ubuntu，安装的过程中注意启动器选择为/boot所在的设备（然后在Window下用EasyBCD引导Ubuntu），太长时间没装双系统了，不留神启动器选成了Windows 8 loader，然后悲剧开始了：


无论如何不能引导启动Win8了，从PE引导硬盘启动可以引导成功，但从本地引导一直是黑屏和一个一直闪动的光标。
期间试着修复引导，修改坏道，重建MBR，BCD各种，还是，黑屏和一个左上角一直闪动的光标。。
各种修改grub.cfg，还是无果。。。


最终的解决方案是：直接让grub 引导 windows 的启动镜像 bootmgr


把grub.cfg (/boot/grub下) 关于win8 的地方改为下
menuentry 'Microsoft Windows 8 x64 '{
insmod ntfs
insmod ntldr
set root=(hd0,1) ##前提是你的win 8 安装在hd（0，1）盘下
search --set -f /bootmgr
ntldr /bootmgr

}
遂终

版权声明：本文为博主原创文章，未经博主允许不得转载。

配置ftp服务
第二十章配置ftp服务【什么是FTP】也许你对FTP不陌生，但是你是否了解FTP到底是个什么玩意？FTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。用户可以通过它把自己的PC机与世界各地所有运行FTP协议的服务器相连，访问服务器上的大量程序和信息。FTP的主要作用，就是让用户连接上一个远程计算机（这些计算机上运行着FTP服务器程序）察看远程计算机有哪些文件，然后把文件从远程计算机上拷到本地计算机，或把本地计算机的文件送到远程计算机去。FTP用的比NFS更多，所以你一定要熟练配置它。【配置ftp】安装Redhat/CentOS系统时也许你会连带着把ftp装上，系统默认带的ftp是vsftp，比较常用，配置也很简单。但笔者常使用的ftp软件为pure-ftpd。因为这个软件比vsftp配置起来更加灵活和安全。下面是笔者配置pure-ftpd的过程：下载最新的pure-ftp源码包pure-ftpd-1.0.21.tar.bz2   # wget http://syslab.comsenz.com/downloads/linux/pure-ftpd-1.0.21.tar.bz2#tar jxvf pure-ftpd-1.0.21.tar.bz2#cd pure-ftpd-1.0.21./configure \"--prefix=/usr/local/pureftpd" \"--without-inetd" \"--with-altlog" \"--with-puredb" \"--with-throttling" \"--with-largefile" \"--with-peruserlimits" \"--with-tls" \"--with-language=simplified-chinese"#make && make install启动用配置文件#mkdir /usr/local/pureftpd/etc#cd configuration-file#cp pure-ftpd.conf /usr/local/pureftpd/etc/pure-ftpd.conf#cp pure-config.pl  /usr/local/pureftpd/sbin/pure-config.pl#chmod 755 /usr/local/pureftpd/sbin/pure-config.pl在启动pure-ftp之前需要先修改配置文件，配置文件为/usr/local/pureftpd/etc/pure-ftpd.conf,你可以打开看一下，里面内容很多，如果你英文好，可以好好研究一番，下面是我的配置文件，如果你嫌麻烦，直接拷贝过去即可。____________________________________ChrootEveryone              yesBrokenClientsCompatibility  noMaxClientsNumber            50Daemonize                   yesMaxClientsPerIP             8VerboseLog                  noDisplayDotFiles             yesAnonymousOnly               noNoAnonymous                 noSyslogFacility              ftpDontResolve                 yesMaxIdleTime                 15PureDB                         /usr/local/pureftpd/etc/pureftpd.pdbLimitRecursion              2000 8AnonymousCanCreateDirs      noMaxLoad                     4AntiWarez                   yesUmask                        133:022MinUID                      100AllowUserFXP                noAllowAnonymousFXP           noProhibitDotFilesWrite       noProhibitDotFilesRead        noAutoRename                  noAnonymousCantUpload         noPIDFile                     /usr/local/pureftpd/var/run/pure-ftpd.pidMaxDiskUsage               99CustomerProof              yes####################################到此结束，保存即可#########################启动命令： /usr/local/pureftpd/sbin/pure-config.pl /usr/local/pureftpd/etc/pure-ftpd.conf#######接下来该建立用户了################ /usr/local/pureftpd/bin/pure-pw useradd ftp_test -u www -d /data/wwwroot其中，-u 将虚拟用户 ftp_test 与系统用户 www 关联在一起。-d 参数使 ftp_test 只能访问其主目录。执行完上述命令后，会提示输入密码。# /usr/local/pureftpd/bin/pure-pw mkdb另外提供一篇CentOS5.5下源码的安装vsftpd作为参考：CentOS 5.5编译安装vsftpd-2.3.4配置虚拟用户

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

LNMP环境搭建
第十七章 LNMP环境搭建和LAMP不同的是LNMP中的N指的是是Nginx（类似于Apache的一种web服务软件）其他都一样。目前这种环境应用的也是非常之多。Nginx设计的初衷是提供一种快速高效多并发的web服务软件。在静态页面的处理上Nginx的确胜Apache一筹，然而在动态页面的处理上Nginx并不比Apache有多少优势。但是，目前还是有很多爱好者对Nginx比较热衷，随着Nginx的技术逐渐成熟，它在web服务软件领域的地位越来越高。【MySQL安装】1. 下载mysql到/usr/local/src/ cd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz2. 解压tar zxvf /usr/local/src/ mysql-5.0.86-linux-i686-icc-glibc23.tar.gz3. 把解压完的数据移动到/usr/local/mysqlmv mysql-5.0.86-linux-i686-ii-glibc23 /usr/local/mysql4. 建立mysql用户useradd mysql5. 初始化数据库cd /usr/local/mysqlmkdir /data/mysql ; chown -R mysql:mysql /data/mysql./scripts/mysql_install_db --user=mysql --datadir=/data/mysql --user定义数据库的所属主，--datadir定义数据库安装到哪里，建议放到大空间的分区上，这个目录需要自行创建。6. 拷贝配置文件cp support-files/my-large.cnf /etc/my.cnf7. 拷贝启动脚本文件并修改其属性cp support-files/mysql.server  /etc/init.d/mysqldchmod 755 /etc/init.d/mysqld8. 修改启动脚本vim /etc/init.d/mysqld需要修改的地方有datadir=/data/mysql（前面初始化数据库时定义的目录）9. 把启动脚本加入系统服务项，并设定开机启动，启动mysqlchkconfig --add mysqldchkconfig mysqld onservice mysqld start如果启动不了，请到/data/mysql/ 下查看错误日志，该日志格式为主机名.err。【php的安装】这里要先声明一下，针对Nginx的php安装和针对apache的php安装是有区别的，因为Nginx中的php是以fastcgi的方式结合nginx的，可以理解为nginx代理了php的fastcgi，而apache是把php作为自己的模块来调用的。useradd wwwcd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/php-5.2.10.tar.gzwget http://syslab.comsenz.com/downloads/linux/php-5.2.10-fpm-0.5.13.diff.gz下载的第二个包php-5.2.10-fpm-0.5.13.diff.gz是用来给php打补丁的，默认情况下，php是无法编译出fastcgi的。tar zxvf php-5.2.10.tar.gzgzip -cd php-5.2.10-fpm-0.5.13.diff.gz | patch -d php-5.2.10 -p1cd php-5.2.10./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=/usr/local/mysql --with-mysql-sock=/tmp --with-libxml-dir --with-gd --with-jpeg-dir  --with-png-dir --with-freetype-dir --with-iconv-dir --with-zlib-dir  --with-mcrypt=/usr/local/libmcrypt --enable-soap --enable-gd-native-ttf  --enable-ftp --enable-mbstring --enable-exif --enable-zend-multibyte  --disable-ipv6 --enable-fastcgi --enable-fpmmake && make installmkdir /usr/local/php/etccp php.ini-dist /usr/local/php/etc/php.ini  vim /usr/local/php/etc/php-fpm.conf<value name="listen_address">/tmp/php-fcgi.sock</value> 这一行要改成这样，这里这样修改了以后，在配置nginx的时候就需要注意这个路径了。修改用户和组的名称为”www” 去掉注释，改成这样：Unix user of processes                         <value  name="user">www</value>                        Unix group of processes                         <value  name="group">www</value>/usr/local/php/sbin/php-fpm start其他关于php的扩展模块安装请参考：CentOS 5.5下安装mysql5.1.57+php5.2.17(FastCGI)+nginx1.0.1高性能Web服务器【nginx 安装以及配置】1. nginx源码安装cd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/nginx-0.9.6.tar.gztar zxvf nginx-0.9.6.tar.gzcd nginx-0.9.6./configure  --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/sbin/nginx  --conf-path=/usr/local/nginx/conf/nginx.conf  --error-log-path=/usr/local/nginx/logs/error.log  --http-log-path=/usr/local/nginx/logs/access.log  --pid-path=/usr/local/nginx/var/nginx.pid  --lock-path=/usr/local/nginx/var/nginx.lock  --http-client-body-temp-path=/dev/shm/nginx_temp/client_body  --http-proxy-temp-path=/dev/shm/nginx_temp/proxy  --http-fastcgi-temp-path=/dev/shm/nginx_temp/fastcgi --user=www  --group=www --with-cpu-opt=pentium4F --without-select_module  --without-poll_module --with-http_realip_module --with-http_sub_module  --with-http_gzip_static_module --with-http_stub_status_module  --without-http_ssi_module --without-http_userid_module  --without-http_geo_module --without-http_memcached_module  --without-http_map_module --without-mail_pop3_module  --without-mail_imap_module --without-mail_smtp_module --with-pcremake && make install mkdir /dev/shm/nginx_temp有的nginx版本编译时会因为pcre编译不过去，需要修改一下 --with-pcre=/usr/local/src/pcre-7.8，前提是已经下载了pcre源码包pcre-7.8.tar.gz，并解压到/usr/local/src/pcre-7.8，不需要编译pcre2. 编写nginx的启动脚本，并加入系统服务vi /etc/init.d/nginx 写入以下内容：#!/bin/bash# chkconfig: - 30 21# description: http service.# Source Function Library. /etc/init.d/functions# Nginx SettingsNGINX_SBIN="/usr/local/nginx/sbin/nginx"NGINX_CONF="/usr/local/nginx/conf/nginx.conf"NGINX_PID="/usr/local/nginx/var/nginx.pid"RETVAL=0prog="Nginx"start() {        echo -n $"Starting $prog: "        mkdir -p /dev/shm/nginx_temp        daemon $NGINX_SBIN -c $NGINX_CONF        RETVAL=$?        echo        return $RETVAL}stop() {        echo -n $"Stopping $prog: "        killproc -p $NGINX_PID $NGINX_SBIN -TERM        rm -rf /dev/shm/nginx_temp        RETVAL=$?        echo        return $RETVAL}reload(){        echo -n $"Reloading $prog: "        killproc -p $NGINX_PID $NGINX_SBIN -HUP        RETVAL=$?        echo        return $RETVAL}restart(){        stop        start}configtest(){    $NGINX_SBIN -c $NGINX_CONF -t    return 0}case "$1" in  start)        start        ;;  stop)        stop        ;;  reload)        reload        ;;  restart)        restart        ;;  configtest)        configtest        ;;  *)        echo $"Usage: $0 {start|stop|reload|restart|configtest}"        RETVAL=1esacexit $RETVAL保存后，更改/etc/init.d/nginx的权限chmod 755 /etc/init.d/nginxchkconfig --add nginxchkconfig nginx on3. nginx的配置vim /usr/local/nginx/conf/nginx.conf把原来的文件清空，然后粘贴如下内容：user www www;worker_processes 2;error_log /usr/local/nginx/logs/nginx_error.log crit;pid /usr/local/nginx/var/nginx.pid;#Specifies the value for maximum file descriptors that can be opened by this process.worker_rlimit_nofile 51200;events{use epoll;worker_connections 6000;}http{include mime.types;default_type application/octet-stream;server_names_hash_bucket_size 2048;server_names_hash_max_size 4096;log_format combined_realip '$remote_addr $http_x_forwarded_for [$time_local] ''$host "$request_uri" $status ''"$http_referer" "$http_user_agent"';sendfile on;tcp_nopush on;keepalive_timeout 30;client_header_timeout 3m;client_body_timeout 3m;send_timeout 3m;connection_pool_size 256;client_header_buffer_size 1k;large_client_header_buffers 8 4k;request_pool_size 4k;output_buffers 4 32k;postpone_output 1460;client_max_body_size 10m;client_body_buffer_size 256k;client_body_temp_path /usr/local/nginx/client_body_temp;proxy_temp_path /usr/local/nginx/proxy_temp;fastcgi_temp_path /usr/local/nginx/fastcgi_temp;fastcgi_intercept_errors on;tcp_nodelay on;gzip on;gzip_min_length 1k;gzip_buffers 4 8k;gzip_comp_level 5;gzip_http_version 1.1;gzip_types text/plain application/x-javascript text/css text/htm application/xml;server{listen 80;server_name www.example.com;index index.html index.htm index.php;root /data/www;location ~ \.php$ {include fastcgi_params;fastcgi_pass unix:/ php-fcgi.sock;fastcgi_index index.php;fastcgi_param SCRIPT_FILENAME /data/www$fastcgi_script_name;}}保存后就可以启动nginx了，在重启之前最好先检查一下是否有问题/usr/local/nginx/sbin/nginx  -t   如果显示 "syntax is ok  和  nginx.conf was tested  successfully"这样的信息，就说明配置没有问题了，否则就需要根据提示修改了。service nginx start 如果启动不了，请到/usr/local/nginx/logs/目录下查看nginx_error.log这个日志文件。若是没有这个日志文件，很有可能是那个目录没有写权限，请执行chmod +w /usr/local/nginx/logs/ service  nginx  restart 【测试是否解析php文件】vim /data/www/1.php 写入如下内容：<?phpphpinfo();?>然后设定hosts文件，访问 www.92csz.com/1.php 看是否能解析出这个页面。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

正则表达式
第十三章 正则表达式这部分内容可以说是学习shell脚本之前必学的内容。如果你这部分内容学的越好，那么你的shell脚本编写能力就会越强。所以不要嫌这部分内容啰嗦，也不要怕麻烦，要用心学习。一定要多加练习，练习多了就能熟练掌握了。在计算机科学中，正则表达式是这样解释的：它是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。对于系统管理员来讲，正则表达式贯穿在我们的日常运维工作中，无论是查找某个文档，抑或查询某个日志文件分析其内容，都会用到正则表达式。其实正则表达式，只是一种思想，一种表示方法。只要我们使用的工具支持表示这种思想那么这个工具就可以处理正则表达式的字符串。常用的工具有grep, sed, awk 等，下面笔者就介绍一下这三种工具的使用方法。【grep / egrep】笔者在前面的内容中多次提到并用到grep命令，可见它的重要性。所以好好学习一下这个重要的命令吧。你要知道的是grep连同下面讲的sed, awk都是针对文本的行才操作的。语法： grep  [-cinvABC]  ‘word’  filename -c ：打印符合要求的行数-i ：忽略大小写-n ：在输出符合要求的行的同时连同行号一起输出-v ：打印不符合要求的行-A ：后跟一个数字（有无空格都可以），例如 –A2则表示打印符合要求的行以及下面两行-B ：后跟一个数字，例如 –B2 则表示打印符合要求的行以及上面两行-C ：后跟一个数字，例如 –C2 则表示打印符合要求的行以及上下各两行以下，笔者举几个小例子帮助你好好掌握这个grep工具的用法。a. 过滤出带有某个关键词的行并输出行号b. 过滤不带有某个关键词的行，并输出行号c. 过滤出所有包含数字的行在前面也提到过这个”[ ]”的应用，如果是数字的话就用[0-9]这样的形式，当然有时候也可以用这样的形式[15]即只含有1或者5，注意，它不会认为是15。如果要过滤出数字以及大小写字母则要这样写[0-9a-zA-Z]。另外[ ]还有一种形式，就是[^字符] 表示除[ ]内的字符之外的字符。这就表示筛选包含oo字符串，但是不包含r字符。d. 过滤出文档中以某个字符开头或者以某个字符结尾的行在正则表达式中，”^”表示行的开始，”$”表示行的结尾，那么空行则表示”^$”,如果你只想筛选出非空行，则可以使用 “grep  -v  ‘^$’  filename”得到你想要的结果。现在想一下，如何打印出不以英文字母开头的行呢？e. 过滤任意一个字符与重复字符“.”表示任意一个字符，上例中，就是把符合r与o之间有两个任意字符的行过滤出来。“*”表示零个或多个前面的字符。‘ooo*’ 表示oo, ooo, oooo … 或者更多的’o’。现在你是否想到了’.*’ 这个组合表示什么意义？‘.*’表示零个或多个任意字符，空行也包含在内。f. 指定要过滤字符出现的次数这里用到了{ }，其内部为数字，表示前面的字符要重复的次数。上例中表示包含有两个o 即’oo’的行。注意，{ }左右都需要加上脱意字符’\’。另外，使用{ }我们还可以表示一个范围的，具体格式是 ‘\{n1,n2\}’其中n1<n2，表示重复n1到n2次前面的字符，n2还可以为空，则表示大于等于n1次。上面部分讲的grep，另外笔者常常用到egrep这个工具，简单点讲，后者是前者的扩展版本，我们可以用egrep完成grep不能完成的工作，当然了grep能完成的egrep完全可以完成。如果你嫌麻烦，egrep了解一下即可，因为grep的功能已经足够可以胜任你的日常工作了。下面笔者介绍egrep不用于grep的几个用法。为了试验方便，笔者把test.txt 编辑成如下内容：rot:x:0:0:/rot:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologinoperator:x:11:0:operator:/rooot:/sbin/nologinroooot:x:0:0:/rooooot:/bin/bash1111111111111111111111111111111aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. 筛选一个或一个以上前面的字符和grep 不同的是，egrep这里是使用’+’的。b. 筛选零个或一个前面的字符c. 筛选字符串1或者字符串2中间有一个’|’表示或者的意思，笔者用这个用的很多，所以这个你最好记一下。d.  egrep中’( )’的应用用’( )’表示一个整体，例如(oo)+就表示1个’oo’或者多个’oo’【sed 工具的使用】grep 工具的功能其实还不够强大，其实说白了，grep实现的只是查找功能，而它却不能实现把查找的内容替换掉。以前用vim的时候，可以查找也可以替换，但是只局限于在文本内部来操作，而不能输出到屏幕上。sed工具以及下面要讲的awk工具就能实现把替换的文本输出到屏幕上的功能了，而且还有其他更丰富的功能。sed和awk都是流式编辑器，是针对文档的行来操作的。a. 打印某行   sed -n ‘n’p filename 单引号内的n是一个数字，表示第几行b. 打印多行  打印整个文档用 -n ‘1,$’p  c. 打印包含某个字符串的行上面grep中使用的特殊字符，如’^’, ‘$’, ‘.’, ‘*’等同样也能在sed中使用。d. -e 可以实现多个行为e. 删除某行或者多行‘d’ 这个字符就是删除的动作了，不仅可以删除指定的单行以及多行，而且还可以删除匹配某个字符的行，另外还可以删除从某一行一直到文档末行。f. 替换字符或字符串上例中的’s’就是替换的命令，’g’为本行中全局替换，如果不加’g’，只换该行中出现的第一个。除了可以使用’/’外，还可以使用其他特殊字符例如’#’或者’@’都没有问题。现在思考一下，如何删除文档中的所有数字或者字母？有意思吧，[0-9]表示任意的数字。这里你也可以写成[a-zA-Z]甚至[0-9a-zA-Z]g. 调换两个字符串的位置这个就需要解释一下了，上例中用’()’把所想要替换的字符括起来成为一个整体，因为括号在sed中属于特殊符号，所以需要在前面加脱意字符’\’，替换时则写成’\1’, ‘\2’, ‘\3’ 的形式。除了调换两个字符串的位置外，笔者还常常用到在某一行前或者后增加指定内容。h. 直接修改文件的内容sed -i ‘s/:/#/g’  test.txt ，这样就可以直接更改test.txt文件中的内容了。由于这个命令可以直接把文件修改，所以在修改前最好先复制一下文件以免改错。sed常用到的也就上面这些了，只要你多加练习就能熟悉它了。为了能让你更加牢固的掌握sed的应用，笔者留几个练习题给你，希望你能认真完成。1. 把/etc/passwd 复制到/root/test.txt，用sed打印所有行；2. 打印test.txt的3到10行；3. 打印test.txt 中包含’root’的行；4. 删除test.txt 的15行以及以后所有行；5. 删除test.txt中包含’bash’的行；6. 替换test.txt 中’root’为’toor’；7. 替换test.txt中’/sbin/nologin’为’/bin/login’8. 删除test.txt中5到10行中所有的数字；9. 删除test.txt 中所有特殊字符（除了数字以及大小写字母）；10. 把test.txt中第一个单词和最后一个单词调换位置；11. 把test.txt中出现的第一个数字和最后一个单词替换位置；12. 把test.txt 中第一个数字移动到行末尾；13. 在test.txt  20行到末行最前面加’aaa:’；现在给出以上练习题的答案，你如果实在想不出如何操作，那你看看答案吧，请尽量多想一下。1.  /bin/cp /etc/passwd  /root/test.txt ;  sed -n '1,$'p test.txt2.  sed -n '3,10'p test.txt3.  sed -n '/root/'p test.txt4.  sed '15,$'d  test.txt5.  sed '/bash/'d test.txt6.  sed 's/root/toor/g' test.txt7.  sed 's#sbin/nologin#bin/login#g' test.txt8.  sed '5,10s/[0-9]//g' test.txt9.  sed 's/[^0-9a-zA-Z]//g' test.txt10.  sed 's/\(^[a-zA-Z][a-zA-Z]*\)\([^a-zA-Z].*\)\([^a-zA-Z]\)\([a-zA-Z][a-zA-Z]*$\)/\4\2\3\1/' test.txt11.  sed 's#\([^0-9][^0-9]*\)\([0-9][0-9]*\)\([^0-9].*\)\([^a-zA-Z]\)\([a-zA-Z][a-zA-Z]*$\)#\1\5\3\4\2#' test.txt12.  sed 's#\([^0-9][^0-9]*\)\([0-9][0-9]*\)\([^0-9].*$\)#\1\3\2#' test.txt13.  sed '20,$s/^.*$/aaa:&/' test.txt【awk工具的使用】上面也提到了awk和sed一样是流式编辑器，它也是针对文档中的行来操作的，一行一行的去执行。awk比sed更加强大，它能做到sed能做到的，同样也能做到sed不能做到的。awk工具其实是很复杂的，有专门的书籍来介绍它的应用，但是笔者认为学那么复杂没有必要，只要能处理日常管理工作中的问题即可。何必让自己的脑袋装那么东西来为难自己？毕竟用的也不多，即使现在教会了你很多，你也学会了，如果很久不用肯定就忘记了。鉴于此，笔者仅介绍比较常见的awk应用，如果你感兴趣的话，再去深入研究吧。a. 截取文档中的某个段解释一下，-F 选项的作用是指定分隔符，如果不加-F指定，则以空格或者tab为分隔符。Print为打印的动作，用来打印出某个字段。$1为第一个字段，$2为第二个字段，依次类推，有一个特殊的那就是$0，它表示整行。注意awk的格式，-F后紧跟单引号，然后里面为分隔符，print的动作要用’{ }’括起来，否则会报错。print还可以打印自定义的内容，但是自定义的内容要用双引号括起来。b. 匹配字符或字符串跟sed很类似吧，不过还有比sed更强大的匹配。可以让某个段去匹配，这里的’~’就是匹配的意思，继续往下看awk还可以多次匹配，如上例中匹配完root，再匹配test，它还可以只打印所匹配的段。不过这样没有啥意义，笔者只是为了说明awk确实比sed强大。d. 条件操作符awk中是可以用逻辑符号判断的，比如’==’就是等于，也可以理解为“精确匹配”。另外也有’>’, ‘>=’, ‘<’, ‘<=’, ‘!=’ 等等，值得注意的是，即使$3为数字，awk也不会把它当数字看待，它会认为是一个字符。所以不要妄图去拿$3当数字去和数字做比较。这样是得不到我们想要的效果的。这里只是字符与字符之间的比较，’6’是>’500’的。上例中用的是’!=’ 即不匹配。另外还可以使用”&&” 和 “||”表示“并且”和“或者”的意思。也可以是或者的关系d. awk的内置变量常用的变量有：NF ：用分隔符分隔后一共有多少段；NR ：行数上例中，打印总共的段数以及最后一段的值。可以使用NR作为条件，来打印出指定的行。e. awk中的数学运算awk比较强的地方，还在于能把某个段改成指定的字符串，下面还有更强的呢！当然还可以计算某个段的总和。这里的END要注意一下，表示所有的行都已经执行，这是awk特有的语法，其实awk连同sed都可以写成一个脚本文件，而且有他们特有的语法，在awk中使用if判断、for循环都是可以的，只是笔者认为日常管理工作中没有必要使用那么复杂的语句而已。注意这里’( )’的使用。基本上，正则表达的内容就这些了。但是笔者要提醒你一下，笔者介绍的这些仅仅是最基本的东西，并没有提啊深入的去讲sed和awk，但是完全可以满足日常工作的需要，有时候也许你会碰到比较复杂的需求，如果真遇到了就去请教一下google吧。下面出几道关于awk的练习题，希望你要认真完成。1. 用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）；2. 查找所有包含’bash’的行；3. 用’:’作为分隔符，查找第三段等于0的行；4. 用’:’作为分隔符，查找第一段为’root’的行，并把该段的’root’换成’toor’(可以连同sed一起使用)；5. 用’:’作为分隔符，打印最后一段；6. 打印行数大于20的所有行；7. 用’:’作为分隔符，打印所有第三段小于第四段的行；8. 用’:’作为分隔符，打印第一段以及最后一段，并且中间用’@’连接 （例如，第一行应该是这样的形式 “root@/bin/bash”；9. 用’:’作为分隔符，把整个文档的第四段相加，求和；下面给出答案：1. awk '{print $0}' test.txt2. awk '/bash/' test.txt3. awk -F':' '$3=="0"' test.txt4. awk -F':' '$1=="root"' test.txt |sed 's/root/toor/'5. awk -F':' '{print $NF}' test.txt6. awk -F':' 'NR>20' test.txt7. awk -F':' '$3<$4' test.txt8. awk -F':' '{print $1"@"$NF}' test.txt9. awk -F':' '{(sum+=$4)}; END {print sum}' test.txt

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

安装RPM包或者安装源码包
第十一章 安装RPM包或者安装源码包在windows下安装一个软件很轻松，只要双击.exe的文件，安装提示连续“下一步”即可，然而linux系统下安装一个软件似乎并不那么轻松了，因为我们不是在图形界面下。所以你要学会如何在linux下安装一个软件。在前面的内容中多次提到的yum，这个yum是Redhat所特有的安装RPM程序包的工具，使用起来相当方便。因为使用RPM安装某一个程序包有可能会因为该程序包依赖另一个程序包而无法安装。而使用yum工具就可以连同依赖的程序包一起安装。当然CentOS同样可以使用yum工具，而且在CentOS中你可以免费使用yum，但Redhat中只有当你付费后才能使用yum，默认是无法使用yum的。在介绍yum之前先说一说RPM相关的东西。【RPM工具】RPM是”Redhat  Package  Manager”的缩写，根据名字也能猜到这是Redhat公司开发出来的。RPM 是以一种数据库记录的方式来将你所需要的套件安装到你的Linux 主机的一套管理程序。也就是说，你的linux系统中存在着一个关于RPM的数据库，它记录了安装的包以及包与包之间依赖相关性。RPM包是预先在linux机器上编译好并打包好的文件，安装起来非常快捷。但是也有一些缺点，比如安装的环境必须与编译时的环境一致或者相当；包与包之间存在着相互依赖的情况；卸载包时需要先把依赖的包卸载掉，如果依赖的包是系统所必须的，那就不能卸载这个包，否则会造成系统崩溃。如果你的光驱中还有系统安装盘的话，你可以通过”mount /dev/cdrom /mnt”命令把光驱挂载到/mnt目录下，那么你会在/mnt/CentOS目录下看到很多.rpm的文件，这就是RPM包了。每一个rpm包的名称都由”-“和”.”分成了若干部分。就拿 a2ps-4.13b-57.2.el5.i386.rpm 这个包来解释一下，a2ps 为包名；4.13b则为版本信息；57.2.el5为发布版本号；i386为运行平台。其中运行平台常见的有i386, i586, i686, x86_64 ，需要你注意的是cpu目前是分32位和64位的，i386,i586和i686都为32位平台，x86_64则代表为64位的平台。另外有些rpm包并没有写具体的平台而是noarch，这代表这个rpm包没有硬件平台限制。例如 alacarte-0.10.0-1.fc6.noarch.rpm 。下面介绍一下rpm常用的命令。1）安装一个rpm包-i ：安装的意思-v ：可视化-h ：显示安装进度另外在安装一个rpm包时常用的附带参数有：--force 强制安装，即使覆盖属于其他包的文件也要安装--nodeps 当要安装的rpm包依赖其他包时，即使其他包没有安装，也要安装这个包2）升级一个rpm包rpm -Uvh  filename    -U ：即升级的意思3）卸载一个rpm包rpm -e  filename  这里的filename是通过rpm的查询功能所查询到的，稍后会作介绍。卸载时后边跟的filename和安装时的是有区别的。上面命令提到的 “|”在linux系统中用的非常多也非常有用，它是一个管道符，用来把前面运行的结果传递给后面的命令。以后会做详细介绍，而后出现的grep命令则是用来过滤某个关键词的工具，在后续章节中会做详细介绍。4）查询一个包是否安装rpm  -q  rpm包名（这里的包名，是不带有平台信息以及后缀名的）如果加上了平台信息以及后缀名反而不能查出来。你还可以查询当前系统中所安装的所有rpm包。因为太多，所以笔者列出前十个。5）得到一个rpm包的相关信息rpm  -qi  包名 （同样不需要加平台信息与后缀名）6）列出一个rpm包安装的文件rpm -ql  包名通过上面的命令可以看出vim是通过安装vim-enhanced-7.0.109-6.el5这个rpm包得来的。那么反过来如何通过一个文件去查找是由安装哪个rpm包得来的？7）列出某一个文件属于哪个rpm包rpm  -qf  文件的绝对路径前面讲过如何查找一个文件（可执行命令）的绝对路径所以你也可以把这两条命令连起来写看到了吗，which vim 这条命令是由两个反引号引起来的，这代表引用反引号里面的命令所产生的结果。关于rpm工具的使用还有很多内容，笔者就不一一列举了，只要你掌握上面这些内容，完全够你平时工作用的了。【yum工具】介绍完rpm工具后，还需要你掌握最常用的yum工具，这个工具比rpm工具好用多了，当然前提是你使用的linux系统是支持yum的。yum最大的优势在于可以联网去下载所需要的rpm包，然后自动安装，在这个工程中如果要安装的rpm包有依赖关系，yum会帮你解决掉这些依赖关系依次安装所有rpm包。下面笔者介绍常用的yum 命令。1） 列出所有可用的rpm包  “yum list “限于篇幅，笔者只列举出来前7个包信息。从上例中可以看到有”mirrors.163.com”信息出现，这是在告诉用户，它是从mirrors.163.com这里下载到的rpm包资源。如果你使用的是CentOS则你可以从/etc/yum.repos.d/CentOS-Base.repo这个文件下看到相关的配置信息。从上面的例子中你还可以看到最左侧是rpm包名字，中间是版本信息，最右侧是安装信息，如果安装了就显示installed，未安装则显示base或者extras，如果是该rpm包已安装但需要升级则显示updates。2）搜索一个rpm包  “yum search  [相关关键词]”除了这样搜索外，笔者常用的是利用grep来过滤相信你也会喜欢用后者吧，这样看起来简明的多。3）安装一个rpm包 “yum install  [-y]  [rpm包名]”如果不加-y选项，则会以与用户交互的方式安装，首先是列出需要安装的rpm包信息，然后会问用户是否需要安装，输入y则安装，输入n则不安装。而笔者嫌这样太麻烦，所以直接加上-y选项，这样就省略掉了问用户是否安装的那一步。4）卸载一个rpm包 “yum remove  [-y]  [rpm包名]”卸载和安装一样，你也可以直接加上-y选项来省略掉和用户交互的步骤。在这里笔者要提醒你一下，卸载某个rpm包一定要看清楚了，不要连其他重要的rpm包一起卸载了，以免影响正常的业务。4）升级一个rpm包 “yum  update [-y]  [rpm包]”以上介绍了如何使用yum搜索、安装、卸载以及升级一个rpm包，如果你掌握了这些那么你就已经可以解决日常工作中遇到的与rpm包相关问题了。当然yum工具还有好多其他好用的命令，笔者不在列举出来，如果你感兴趣就去man一下吧。除此之外，笔者还会教你一些关于yum的小应用。1  使用本地的光盘来制作一个yum源有时候你的linux系统不能联网，当然就不能很便捷的使用联网的yum源了，这时候就需要你自己会利用linux系统光盘制作一个yum源。具体步骤如下：a.挂载光盘[root@fortest Server]# mount -t iso9660 -o loop /dev/cdrom /mntb.删除/etc/yum.repos.d目录所有的repo文件[root@fortest Server]# rm -rf /etc/yum.repos.d/*c.创建新文件dvd.repo[root@fortest Server]# vim /etc/yum.repos.d/dvd.repo加入以下内容：[dvd]name=install dvdbaseurl=file:///mntenabled=1gpgcheck=0d.刷新repos,生成缓存[root@fortest Server]#yum makecache然后就可以使用yum命令安装你所需要的软件包了 2 利用yum工具下载一个rpm包有时，我们需要下载一个rpm包，只是下载下来，拷贝给其他机器使用，前面也介绍过yum安装rpm包的时候，首先得下载这个rpm包然后再去安装，所以使用yum完全可以做到只下载而不安装。a. 首选要安装 yum-downloadonly # yum install -y yum-downloadonly.noarchb. 下载一个rpm包而不安装# yum install test.rpm -y --downloadonly   //这样虽然下载了，但是并没有保存到我们想要的目录下，那么如何指定目录呢？c. 下载到指定目录# yum install test.rpm -y --downloadonly   --downloaddir=/usr/local/src 【安装源码包】其实，在linux下面安装一个源码包是最常用的，笔者在日常的管理工作中，大部分软件都是通过源码安装的。安装一个源码包，是需要我们自己把源代码编译成二进制的可执行文件。如果你读得懂这些源代码，那么你就可以去修改这些源代码自定义功能，然后再去编译成你想要的。使用源码包的好处除了可以自定义修改源代码外还可以定制相关的功能，因为源码包在编译的时候是可以附加额外的选项的。源码包的编译用到了linux系统里的编译器，常见的源码包一般都是用C语言开发的，这也是因为C语言为linux上最标准的程序语言。Linux上的C语言编译器叫做gcc，利用它就可以把C语言变成可执行的二进制文件。所以如果你的机器上没有安装gcc就没有办法去编译源码。你可以使用 yum install  -y  gcc 来完成安装。安装一个源码包，通常需要三个步骤：1.  ./config  在这一步可以定制功能，加上相应的选项即可，具有有什么选项可以通过”./config  --help ”命令来查看。在这一步会自动检测你的linux系统与相关的套件是否有编译该源码包时需要的库，因为一旦缺少某个库就不能完成编译。只有检测通过后才会生成一个Makefile文件。2.  make	  使用这个命令会根据Makefile文件中预设的参数进行编译，这一步其实就是gcc在工作了。3.  make install  安装步骤，生成相关的软件存放目录和配置文件的过程。上面介绍的3步并不是所有的源码包软件都一样的，笔者以前也曾经遇到过，安装步骤并不是这样，也就是说源码包的安装并非具有一定的标准安装步骤。这就需要你拿到源码包解压后，然后进入到目录找相关的帮助文档，通常会以INSTALL或者README为文件名。所以，你一定要去看一下。下面笔者会编译安装一个源码包来帮你更深刻的去理解如何安装源码包。1. 下载一个源码包这里要提一下，建议以后你把所有下载的源码包放到/usr/local/src/目录下，这个并不是必须的，只是一个约定。方便你和你的同事将来更好的去运维这台服务器。wget即为下载的命令，后边跟源码包的下载地址。该地址为笔者从网上找的一个apache的下载地址。2. 解压源码包一般的源码包都是一个压缩包，如何解压一个.tar.gz的包上一章讲过的。3. 配置相关的选项，并生成Makefile使用./config  --help 可以查看可用的选项。一般常用的有”--prefix=PREFIX “ 这个选项的意思是定义软件包安装到哪里。到这里，笔者再提一个小小的约定，通常源码包都是安装在/usr/local/目录下的。比如，我们把apache安装在/usr/local/apache2下，那么这里就应该这样写” --prefix=/usr/local/apache2”。其他还有好多选项，如果你有耐心你可以挨个去看一看都有什么作用。笔者在这里只定义了apache的安装目录，其他都是默认。回车后，开始执行check操作。等check结束后生成了Makefile文件除了查看有没有生成Makefile文件来判定有没有完成./config 的操作外，还可以通过这个命令”echo $?”来判定，如果是0，则表示上一步操作成功完成，否则就是没有成功。4.  进行编译这一步操作，就是把源代码编译成二进制的可执行文件，这一步也是最漫长的一步，编译时间的长短取决于源代码的多少和机器配置。5.  安装  在安装前，先确认上一步操作是否成功完成。make install 会创建相应的目录以及文件。当完成安装后，会在/usr/local目录下多了一个apache2目录，这就是apache所安装的目录了。其实在日常的源码安装工作中，并不是每个都像笔者这样顺利完成安装的，遇到错误不能完成安装的情况是很多的。通常都是因为缺少某一个库文件导致的。这就需要你仔细琢磨报错信息或者查看当前目录下的config.log去得到相关的信息。另外，如果自己不能解决那就去网上google一下吧，通常你会得到你想要的答案。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

OpenVAS漏洞扫描基础教程之OpenVAS概述及安装及配置OpenVAS服务


OpenVAS漏洞扫描基础教程之OpenVAS概述及安装及配置OpenVAS服务

OpenVAS基础知识

OpenVAS（Open Vulnerability Assessment System）是开放式漏洞评估系统，其核心部分是一个服务器。该服务器包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。OpenVAS不同与传统的漏洞扫描软件。所有的OpenVAS软件都是免费的，而且还采用了Nessus（一款强大的网络扫描工具）较早版本的一些开放插件。虽然Nessus很强大，但是该工具不开源，而且免费版的功能又比较局限。所以，本章将对OpenVAS工具进行详细介绍。

OpenVAS概述

OpenVAS是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。本节将对OpenVAS的概念及架构做一个简单介绍。

什么是OpenVAS

OpenVAS是一款开放式的漏洞评估工具，主要用来检测目标网络或主机的安全性。该工具是基于C/S（客户端/服务器），B/S（浏览器/服务器）架构进行工作，用户通过浏览器或者专用客户端程序来下达扫描任务，服务器端负载授权，执行扫描操作并提供扫描结果。

OpenVAS的架构

一套完整的OpenVAS系统包括服务器端和端口端的多个组件，如图1.1所示。




图1.1  OpenVAS的架构

上图就是OpenVAS系统的一个架构。下面分别介绍服务器层和客户层，分别所需安装的组件。如下所示：

1.服务器层组件（建议都安装）


q  openvas-scanner（扫描器）：负责调用各种漏洞检测插件，完成实际的扫描操作。

q  openvas-manager（管理器）：负责分配扫描任务，并根据扫描结果生产评估报告。

q  openvas-administrator（管理者）：负责管理配置信息，用户授权等相关工作。


2.客户层组件（任选其一即可）


q  openvas-cli（命令行接口）：负责提供从命令行访问OpenVAS服务层程序。

q  greenbone-security-assistant（安装助手）：负责提供访问OpenVAS服务层的Web接口，便于通过浏览器来建立扫描任务，是使用最简便的客户层组件。

q  Greenbone-Desktop-Suite（桌面套件）：负责提供访问OpenVAS服务层的图形程序界面，主要允许在Windows客户机中。


提示：OpenVAS服务器端仅支持安装Linux操作系统中。但是，客户端安装在Windows和Linux系统均可。

安装及配置OpenVAS服务

当对OpenVAS工具了解后，就可以来使用该工具了。在使用该工具之前，首先介绍下它的安装方法。

安装OpenVAS

OpenVAS工具的安装比较简单，而且在OpenVAS官网提供了在各种操作系统中的安装方法。其下载地址为http://www.openvas.org/install-packages.html。但是，如果用户在安装时，可能会出现很多依赖包需要手动解决。如果不能够很好的解决依赖关系包，将无法成功安装OpenVAS工具。所以，为了方便用户使用，Kali
 Linux系统中已经默认安装了该工具，用户可以直接使用。

如果用户发现自己系统中安装的OpenVAS不是最新版本的话，可以通过以下方法安装最新版的OpenVAS工具。具体方法如下所示：

（1）更新软件包列表。执行命令如下所示：


root@Kali:~# apt-get update


执行以上命令后，将会获取最近的软件包列表。

（2）获取到最新的软件包，。执行命令如下所示：


root@Kali:~# apt-get dist-upgrade


执行以上命令后，将会对有更新的包进行下载并安装。

（3）重新安装OpenVAS工具。执行命令如下所示：


root@Kali:~# apt-get install openvas


执行以上命令后，如果没有报错，则说明已成功安装OpenVAS工具。如果当前系统中已经安装了最新版的OpenVAS软件，将会显示以下类似信息：


正在读取软件包列表... 完成

正在分析软件包的依赖关系树      

正在读取状态信息... 完成 
     

openvas 已经是最新的版本了。


下列软件包是自动安装的并且现在不需要了：


  firmware-mod-kit libafpclient0 libhackrf liblzma-dev libmozjs22d libnet-daemon-perl libnfc3 libplrpc-perl

  libruby libtsk3-3 libwireshark2 libwiretap2 libwsutil2 openjdk-7-jre-lib python-apsw python-utidylib

  ruby-crack ruby-diff-lcs ruby-rspec ruby-rspec-core ruby-rspec-expectations ruby-rspec-mocks ruby-simplecov

  ruby-simplecov-html unrar-free xulrunner-22.0

Use 'apt-get autoremove' to remove them.

升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 20 个软件包未被升级。


从以上输出信息中，可以看到OpenVAS已经是最新版本了。

配置OpenVAS服务

OpenVAS工具安装成功后，还需要进行一些配置才可以使用。例如，初始化服务、同步插件及启动服务等。下面将介绍在Kali Linux中配置OpenVAS服务的方法。

【示例1-1】配置OpenVAS服务。具体操作步骤如下所示：

（1）下载并更新OpenVAS库。执行命令如下所示：


root@Kali:~# openvas-setup

/var/lib/openvas/private/CA created

/var/lib/openvas/CA created                                                             
 #创建证书

[i] This script synchronizes an NVT collection with the 'OpenVAS NVT Feed'.

[i] The 'OpenVAS NVT Feed' is provided by 'The OpenVAS Project'.

[i] Online information about this feed: 'http://www.openvas.org/openvas-nvt-feed.html'.

[i] NVT dir: /var/lib/openvas/plugins

[w] Could not determine feed version.

[i] rsync is not recommended for the initial sync. Falling back on http.

[i] Will use wget

[i] Using GNU wget: /usr/bin/wget

[i] Configured NVT http feed: http://www.openvas.org/openvas-nvt-feed-current.tar.bz2

[i] Downloading to: /tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2

--2015-07-28 09:53:24--  http://www.openvas.org/openvas-nvt-feed-current.tar.bz2

正在解析主机 www.openvas.org (www.openvas.org)...
 5.9.98.186

正在连接 www.openvas.org (www.openvas.org)|5.9.98.186|:80... 已连接。

已发出 HTTP 请求，正在等待回应...
 200 OK

长度：17065793 (16M) [application/x-bzip2]

正在保存至: “/tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2”

100%[======================================================================>] 17,065,793  
 337K/s 用时 34s    

2015-07-28 09:54:09 (484 KB/s) - 已保存 “/tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2” [17065793/17065793])

2008/

2008/deb_008_1.nasl                                                                       
 #同步NVT库

...... Please report synchronization problems to openvas-feed@intevation.de.

If you have any other questions, please use the OpenVAS mailing lists

or the OpenVAS IRC chat. See http://www.openvas.org/ for details.

receiving incremental file list

./

COPYING

        1493 100%    1.42MB/s    0:00:00 (xfer#1, to-check=63/65)

COPYING.asc

         198 100%  193.36kB/s    0:00:00 (xfer#2, to-check=62/65)

nvdcve-2.0-2002.xml

    19454677 100%  224.29kB/s    0:01:24 (xfer#3, to-check=61/65)

nvdcve-2.0-2002.xml.asc

         198 100%    0.44kB/s    0:00:00 (xfer#4, to-check=60/65)

nvdcve-2.0-2003.xml

     5691998 100%  266.11kB/s    0:00:20 (xfer#5, to-check=59/65)

nvdcve-2.0-2003.xml.asc

         198 100%    7.73kB/s    0:00:00 (xfer#6, to-check=58/65)

......

Country Name (2 letter code) [DE]:State or Province Name (full name) [Some-State]:Locality Name (eg, city) []:Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organizational Unit Name
 (eg, section) []:Common Name (eg, your name or your server's hostname) []:Email Address []:Using configuration from /tmp/openvas-mkcert-client.24593/stdC.cnf

Check that the request matches the signature

Signature ok

The Subject's Distinguished Name is as follows

countryName           :PRINTABLE:'DE'                                                             
 #国家名

localityName          :PRINTABLE:'Berlin'                                                           
 #本地名

commonName            :PRINTABLE:'om'                                                        
 #普通名

Certificate is to be certified until Jul 27 03:02:02 2016 GMT (365 days)

Write out database with 1 new entries

Data Base Updated

Stopping OpenVAS Manager: openvasmd.

Stopping OpenVAS Scanner: openvassd.

Starting OpenVAS Scanner: openvassd.

Starting OpenVAS Manager: openvasmd.

Restarting Greenbone Security Assistant: gsad.                                                      
 #OpenVAS服务已启动

User created with password '4b44aa5b-5535-4525-b1db-d87c9b5d81cd'.                #创建的用户密码


以上就是更新OpenVAS库的一个过程。从输出的信息中，可以看到在该过程中创建了证书、下载及更新了所有的扫描插件等。在该更新过程中，将会创建一个名为admin的用户，并且自动生成了一个密码。在本例中，生成的密码为4b44aa5b-5535-4525-b1db-d87c9b5d81cd。在该过程中输出的信息较多，由于篇幅的原因，中间部分内容使用省略号（......）取代了。由于此过程会下载大量的插件，所以该过程大概需要半个小时的时间。不过，再次进行同步时，时间就快了。

提示：在更新插件时主要是看用户的网速。如果网速好的话，可能不需要很长时间。但是，如果网速不好的话，需要的时间会很长，请用户耐心等待。而且，在该过程中用户不需要进行任何操作。

（2）在更新OpenVAS库时，自动为admin用户创建了一个密码。但是，该密码比较长，所以不容易记忆。为了方便用户记忆和输入，可以使用openvasmd命令修改该密码。其中，执行命令如下所示：


root@Kali:~# openvasmd --user=admin --new-password=123456


执行以上命令后，将不会输出任何信息。以上命令中，--user选项指定的是修改密码的用户为admin，--new-password选项指定将admin用户的密码修改为“123456”。

（3）为了确认OpenVAS是否安装完成，可以使用openvas-check-setup对该服务进行检查。如下所示：


root@Kali:~# openvas-check-setup

openvas-check-setup 2.3.0

  Test completeness and readiness of OpenVAS-8

  (add '--v6' or '--v7' or '--9'

   if you want to check for another OpenVAS version)

  Please report us any non-detected problems and

  help us to improve this check routine:

  http://lists.wald.intevation.org/mailman/listinfo/openvas-discuss

  Send us the log-file (/tmp/openvas-check-setup.log) to help analyze the problem.

  Use the parameter --server to skip checks for client tools

  like GSD and OpenVAS-CLI.

Step 1: Checking OpenVAS Scanner ...

        OK: OpenVAS Scanner is present in version 5.0.1.

        OK: OpenVAS Scanner CA Certificate is present as /var/lib/openvas/CA/cacert.pem.

        OK: OpenVAS Scanner server certificate is valid and present as /var/lib/openvas/CA/servercert.pem.

        OK: NVT collection in /var/lib/openvas/plugins contains 40087 NVTs.

        WARNING: Signature checking of NVTs is not enabled in OpenVAS Scanner.

        SUGGEST: Enable signature checking (see http://www.openvas.org/trusted-nvts.html).

        OK: The NVT cache in /var/cache/openvas contains 40087 files for 40087 NVTs.

        OK: redis-server is present in version 2.4.14.

        OK: scanner (kb_location setting) is configured properly using the redis-server socket: /var/lib/redis/redis.sock

        OK: redis-server is running and listening on socket: /var/lib/redis/redis.sock.

        OK: redis-server configuration is OK and redis-server is running.

Step 2: Checking OpenVAS Manager ...

        OK: OpenVAS Manager is present in version 6.0.1.

        OK: OpenVAS Manager client certificate is valid and present as /var/lib/openvas/CA/clientcert.pem.

        OK: OpenVAS Manager database found in /var/lib/openvas/mgr/tasks.db.

        OK: Access rights for the OpenVAS Manager database are correct.

        OK: At least one user exists.

        OK: sqlite3 found, extended checks of the OpenVAS Manager installation enabled.

        OK: OpenVAS Manager database is at revision 146.

        OK: OpenVAS Manager expects database at revision 146.

        OK: Database schema is up to date.

        OK: OpenVAS Manager database contains information about 40087 NVTs.

        OK: OpenVAS SCAP database found in /var/lib/openvas/scap-data/scap.db.

        OK: OpenVAS CERT database found in /var/lib/openvas/cert-data/cert.db.

        OK: xsltproc found.

Step 3: Checking user configuration ...

        WARNING: Your password policy is empty.

        SUGGEST: Edit the /etc/openvas/pwpolicy.conf file to set a password policy.

Step 4: Checking Greenbone Security Assistant (GSA) ...

        OK: Greenbone Security Assistant is present in version 6.0.1.

Step 5: Checking OpenVAS CLI ...

        OK: OpenVAS CLI version 1.4.0.

Step 6: Checking Greenbone Security Desktop (GSD) ...

        SKIP: Skipping check for Greenbone Security Desktop.

Step 7: Checking if OpenVAS services are up and running ...

        OK: netstat found, extended checks of the OpenVAS services enabled.

        OK: OpenVAS Scanner is running and listening only on the local interface.

        OK: OpenVAS Scanner is listening on port 9391, which is the default port.

        WARNING: OpenVAS Manager is running and listening only on the local interface.

        This means that you will not be able to access the OpenVAS Manager from the

        outside using GSD or OpenVAS CLI.

        SUGGEST: Ensure that OpenVAS Manager listens on all interfaces unless you want

        a local service only.

        OK: OpenVAS Manager is listening on port 9390, which is the default port.

        OK: Greenbone Security Assistant is listening on port 9392, which is the default port.

Step 8: Checking nmap installation ...

        WARNING: Your version of nmap is not fully supported: 6.47

        SUGGEST: You should install nmap 5.51 if you plan to use the nmap NSE NVTs.

Step 10: Checking presence of optional tools ...

        OK: pdflatex found.

        OK: PDF generation successful. The PDF report format is likely to work.

        OK: ssh-keygen found, LSC credential generation for GNU/Linux targets is likely to work.

        WARNING: Could not find rpm binary, LSC credential package generation for RPM and DEB based targets will not work.

        SUGGEST: Install rpm.

        WARNING: Could not find makensis binary, LSC credential package generation for Microsoft Windows targets will not work.

        SUGGEST: Install nsis.

It seems like your OpenVAS-8 installation is OK.

If you think it is not OK, please report your observation

and help us to improve this check routine:

http://lists.wald.intevation.org/mailman/listinfo/openvas-discuss

Please attach the log-file (/tmp/openvas-check-setup.log) to help us analyze the problem.


从以上输出信息中，可以看到以上过程进行了九步检查。检查完后，看到“It seems like your OpenVAS-7 installation is OK.”信息，则表示OpenVAS安装成功。接下来，用户就可以使用OpenVAS工具实施扫描了。

本文选自：OpenVAS漏洞扫描基础教程大学霸内部资料，转载请注明出处，尊重技术尊重IT人！




版权声明：本文为博主原创文章，未经博主允许不得转载。

SVN命令
svn从服务器导出项目：
以下命令会在执行命令的当前目录下自动生成projectFolderNameXXX的目录，里面的文件是svn://ip/folderName里导出的。
svn export svn://ip/folderName projectFolderNameXXX
还有以下写法：
svn export svn://ip:port/folderName projectFolderNameXXX
svn export http://ip:port/folderName projectFolderNameXXX
svn export https://ip:port/folderName projectFolderNameXXX
有时候，服务器的svn命令只能在sudo命令下执行，那么需要在svn命令前加上sudo：
sodu svn export svn://ip:port/folderName projectFolderNameXXX
其他svn命令： 
svn add values/strings.xml             //–添加
svn st   //–查看状态
svn ci   //–提交 svn ci -m “svn ci, permission”
1、 将文件checkout到本地目录
svn checkout   path（path是服务器上的目录） 
   例如：svn checkout svn: // 192.168 . 1.1 / pro / domain 
    简写：svn co 
2、 往版本库中添加新的文件
svn  add   file  
   例如：svn  add   test.php(添加test.php) 
   svn  add   * .php(添加当前目录下所有的php文件) 
3、 将改动的文件提交到版本库
svn commit   -m  ” LogMessage ”   [ -N ]   [ –no-unlock ]   PATH (如果选择了保持锁，就使用–no-unlock开关) 
   例如：svn commit -m  ” add test file for my test ”   test.php 
    简写：svn ci
4、 加锁/解锁
svn lock   -m  ” LockMessage ”   [ –force ]   PATH  
   例如：svn lock -m  ” lock test file ”   test.php 
svn unlock   PATH 
5、 更新到某个版本
svn update -r  m path 
   例如： 
      svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。 
     svn update -r  200   test.php(将版本库中的文件test.php还原到版本200) 
     svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件 ，然后清除svn resolved ，最后再提交commit) 
   简写：svn up 
6、 查看文件或者目录状态
1 ）svn status   path （目录下的文件和子目录的状态，正常状态不显示） 
   【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】 
   2 ）svn status -v   path (显示文件和子目录状态) 
   第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。 
   注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。 
简写：svn st 
7、 删除文件
svn delete   path -m  ” delete test fle ”  
   例如：svn delete svn:// 192.168.1.1 /pro/domain/test.php -m  ” delete test file ” 
    或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种 
简写：svn (del, remove, rm) 
8、 查看日志
svn log   path 
   例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化 
9、 查看文件详细信息
svn info   path 
   例如：svn info test.php 
10、 比较差异
svn diff   path(将修改的文件与基础版本比较) 
   例如：svn diff test.php 
svn diff   -r m:n path(对版本m和版本n比较差异) 
   例如：svn diff -r 200:201 test.php 
   简写：svn di 
11、 将两个版本之间的差异合并到当前文件
svn merge -r   m:n path 
   例如：svn merge -r  200 : 205   test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下） 
12、 SVN 帮助
svn help
svn help ci
以上是常用命令，下面写几个不经常用的
——————————————————————————  来
13、 版本库下的文件和目录列表
svn list  path 
   显示path目录下的所有属于版本库的文件和目录 
简写：svn ls 
14、 创建纳入版本控制下的新目录
svn mkdir : 创建纳入版本控制下的新目录。 
用法: 1、mkdir PATH… 
         2、mkdir URL… 
创建版本控制的目录。 
1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增 
     调度，以待下一次的提交。 
2、每个以URL指定的目录，都会透过立即提交于仓库中创建。 
在这两个情况下，所有的中间目录都必须事先存在。
15、 恢复本地修改
svn revert : 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert: 
用法: revert PATH… 
注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复 
        被删除的目录
16、 代码库URL变更
svn switch (sw):   更新工作副本至不同的URL。 
用法: 1、switch URL [PATH] 
        2、switch –relocate FROM TO [PATH…]
1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将 
     服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的 
     方法。 
2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动 
    (比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用 
    这个命令更新工作副本与仓库的对应关系。
17、 解决冲突
svn resolved:   移除工作副本的目录或文件的“冲突”状态。 
用法: resolved PATH… 
注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的 
        相关文件，然后让 PATH 可以再次提交。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：欢迎转载，转载请注明原地址，谢谢！

python 使用ioctl() 获得网卡IP 和MAC地址
自从使用了Python，便对其爱不释手。听说Python可以做任何你可以想到的事情，前些天看Linux网络的时候，看到了ioctl()这个函数的强大功能，linux下常用工具route和arp命令就是基于这个函数来完成的，只需要设定对应的option即可。那么，问题来了，python中有无类似功能的方法/函数呢，若我想获得某个接口的配置的IP和其MAC地址，使用C写的代码太多了，Python中的fcntl.ioctl()可以妥妥的完成这个任务。下面来点干货吧。

#! /usr/bin/env python

from fcntl import ioctl
import socket
import struct
import sys

sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
try:
    ip=ioctl(sock.fileno(),0x8915,struct.pack('64s','eth0'))
    ip=socket.inet_ntoa(ip[20:24])
    print ip
except:
    print sys.exc_info()

结果如下：

172.16.24.12


C语言的ioctl中使用的常量SIOCGIFADDR, 对应的值为0x8915,对应关系的定义文件在/usr/include/i386-linux-gnu/bits/ioctls.h
截个片段来看一下吧


* Socket configuration controls. */
#define SIOCGIFNAME 0x8910      /* get iface name       */
#define SIOCSIFLINK 0x8911      /* set iface channel        */
#define SIOCGIFCONF 0x8912      /* get iface list       */
#define SIOCGIFFLAGS    0x8913      /* get flags            */
#define SIOCSIFFLAGS    0x8914      /* set flags            */
#define SIOCGIFADDR 0x8915      /* get PA address       */
#define SIOCSIFADDR 0x8916      /* set PA address       */
#define SIOCGIFDSTADDR  0x8917      /* get remote PA address    */
#define SIOCSIFDSTADDR  0x8918      /* set remote PA address    */
#define SIOCGIFBRDADDR  0x8919      /* get broadcast PA address */
#define SIOCSIFBRDADDR  0x891a      /* set broadcast PA address */
#define SIOCGIFNETMASK  0x891b      /* get network PA mask      */
#define SIOCSIFNETMASK  0x891c      /* set network PA mask      */
#define SIOCGIFMETRIC   0x891d      /* get metric           */
#define SIOCSIFMETRIC   0x891e      /* set metric           */
#define SIOCGIFMEM  0x891f      /* get memory address (BSD) */
#define SIOCSIFMEM  0x8920      /* set memory address (BSD) */


若是想获得MAC地址，只需要把0x8915换成0x8927，后面的[20:24]换成[18:24]，就得到了16进制形式的MAC地址。









版权声明：本文为博主原创文章，未经博主允许不得转载。

学会使用简单的MySQL操作
第十八章 学会使用简单的MySQL操作在前面两个章节中已经介绍过MySQL的安装了，但是光会安装还不够，还需要会一些基本的相关操作。当然了，关于MySQL的内容也是非常多的，只不过对于linux系统管理员来讲，一些基本的操作已经可以应付日常的管理工作了，至于更高深的那是DBA（专门管理数据库的技术人员）的事情了。【更改mysql数据库root的密码】首次进入数据库是不用密码的/usr/local/mysql/bin/mysql -u rootWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.0.86 MySQL Community Server (GPL)Type 'help;' or '\h' for help. Type '\c' to clear the buffer.mysql>现在已经进入到了mysql 的操作界面了。退出的话，直接输入exit即可。mysql> exitBye先解释一下上面的命令的含义，-u 用来指定要登录的用户，root用户是mysql自带的管理员账户，默认没有密码的，那么如何给root用户设定密码？按如下操作：/usr/local/mysql/bin/mysqladmin -u root password ‘123456’这样就可以设定root用户的密码了。其中mysqladmin就是用来设置密码的工具，-u 指定用户，passwod 后跟要定义的密码，密码需要用单引号或者双引号括起来。另外你也许发现了，敲命令时总在前面加/usr/local/mysql/bin/ 这样很累。但是直接打mysql 又不能用，这是因为在系统变量$PATH中没有/usr/local/mysql/bin/这个目录，所以需要这样操作(如果你的linux可以直接打出mysql这个命令，则不要做这个操作)：vim /etc/profile在最后加入一行：export PATH=$PATH:/usr/local/mysql/bin/保存后运行source /etc/profile设定完密码后，再来运行最开始进入mysql数据库操作界面的命令：mysql -u rootERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)就报错了，这是因为root用户有密码。mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 5Server version: 5.0.86 MySQL Community Server (GPL)Type 'help;' or '\h' for help. Type '\c' to clear the buffer.mysql>需要加-p选项指定密码，这时就会提示你输入密码了。当设定密码后，如果要想更改密码如何操作呢？mysqladmin -u root -p password "123456789"Enter password:输入原来root的密码就可以更改密码了。【连接数据库】刚刚讲过通过使用mysql -u root -p 就可以连接数据库了，但这只是连接的本地的数据库’localhost’，然后有很多时候都是去连接网络中的某一个主机上的mysql。mysql -u user1 -p –P 3306 -h 10.0.2.69其中-P（大写）指定远程主机mysql的绑定端口，默认都是3306；-h指定远程主机的IP【一些基本的MySQL操作命令】1. 查询当前所有的库mysql> show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || test |+--------------------+2. 查询某个库的表mysql> use mysql;Database changedmysql> show tables;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db || func || help_category || help_keyword || help_relation || help_topic || host || proc || procs_priv || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+---------------------------+3. 查看某个表的字段mysql> desc func; //func 是表名+-------+------------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+------------------------------+------+-----+---------+-------+| name | char(64) | NO | PRI | | || ret | tinyint(1) | NO | | 0 | || dl | char(128) | NO | | | || type | enum('function','aggregate') | NO | | NULL | |+-------+------------------------------+------+-----+---------+-------+4. 查看某个表的表结构（创建表时的详细结构）mysql> show create table func;|Table | CreateTable | | func | CREATE TABLE `func` (`name` char(64) collate utf8_bin NOT NULL default '',`ret` tinyint(1) NOT NULL default '0',`dl` char(128) collate utf8_bin NOT NULL default '',`type` enum('function','aggregate') character set utf8 NOT NULL,PRIMARY KEY (`name`)) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions' |+-------+----------------------------------------------------------------------------------------------------------------------5. 查看当前是哪个用户mysql> select user();+----------------+| user() |+----------------+| root@localhost |+----------------+6. 查看当前所在数据库mysql> select database();+------------+| database() |+------------+| mysql |+------------+7. 创建一个新库mysql> create database db1;Query OK, 1 row affected (0.04 sec)8. 创建一个表mysql> create table t1 ( `id` int(4), `name` char(40));Query OK, 0 rows affected (0.02 sec)mysql> desc t1;+-------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| id | int(4) | YES | | NULL | || name | char(40) | YES | | NULL | |+-------+----------+------+-----+---------+-------+9. 查看当前数据库版本mysql> select version();+-----------+| version() |+-----------+| 5.0.86 |+-----------+10. 查看当前系统时间mysql> select current_date, current_time;+--------------+--------------+| current_date | current_time |+--------------+--------------+| 2011-05-31 | 08:52:50 |+--------------+--------------+11. 查看当前mysql的状态mysql> show status;+-----------------------------------+----------+| Variable_name | Value |+-----------------------------------+----------+| Aborted_clients | 0 || Aborted_connects | 1 || Binlog_cache_disk_use | 0 || Binlog_cache_use | 0 || Bytes_received | 664 || Bytes_sent | 6703 |这个命令打出很多东西，显示你的mysql状态。12. 查看mysql的参数mysql> show variables;很多参数都是可以在/etc/my.cnf中定义的。13. 创建一个普通用户并授权mysql> grant all on *.* to user1 identified by '123456';Query OK, 0 rows affected (0.01 sec)all 表示所有的权限（读、写、查询、删除等等操作），*.*前面的*表示所有的数据库，后面的*表示所有的表，identified by 后面跟密码，用单引号括起来。这里的user1指的是localhost上的user1，如果是给网络上的其他机器上的某个用户授权则这样：mysql> grant all on db1.* to 'user2'@'10.0.2.100' identified by '123456';Query OK, 0 rows affected (0.00 sec)用户和主机的IP之间有一个@，另外主机IP那里可以用%替代，表示所有主机。例如：mysql> grant all on db1.* to 'user3'@'%' identified by '123456';Query OK, 0 rows affected (0.00 sec)【一些常用的sql】1. 查询语句mysql> select count(*) from mysql.user;mysql.user表示mysql库的user表；count(*)表示表中共有多少行。mysql> select * from mysql.db;查询mysql库的db表中的所有数据mysql> select db from mysql.db;查询mysql库db表的db段。mysql> select * from mysql.db where host like '10.0.%';查询mysql库db表host字段like 10.0.% 的行，这里的%表示匹配所有，类似于前面介绍的通配符。2. 插入一行mysql> insert into db1.t1 values (1, 'abc');Query OK, 1 row affected (0.00 sec)t1表在前面已经创建过。mysql> select * from db1.t1;+------+------+| id | name |+------+------+| 1 | abc |+------+------+3. 更改某一行mysql> update db1.t1 set name='aaa' where id=1;Query OK, 1 row affected (0.02 sec)Rows matched: 1 Changed: 1 Warnings: 0这样就把原来id为1的那行中的name改成’aaa’4. 删除表mysql> drop table db1.t1;Query OK, 0 rows affected (0.01 sec)5. 删除数据库mysql> drop database db1;Query OK, 0 rows affected (0.07 sec)6. 备份与恢复库mysqldump -uroot -p mysql >mysql.sql这里的mysqldump 就是备份的工具了，-p后面的mysql指的是mysql库,把备份的文件重定向到mysql.sql。如果恢复的话，只要：mysql -uroot -p mysql < mysql.sql 关于MySQL的基本操作笔者就介绍这么多，当然学会了这些还远远不够，希望你能够在你的工作中学习到更多的知识，如果你对MySQL有很大兴趣，不妨深入研究一下，毕竟多学点总没有坏处。如果想学跟多的东西请去查看MySQL官方中文参考手册（5.1）。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

NFS服务配置
第十九章 NFS服务配置【什么是NFS】     NFS会经常用到，用于在网络上共享存储。这样讲，你对NFS可能不太了解，笔者不妨举一个例子来说明一下NFS是用来做什么的。假如有三台机器A、B、C，它们需要访问同一个目录，目录中都是图片，传统的做法是把这些图片分别放到A、B、C。但是使用NFS只需要放到A上，然后A共享给B和C即可。访问的时候，B和C是通过网络的方式去访问A上的那个目录的。【配置NFS】         NFS配置起来还是蛮简单的，只需要编辑配置文件/etc/exports即可。下面笔者先创建一个简单的NFS服务器。[root@localhost ~]# cat /etc/exports/home/  10.0.2.0/24(rw,sync,all_squash,anonuid=501,anongid=501)这个配置文件就这样简单一行。共分为三部分，第一部分就是本地要共享出去的目录，第二部分为允许访问的主机（可以是一个IP也可以是一个IP段）第三部分就是小括号里面的，为一些权限选项。关于第三部分，笔者简单介绍一下：rw ：读写；ro ：只读；sync ：同步模式，内存中数据时时写入磁盘；async ：不同步，把内存中数据定期写入磁盘中；no_root_squash ：加上这个选项后，root用户就会对共享的目录拥有至高的权限控制，就像是对本机的目录操作一样。不安全，不建议使用；root_squash ：和上面的选项对应，root用户对共享目录的权限不高，只有普通用户的权限，即限制了root；all_squash ：不管使用NFS的用户是谁，他的身份都会被限定成为一个指定的普通用户身份；anonuid/anongid ：要和root_squash 以及 all_squash一同使用，用于指定使用NFS的用户限定后的uid和gid，前提是本机的/etc/passwd中存在这个uid和gid。介绍了上面的相关的权限选项后，再来分析一下笔者刚刚配置的那个/etc/exports文件。其中要共享的目录为/home，信任的主机为10.0.2.0/24这个网段，权限为读写，同步，限定所有使用者，并且限定的uid和gid都为501。【使用NFS】         当编辑完配置文件/etc/exports后，就该启动NFS服务了。启动方法为：[root@localhost ~]# service portmap start; service nfs startNFS是依托portmap的，所以首先要启动portmap，然后启动NFS才能是刚才的配置生效。启动完NFS后，就该使用NFS服务了。[root@localhost ~]# showmount -e 127.0.0.1 （用在client上）Export list for 127.0.0.1:/home 10.0.2.0/24用shoumount -e 加IP就可以查看NFS的共享情况，上例中，就可以看到127.0.0.1的共享目录为/home，信任主机为10.0.2.0/24这个网段。另外这个showmount 命令还有一个常用的选项就是-a了，它的意思是，把连接本机的NFS的client全部列出。[root@localhost ~]# mount -t nfs 10.0.2.69:/home /mnt （client上）[root@localhost ~]# showmount -a （nfs服务器上）All mount points on localhost:10.0.2.69:/home前面的mount 命令为挂载NFS共享目录，相信你能看懂这个格式。showmount -a 命令列出所有的clinet。NFS服务中还有一个常用的命令那就是exportfs，它的常用选项为[-aruv]。-a ：全部挂载或者卸载；-r ：重新挂载；-u ：卸载某一个目录；-v ：显示共享的目录；使用exportfs命令，当改变/etc/exports配置文件后，不用重启nfs服务直接用这个exportfs即可。[root@localhost ~]# cat /etc/exports/tmp/   10.0.2.0/24(rw,sync,no_root_squash)[root@localhost ~]# exportfs -arv （nfs服务器上）exporting 10.0.2.0/24:/tmp更改目录后，直接exportfs -arv即可生效。在上面使用到了mount命令来挂载nfs，其实mount这个nfs服务还是有些说法的。首先是用-t nfs 来指定挂载的类型为nfs。另外在使用nfs时，常用一个选项就是nolock了，即在挂载nfs服务时，不加锁。[root@localhost ~]# mount -t nfs -o nolock 10.0.2.69:/tmp /mnt/[root@localhost ~]# showmount -aAll mount points on localhost:10.0.2.69:/home10.0.2.69:/tmp另外我们还可以把要挂载的nfs目录写到client上的/etc/fstab文件中，挂载时只需要mount -a即可。[root@localhost ~]# cat /etc/fstabLABEL=/                 /                        ext3    defaults        1 1LABEL=/boot             /boot                   ext3    defaults        1 2tmpfs                   /dev/shm                tmpfs   defaults        0 0devpts                  /dev/pts                devpts  gid=5,mode=620  0 0sysfs                   /sys                    sysfs   defaults        0 0proc                    /proc                   proc    defaults        0 0LABEL=SWAP-hda2         swap                    swap    defaults        0 010.0.2.69:/tmp          /mnt                    nfs     nolock          0 0 写完/etc/fstab文件后，只需要mount -a即可挂载nfs服务的共享目录。[root@localhost ~]# umount /mnt/ 首先把刚才挂载的nfs卸载掉[root@localhost ~]# mount -a[root@localhost ~]# df -hFilesystem            Size  Used Avail Use% Mounted on/dev/hda3             7.3G  3.7G  3.3G  53% //dev/hda1              99M   12M   83M  12% /boottmpfs                  84M     0   84M   0% /dev/shm10.0.2.69:/tmp        7.3G  3.7G  3.3G  53% /mnt关于NFS部分就讲这么多，内容并不多，相信你很快就能掌握！

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

在RHEL6中配置YUM源
1 创建rhel-debuginfo.repo，如果有则先备份再删除
 cd  /etc/yum.repos.d
 rm  rhel-debuginfo.repo
 vi  rhel-debuginfo.repo 
插入以下内容：
 [Server] 
 name=Red Hat Enterprise Linux Server 
 baseurl=file:///home/redhat-iso  #本地iso的挂载路径
 enabled=1       #可以使用yum
 gpgcheck=0      #设置不检查gpgkey 
 gpgkey=file:///home/redhat-iso/RPM-GPG-KEY-RedHat-release    

2 修改yumRepo.py配置文件
cd /usr/lib/python2.6/site-packages/yum/
vi yumRepo.py
找到  remote = url + ‘/’ + relative  #802行 
改为  remote = "/home/redhat-iso" + '/' + relative
3 挂载iso文件
  mkdir /home/redhat-iso
  mount /dev/cdrom /mnt/cdrom
或者：
mount -o loop /home/Soft/rhel-server-6.3-x86_64-dvd.iso /mnt/cdrom
4 拷贝数据
cp /mnt/redhat-iso/* /home/redhat-iso
5 清除yum缓存：
yum clean all
6 测试安装ftp 默认没有安装
 yum list | grep vsftpd
[附-1]ubuntu设置本地软件安装源【DVD版】
(1) 转到镜像的下载目录，挂载ISO镜像挂载至 /media/cdrom 下:

> sudo mount -o loop -t iso9660 update-i386-20080312-CD1.iso /media/cdrom
(2) 手动添加ISO镜像至软件源列表，这样就可以在软件库里找到ISO上所有的软件包:
> sudo apt-cdrom -m -d=/media/cdrom add
(3) 刷新软件库:
> sudo apt-get update
注意，执行完成后查看 /etc/apt/sources.list 文件，确保文件如下一行在文件顶部或者在网络源前面， 
否者，安装软件的时候系统还是优先从网络上下载;

【建议把除了dvd本地源之外的下面所有项注释掉，不建议删除，之后在apt-get update更新下】

deb cdrom:[Ubuntu 9.04 _Jaunty Jackalope_ - Release i386 (20090421.3)]/ 
jaunty main restricted
之后就可以用 apt-get install ** 来安装软件包了， 
不过有点问题，这命令执行一次可能会不成功，多执行几次就OK了.
[附-2]Centos使用第三方软件源RepoForge
RepoForge源可以做为Centos官方源及EPEL源的补充，这样Centos下常用软件基本都可使用yum安装了。 
Centos5：
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.i386.rpm
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm
Centos6:
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm
rpm -ivh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
国内使用sohu提供的镜像：
cat > /etc/yum.repos.d/mirrors-rpmforge <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/rpmforge
EOF
cat > /etc/yum.repos.d/mirrors-rpmforge-extras <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/extras
EOF
cat > /etc/yum.repos.d/mirrors-rpmforge-testing <<EOF
http://mirrors.sohu.com/dag/redhat/el6/en/$ARCH/testing
EOF
Repoforge ，以 RPMforge为人所熟知。它是专门为 Red Hat Enterprise Linux (RHEL)， CentOS和科学Linux系统提供库包。如果你是这个类型的OS用户，可以添加其提高的源。安装如下： 
对于64-bit CentOS 6.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
对于For 32-bit CentOS 5.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.i386.rpm
对于64-bit CentOS 5.*系统：
$ sudo rpm -Uvhhttp://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm
一旦RPMforge源安装成功，你可以使用过yum命令去安装其有的库包。
[附-3] Ali-OSM : Alibaba Open Source Mirror Site
cd  /etc/yum.repos.d/
mv CentOS-Base.repo CentOS-Base.repo.back
wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-６.repo
[附-4] [Webstatic Yum Repository]
Installation
To set up the repository, install the webtatic-release RPM:
Webtatic EL7 for CentOS/RHEL 7:
rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
Webtatic EL6 for CentOS/RHEL 6:
rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
Webtatic EL5.1 for CentOS/RHEL 5:
rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm
Webtatic 5 for CentOS/RHEL 5:
rpm -Uvh http://mirror.webtatic.com/yum/centos/5/latest.rpm
Webtatic.com: 

https://webtatic.com/projects/yum-repository/



查看原文 
相关阅读

Markdown——入门指南
献给写作者的 Markdown 新手指南




热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理
Rsync同步错误处理
Fix Elementary Boot Screen (plymouth)  After Installing Nvidia Drivers
LNMP环境搭建——MySQL篇
Shell Step by Step (3) —— Stdin & if
Shell Step by Step (4) —— Cron & Echo




            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

Shell Step by Step (4) —— Cron & Echo
6.脚本定时任务
# Example of job definition:
# .-------------------------  minute (0 - 59)
# |    .---------------------  hour (0 - 23)
# |    |    .-----------------  day of month (1 - 31)
# |    |    |    .-------------  month (1 - 12) 
# |    |    |    |    .---------  day of week (0 - 6) 
# |    |    |    |    |
# *    *    *    *    *   user-name   command to be executed
7.查看当前用户的UID
root@kallen:/usr/data/kallendb_backup# ps -ef | grep UID 
UID PID PPID C STIME TTY TIME CMD 
root 2872 2384 0 09:43 pts/2 00:00:00 grep --color=auto UID
8.用Shell模拟一个进度条
  #! /bin/bash
  #
  # Progress Bar
  # Print # to view the process bar

  # create variable
  b=''

  # for loop
  for ((i=0;$i<=100;i+=2))
  do
      printf "Progress:[%-50s]%d%%\r" $b $i
      sleep 0.1

      b=#$b
  done
  echo


在Shell脚本的编写应用中，有时候会需要用到图形界面的案例，比如默认cp拷贝文件为静默模式，无法看到拷贝的进度与百分比。而dialog正是为Shell提供图形界面的工具，该工具可以为Shell脚本提供各式各样的图形界面，今天为大家介绍的是dialog提供的进度条图形功能。

dialog指令可以单独执行，格式为
 dialog --title "Copy" --gauge "files" 6 70 10
备注：

title表示图形进度条的标题， 
  gauge为正文内容，进度条高度为6，宽度70，显示进度为10%

for i in {1..100} ; 
do sleep 1; 
    echo $i | dialog --title 'Copy' --gauge 'I am busy!' 10 70 0; 
done

下面案例中通过统计源文件个数，再据此计算出拷贝文件的百分比，在Shell中提供进度的显示。 
  该脚本有两个参数，第一个参数为源文件路径，第二个参数为目标路径。 
  如果您的应用案例不同可以据此稍作修改即可使用。

#!/bin/bash    
# Description: A shell script to copy parameter1 to 
# parameter2 and Display a progress bar    
# Author:Jacob    
# Version:0.1 beta    

# Read the parameter for copy,$1 is source dir 
# and $2 is destination dir.    
dir=$1/*    
des=$2    
# Test the destination dirctory whether exists    
[ -d $des ] && echo "Dir Exist" && exit 1    
# Create the destination dirctory    
mkdir $des    
# Set counter, it will auto increase to the number of 
# source file.    
i=0    
# Count the number of source file    
n=`echo $1/* |wc -w`    

for file in `echo $dir`    
do
    # Calculate progress    
    percent=$((100*(++i)/n))    
    cat <<EOF    
    XXX    
    $percent    
    Copying file $file ...    
    XXX    
    EOF    
    /bin/cp -r $file $des &>/dev/null
done | dialog --title "Copy" --gauge "files" 6 70    
clear
效果如图： 

9.Echo输出
功能说明：    显示文字 
语    法：         
echo [ -ne ]  [ 字符串 ]  或  
echo [ --help ]  [--version ]  
参数：
-n          不要在最后自动换行
-e          若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出;  
\b          删除前一个字符；    
\f          换行但光标仍旧停留在原来的位置；     
\r          光标移至行首，但不换行；    
\t          插入tab；   
\v          与\f相同；   
\nnn        插入nnn（八进制）所代表的ASCII字符；
--help      显示帮助
--version   显示版本信息


热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理



            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

LNMP环境搭建——Apache篇

1.Apache DSO（Dynamic Shared Object）
(1) 查看已编译模块:
[root@kallen ~]# httpd -M
Loaded Modules:
 core_module (static)
 mpm_prefork_module (static)
 http_module (static)
 so_module (static)
 auth_basic_module (shared)
 auth_digest_module (shared)
 authn_file_module (shared)
 authn_alias_module (shared)
(2) 查看静态编译模块：
[root@kallen ~]# httpd -l
Compiled in modules:
 core.c
 prefork.c
 http_core.c
 mod_so.c
2.Apache MPM（Multi Process Modules）
(1) 不同平台默认MPM：



Architecture
MPM Type



BeOS
beos


Netware
mpm_netware


OS/2
mpmt_os2


Unix
prefork, worker


Windows
mpm_winnt


(2) 查看当前apache服务的MPM:
[root@kallen ~]# httpd -V 或 httpd -l
 [root@kallen ~]# httpd -V
Server version: Apache/2.2.15 (Unix)
Server built: Aug 2 2013 08:02:15
Server's Module Magic Number: 20051115:25
Server loaded: APR 1.3.9, APR-Util 1.3.9
Compiled using: APR 1.3.9, APR-Util 1.3.9
Architecture: 64-bit
Server MPM: Prefork
 threaded: no
 forked: yes (variable process count)
Server compiled with....
 -D APACHE_MPM_DIR="server/mpm/prefork"
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)
 -D APR_USE_SYSVSEM_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT="/etc/httpd"
 -D SUEXEC_BIN="/usr/sbin/suexec"
 -D DEFAULT_PIDLOG="run/httpd.pid"
 -D DEFAULT_SCOREBOARD="logs/apache_runtime_status"
 -D DEFAULT_LOCKFILE="logs/accept.lock"
 -D DEFAULT_ERRORLOG="logs/error_log"
 -D AP_TYPES_CONFIG_FILE="conf/mime.types"
 -D SERVER_CONFIG_FILE="conf/httpd.conf"

Prefork：非线程、预生成进程型MPM
这个MPM具有很强的自我调节能力，只需要很少的配置指令调整。最重要的是将MaxClients设置为一个足够大的数值以处理潜在的请求高峰，同时又不能太大，以致需要使用的内存超出物理内存的大小;

<IfModule prefork.c>
StartServers            8 
MinSpareServers         5 
MaxSpareServers         20 
ServerLimit             256 
MaxClients              256 
MaxRequestsPerChild     4000 
</IfModule> 

Worker：线程化、多进程型MPM
由于使用线程来处理请求，可以处理海量请求，而系统资源的开销小于基于进程的MPM。但是，它也使用了多进程，每个进程又有多个线程，以获得基于进程的MPM的稳定性。控制这个MPM的最重要的指令是，控制每个子进程允许建立的线程数的ThreadsPerChild，和控制允许建立的总线程数的MaxClients指令；

 <IfModule worker.c>
StartServers            4
MaxClients              300
MinSpareThreads         25
MaxSpareThreads         75
ThreadsPerChild         25
MaxRequestsPerChild     0
</IfModule> 


【注】文中所指的LNMP泛指LAMP 或LNMP.



热门推荐

LNMP环境搭建——Nginx篇
在RHEL6.5中配置本地YUM源
Ubuntu下Zabbix安装及使用问题
MySQL双主热备问题处理
Rsync同步错误处理
Fix Elementary Boot Screen (plymouth)  After Installing Nvidia Drivers
LNMP环境搭建——MySQL篇
Shell Step by Step (3) —— Stdin & if
Shell Step by Step (4) —— Cron & Echo




            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载｜Copyright ©2011-2015, Kallen Ding, All Rights Reserved.

在Linux、ubuntu 11下安装无线网卡 、杂牌无线网卡、ndiswrapper的使用
本片文章是之前在百度空间所写的（2011-10-11），由于百度空间已无法浏览。考虑本文还有一定实用性，固转载至此。
原百度链接：http://hi.baidu.com/ccboyhi/blog/item/a358840077a6b2ca277fb5eb.html


首先说一下，我的电脑个组装台式机，无线网卡是自己在淘宝上买了一个杂牌子（台湾inventel UR054g(R01) v1.1 cohiba 3887 rev0），前段时间在电脑上安装了双系统xp+ubuntu，学校的网是用深澜软件Srun3000限制登录上网的，虽然学校提供了srun3000的Linux，Ubuntu和java等版本，但是都不能使用，提示“error mode”等错误。因此在我的Ubuntu下完全不能连接到互联网，只能在校园网内逛逛。因此只能想办法将window上的软件srun3000.exe能在运行，寝室一个哥们说 要想在Linux上运行exe的文件，就要安装wine，听到这个消息真是很高兴，就开始网上收办法安装，经过一番收缩，真是郁闷之极，因为在ubuntu上无法上网，就不能使用在线安装。因此就有先在xp平台上下载wine的离线安装包，再拿到ubuntu上安装，结果下了很多的wine的离线安装包，都无法在ubuntu上正常的安装。因为我们学校有电信的无线网ChinaNet每个月可以免费上五个小时，因此就想通过无线网络来安装wine，但是我的ubuntu系统下无线网卡在安装ubuntu系统的时候没有自动安装（该网卡不在Ubuntu的硬件支持列表中），因此无线网卡不能使用。

接下来就是google、baidu怎么在ubuntu下安装杂牌无线网卡。经过一番努力真是功夫不负有心人！终于找到了可行的办法,下面就来看看怎么在一台无法上网的ubuntu系统上安装无线网卡。经过顽强的搜索与尝试，终于发现通过ndiswrapper可以安装好网卡！

1.下载ndiswrapper

http://ndiswrapper.sourceforge.net/（主页）

http://sourceforge.net/projects/ndiswrapper/files/（下载页面）

csdn免费积分下载：http://download.csdn.net/detail/ccboy2009/3672493



它是源码来的要自己编译，但过程很简单。但在没装网卡前不能上网怎么下载，嘿嘿，自己想办法。我是在xp上下载好了后，然后在ubuntu上找到该文件



2、接下来是编译安装ndiswrapper
将你下载的ndiswrapper解压，然后进入相应目录，输入

make install

如果没有出错的话ndiswrapper算是安装成功。



如果是从CD版新安装的系统可能没带相应编译头文件，也要下载，又要头痛。

3、安装驱动
简单的理解ndiswrapper是用来挂载win下网卡的驱动。所以还要找到网卡在WinXP的网卡，一定要XP的。翻出我的网卡自带的光碟（或者你在xp下该网卡的驱动包），为了安全将相关的文件一起拷贝了过来，当然也可以只拷贝必须的几个文件。

以下文件下载：http://download.csdn.net/detail/ccboy2009/3672515






网卡驱动找到了就安装吧。
sudo ndiswrapper -i <<网卡驱动inf文件的完整路径>>

没出错提示的话，说明一切正常。

也可以用
ndiswrapper -l

来看下是否有安装成功。


如果有driver installed说明驱动已安装，同时有device (XXXX:XXXX) present说明驱动可以识别设备。说明：XXXX代表设备ID。没有present的话说明驱动不能驱动设备。删除原驱动，再换个驱动重装一次吧。

可以用
ndiswrapper -r prisma02（prisma02是驱动程序名称）来删除驱动

4、加载驱动
驱动程序安装完了，还要加载才能使用。

sudo modprobe ndiswrapper

如果不出意外网卡可以使用了。看下无线网的指示灯是否亮了，系统的网络链接管理图标是否多了一个无线链接，并开始获取IP。

总算大功告成。



5.通过上面的步骤虽然可以正常使用无线网卡了，但电脑重启后 每次都要手动输入：

sudo modprobe ndiswrapper    启动驱动，这样很麻烦，所以就想法让其开机自动启动。

gedit   /etc/rc.local

在最后一行添加（在exit 0之前）

modprobe ndiswrapper

保存即可，以后开机就能自动启动了！

6.现在就可以通过无线网卡连上中国电信ChinaNet的上网了，在这五个小时的时间内，通过ubuntu自带的程序安装程序将wine安装上，这样就可以运行简单的exe文件了，包括我们学校的上网客户端srun3000.exe，如果对wine进行更好的配置，他将可以运行复杂的exe程序，如QQ。

到此大功告成，真是欣喜若狂！


转载请注明：来自IccBoY(http://blog.csdn.net/ccboy2009/article/details/47986247)

版权声明：本文为博主原创文章，未经博主IccBoY允许不得转载。

关于《IT运维之道》的扩充建议

《IT运维之道》出版半年多了，感谢广大书友的厚爱，不少书友还提了很多真知灼见，非常感谢，由于当时出书时，太赶，有些内容没说透，很有意犹未尽的感觉，而现在也很忙，很难有大段时间来整理完善，所以，有一想法，希望朋友们在原来基础上续写，写的稿子一经采纳，会再再版时引入，引入会注明作者，由于出书不赚钱，费用就没有了，请大家理解，这也算一种新众筹吧，有兴趣请加QQ：630559761 ，注明IT运维之道
    
        
版权声明：本文为博主原创文章，未经博主允许不得转载。

使用Nagios搭建监控服务器
第二十四章 使用Nagios搭建监控服务器【关于Nagios】Nagios是一款用于监控系统和网络的开源应用软件，它的模式是服务器—客户端，也就是说首先要在在一台服务器上（server）部署相应的主要套件，然后在要监控的服务器上部署客户端程序，这样server会和client通信，从而监控client端的各项资源。Nagios功能十分强大几乎所有的项目都可以监控，大到服务器的存活状态，小到服务器上的某一个服务（web）。这些功能都是通过自定义插件（或者叫做脚本）来实现。当Nagios监控到某项资源发生异常会通知到用户，你可以接入手机短信接口也可以接入邮件接口。我们可以通过web页面来查看Nagios所监控的各项资源，默认搭建的Nagios服务器只能监控简单的几个项目，而其他服务之类的监控项目都是由我们自己开发的插件来实现的。 【需要下载的软件】nagios-3.0.5  nagios-plugins-1.4.13  nrpe-2.12.tar.gz apache-2.2.11   // 以上软件版本可以不一样 【监控中心Server端的配置】1. 安装apache （略，请参考第16章中相关内容，只需安装，到后边再配置） 2. 建立nagios账户useradd  nagios 3. 下载软件cd  /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/nagios-3.0.5.tar.gzwget  http://syslab.comsenz.com/downloads/linux/nagios-plugins-1.4.13.tar.gzwget  http://syslab.comsenz.com/downloads/linux/nrpe-2.12.tar.gz 4. 编译安装nagioscd  /usr/local/src/tar  zxvf  nagios-3.0.5.tar.gzcd  nagios-3.0.5./configure  --prefix=/usr/local/nagiosmake allmake installmake install-init  # 把nagios做成一个运行脚本，使nagios随系统开机启动make install-config  # 把配置文件样例复制到nagios的安装目录make install-commandmode # 给外部命令访问nagios配置文件的权限chown -R nagios:nagios /usr/local/nagios 5. 编译安装nagios-pluginscd  /usr/local/src/tar zxvf nagios-plugins-1.4.13.tar.gzcd  nagios-plugins-1.4.13./configure  --prefix=/usr/local/nagios --with-nagios-user=nagios --with-nagios-group=nagiosmake && make install查看是否安装成功的方法是：ls /usr/local/nagios/libexec/看这个目录下是否有插件文件 6. 安装nrpecd /usr/local/src/tar zxvf  nrpe-2.12.tar.gz cd nrpe-2.12./configure --enable-ssl --enable-command-argsmake allmake install-pluginmake install-daemonmake install-daemon-config 7. 配置web接口vim  /usr/local/apache2/conf/httpd.conf在最后加入以下内容：ScriptAlias /nagios/cgi-bin /usr/local/nagios/sbin <Directory "/usr/local/nagios/sbin/">     AllowOverride AuthConfig     Options ExecCGI     Order allow,deny     Allow from all</Directory>  Alias /nagios/ /usr/local/nagios/share/<Directory "/usr/local/nagios/share">     Options None     AllowOverride AuthConfig     Order allow,deny     Allow from all</Directory> 8. 配置nagioscd  /usr/local/nagios/etc/vim cgi.cfg把 use_authentication=1  改成  use_authentication=0  意思是不用用户验证 9. 启动nagios 在启动前先检测一下：/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg如果最后显示如下，则说明配置没有问题了。Total Warnings: 0Total Errors:   0启动命令：/etc/init.d/nagios start或者：/usr/local/nagios/bin/nagios -d /usr/local/nagios/etc/nagios.cfg 此时，就可以访问web页面的nagios了，在浏览器中输入：http://IP/nagios/ 看看吧。 【在要监控的机器上client部署nagios】如果你打开了web页面，点击左栏的Host Detail 会在右栏看到一行数据，其中Host 名为 “localhost” ，Status显示为”up”，并且显示为绿色，如果是其他颜色就说明你的localhost出了问题。目前只有一行数据，也就是说只监控了监控中心（localhost）一台主机，那么如何添加其他机器被它监控呢？这就需要在要被监控的机器上也部署nagios软件。1. 添加账户useradd nagios 2. 安装nrpecd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/nrpe-2.12.tar.gztar zxvf  nrpe-2.12.tar.gz cd nrpe-2.12./configure --enable-ssl --enable-command-argsmake allmake install-pluginmake install-daemonmake install-daemon-config 3. 安装nagios-plugincd  /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/nagios-plugins-1.4.13.tar.gztar zxvf nagios-plugins-1.4.13.tar.gzcd  nagios-plugins-1.4.13./configure  --prefix=/usr/local/nagios --with-nagios-user=nagios --with-nagios-group=nagiosmake && make install到此就算安装完成了，请查看/usr/local/nagios/目录下是否有四个目录分别为：bin  etc  libexec  share 另外在libexec目录下会有很多check_开头的文件。如果你的机器上没有，就请重新安装吧。 4. 配置vim /usr/local/nagios/etc/nrpe.cfg找到”allowed_hosts=127.0.0.1” 改成 “allowed_hosts=127.0.0.1,10.0.4.67” // 后边的IP是server的IP找到” dont_blame_nrpe=0” 改成 “dont_blame_nrpe=1” 5. 启动nrpe/usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d 【在监控中心添加被监控主机】添加主机当然是要到server端（监控中心）修改配置文件了。1. 修改主配置文件cd  /usr/local/nagios/etc/vim nagios.cfg增加内容：cfg_dir=/usr/local/nagios/etc/services   ##定义一个目录，以后把新增加的主机信息文件全部放到这里 2. 添加被监控主机信息mkdir /usr/local/nagios/etc/servicescd  /usr/local/nagios/etc/servicesvim  10.0.4.56.cfg  加入如下内容：define host{        use     linux-server        host_name       10.0.4.56        alias           10.0.4.56        address         10.0.4.56}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_ping        check_command           check_ping!100.0,20%!200.0,50%        max_check_attempts 5        normal_check_interval 1}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_ssh        check_command           check_ssh        max_check_attempts 5        normal_check_interval 1}define service{        use     generic-service        host_name       10.0.4.56        service_description     check_http        check_command           check_http        max_check_attempts 5        normal_check_interval 1}// 注意，这里的IP是client端的IP，监控的项目有三个ping, ssh, http。其实这三个项目使用的脚本都为本地脚本，也就是说，即使远程主机没有安装nagios和nrpe同样可以监控这些项目。但是如果想监控load，disk，等等就需要通过nrpe服务来搞定了，道理很简单，load和disk都需要登录到远程主机上去获得信息，而ping，ssh，http都不需要的。这个到远程主机获取相关的信息的过程是由nrpe完成的。如果你的client上没有启动nrpe服务那么我们是无法获取远程主机的load和disk等信息的。下面笔者配置一下使用nrpe来监控远程主机的相关项目。在server端编辑/usr/local/nagios/etc/objects/commands.cfgvim  /usr/local/nagios/etc/objects/commands.cfg  # 在最后面添加如下内容define command{        command_name    check_nrpe        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$        }然后编辑10.0.4.56.cfg （还是server上）cd   /usr/local/nagios/etc/servicesvim  10.0.4.56.cfg   # 加入如下内容：define service{        use     generic-service        host_name       10.0.4.56        service_description     check_load        check_command           check_nrpe!check_load        max_check_attempts 5        normal_check_interval 1} define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk_hda1        check_command           check_nrpe!check_hda1        max_check_attempts 5        normal_check_interval 1} define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk_hda2        check_command           check_nrpe!check_hda2        max_check_attempts 5        normal_check_interval 1}// 这里需要解释一下相关的”check_command”, 先看这个” check_nrpe!check_load” 这里的check_nrpe就是上面/usr/local/nagios/etc/objects/commands.cfg中刚刚定义的，后面的check_load是在远程主机上定义的一个命令脚本。具体在哪里定义稍后介绍。为什么中间加一个”!”，这个是nagios特有的形式，无需关心。下面需要到远程主机上去定义上面用到的脚本了。在远程主机上编辑/usr/local/nagios/etc/nrpe.cfg 文件vim  /usr/local/nagios/etc/nrpe.cfg (client上)把” command[check_hda1]”那行改成：command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1然后再增加一行：command[check_hda2]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda2// 这里的check_hda1 和 check_hda2 都是自定义的，和server端的定义的service中的check_command对应。也就是说，如果在server端定义了一个service（通过nrpe方式）那么必须要在客户端上的nrpe.cfg中定义相应的脚本。保存这个文件后，需要重新启动一下nrpe服务。killall nrpe ; /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d （client上） 3. 重启nagios服务修改了配置需要重启服务才能使添加的监控主机生效。/etc/init.d/nagios  restart  （server上）此时再到web页面去观察是否多了一台10.0.4.56  【在nagios客户端上自定义监控脚本】在开始，笔者就讲过，我们可以自定义写监控脚步，从上面的例子中也可以看到监控磁盘状态时，是根据磁盘分区来监控的。这样不免有些麻烦，因为每台主机的磁盘分区状况都不一样（一样还好），而且有多少个分区就需要定义多少个命令。所以笔者就自定义写一个shell脚本来监控所有的磁盘分区：1. 在客户端上创建脚本/usr/local/nagios/libexec/check_disk.shvim  /usr/local/nagios/libexec/check_disk.sh 写入如下内容：(client上)#!/bin/bashrow=`df -h -P|wc -l`status=0for i in `seq 2 $row`do        spare=`df -h -P|sed -n "$i"p|awk '{print $4}'`        use_percentage=`df -h -P|sed -n "$i"p|sed -n "s/\%//"p|awk '{print $5}'`        spare_percentage=`expr 100 - $use_percentage`        partition_name=`df -h -P|sed -n "$i"p|awk '{print $6}'`        if [ "$spare_percentage" -lt "3"  ];then                echo -n "$partition_name CRITICAL ${spare_percentage}% $spare  "                status[$i]=2        elif [ "$spare_percentage" -lt "5" ];then                echo -n  "$partition_name WARNING! ${spare_percentage}% $spare  "                status[$i]=1        else                echo -n  "$partition_name OK ${spare_percentage}% $spare  "                status[$i]=0        fidonezhuangtai=0for j in `seq 2 $row`do        if [ "${status[$j]}" -gt "$zhuangtai"  ];then                zhuangtai=${status[$j]}        fidoneexit $zhuangtai2. 保存后，修改该脚本的权限chmod +x  /usr/local/nagios/libexec/check_disk.sh （client上）3. 然后编辑/usr/local/nagios/etc/nrpe.cfg文件vim /usr/local/nagios/etc/nrpe.cfg  # 加入一行：（client上）command[check_disk]=/usr/local/nagios/libexec/check_disk.sh保存，重启nrpe服务killall nrpe ; /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d （client上）4. 检测刚才的脚本是否正常运行的方法是，到server端执行如下命令：/usr/local/nagios/libexec/check_nrpe -H 10.0.4.56 -c check_disk （server上）如果正常的话，会输出一行磁盘检测的数据，否则可能会报错。5. 到server上添加相应的servicecd   /usr/local/nagios/etc/services  （server上）vim  10.0.4.56.cfg   # 加入如下内容：define service{        use     generic-service        host_name       10.0.4.56        service_description     check_disk        check_command           check_nrpe!check_disk        max_check_attempts 5        normal_check_interval 1}6. 重启nagios服务/etc/init.d/nagios restart   （server上） 【配置nagios报警邮件】现在139邮箱有顺便发短信的功能，所以当有报警时，只需发送到你的139邮箱你就同样会收到一条报警短信。这样做的优势就是不用再去买短信网关了，节省了很大一笔钱。vim /usr/local/nagios/etc/objects/contacts.cfg把” email         nagios@localhost”  修改成 “email   你的139邮箱”vim /usr/local/nagios/etc/objects/templates.cfg找到：define service{        name                            generic-service之所以看这一段，是因为在上面添加的10.0.4.56.cfg 定义了很多generic-service所以要关注这段的配置。define service{name     generic-service                 active_checks_enabled          1                              passive_checks_enabled          1                       parallelize_check               1                       obsess_over_service             1                              check_freshness                 0                      notifications_enabled           1                              event_handler_enabled           1                       flap_detection_enabled          1                       failure_prediction_enabled      1                       process_perf_data               1                       retain_status_information        1                               retain_nonstatus_information    1                       is_volatile                     0                       check_period                    24x7         max_check_attempts              3                      normal_check_interval           10                      retry_check_interval            2                       ontact_groups                  admins                  notification_options            w,u,c,r                 notification_interval           60                      notification_period             24x7                    register                        0                      }其中有几个参数需要你注意：notifications_enabled : 是否开启提醒功能。1为开启，0为禁用。一般，这个选项会在主配置文件（nagios.cfg）中定义，效果相同。notification_interval: 重复发送提醒信息的最短间隔时间。默认间隔时间是60分钟。如果这个值设置为0，将不会发送重复提醒。notification_period: 发送提醒的时间段。非常重要的主机（服务）我定义为7×24，一般的主机（服务）就定义为上班时间。如果不在定义的时间段内，无论什么问题发生，都不会发送提醒。notification_options: 这个参数定义了发送提醒包括的情况：d = 状态为DOWN, u = 状态为UNREACHABLE , r = 状态恢复为OK ,  f = flapping。，n=不发送提醒。要想正确发送邮件，上面的参数得配置合理才行。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

文档的压缩与打包
  在windows下我们接触最多的压缩文件就是.rar格式的了。但在linux下这样的格式是不能识别的，它有自己所特有的压缩工具。但有一种文件在windows和linux下都能使用那就是.zip格式的文件了。压缩的好处不用笔者介绍相信你也晓得吧，它不仅能节省磁盘空间而且在传输的时候还能节省网络带宽呢。在linux下最常见的压缩文件通常都是以.tar.gz 为结尾的，除此之外还有.tar, .gz, .bz2, .zip等等。以前也介绍过linux系统中的后缀名其实要不要无所谓，但是对于压缩文件来讲必须要带上。这是为了判断压缩文件是由哪种压缩工具所压缩，而后才能去正确的解压缩这个文件。以下介绍常见的后缀名所对应的压缩工具。.gz    gzip 压缩工具压缩的文件.bz2   bzip2 压缩工具压缩的文件.tar    tar 打包程序打包的文件(tar并没有压缩功能，只是把一个目录合并成一个文件)	.tar.gz	可以理解为先用tar打包，然后再gzip压缩.tar.bz2	 同上，先用tar打包，然后再bzip2压缩【gzip】语法： gzip  [-d#] filename   其中#为1-9的数字-d ：解压缩时使用-# ：压缩等级，1压缩最差，9压缩最好，6为默认压缩test.txt后，则变成了test.txt.gz用-d解压缩要注意的是，gzip不可以压缩目录【bzip2】语法：bzip2  [-dz] filename-d ：解压缩-z ：压缩其实-z参数是可以省略掉的，你不妨试试跟gzip的解压类似，也是用-d解压。【tar】语法：tar [-zjxcvfpP] filename-z ：是否同时用gzip压缩-j ：是否同时用bzip2压缩-x ：解包或者解压缩-t ：查看tar包里面的文件-c ：建立一个tar包或者压缩文件包-v ：可视化-f ：后面跟文件名，压缩时跟-f文件名，意思是压缩后的文件名为filename，解压时跟-f文件名，意思是解压filename。请注意，如果是多个参数组合的情况下带有-f，请把f写到最后面。-p ：使用原文件的属性，压缩前什么属性压缩后还什么属性。（不常用）-P ：可以使用绝对路径。（不常用）--exclude  filename ：在打包或者压缩时，不要将filename文件包括在内。（不常用）首先在test目录下建立test111目录，然后在test111目录下建立test2.txt，并写入”nihao”到test2.txt中，接着是用tar把test111打包成test111.tar。请记住-f参数后跟的是打包后的文件名。删除原来的test111目录，然后解包test111.tar，不管是打包还是解包，原来的文件是不会删除的。打包的同时使用gzip压缩用-tf 跟包名来查看包或者压缩包内的文件都有哪些先删除test111,然后用tar -zxvf 来解压.tar.gz的压缩包。-jcvf 打包的同时用bzip2压缩，-tf同样可以查看.tar.bz2的压缩包-jxvf解压缩.tar.bz2的压缩包--exclude参数的作用就是打包的时候过滤掉某些文件，如果想过滤多个文件怎么办只能是继续跟 --exclude filename了。   

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

administrator无法创建新用户的解决
操作系统win2003sp2，已经是administrator了，但是创建新用户时提示：
在计算机 SERVER-05 上创建用户 abc 时，出现了以下错误:
拒绝访问。

百思不得其解，搜遍google和百度都没对症解药。
然后打开事件查看器，发现创建用户时系统抛错如下：
SAM 无法更改数据库。很可能是因为内存 或磁盘空间不足。SAM 数据库会被还原为先前状态。 最近的更改都会丢失。请检查可用磁盘空间 和页面文件大小设置的最大值。

搜了下SAM的相关知识，估摸着要么是文件被破坏，要么是权限不足
检查了windows/system32/config下面的SAM文件，都还健在，大小正常，查看权限administrator有完全控制权限。估计这块应该没问题。
打开注册表HKEY_LOCAL_MACHINE\SAM，发现是空的，应该是没有权限，右键，给administrators赋权完全控制后刷新。
继续打开到HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\这层，发现下面三个子项aliases、groups、users，竟然都没有权限，估计就是这儿了，继续给administrators赋权。
然后试着重新创建用户，这次成功了。
估计是什么安全软件把这个注册表项的权限给去掉了，才引起的这个问题。

版权声明：本文为博主原创文章，未经博主允许不得转载。

LAMP环境搭建
第十六章 LAMP环境搭建经过前部分章节的学习，你已经掌握了linux的基础知识了。但是想成为一名系统管理员恐怕还有点难度，因为好多单位招聘这个职位的时候都要求有一定的工作经验。然而真正的经验一天两天是学不来的，是靠长时间积累得来的。不过你也不要灰心，所谓的工作经验无非也就是一些运行在linux系统上的软件的配置以及应用。就好像是装在windows上的office一样，大部分人都会装，但是十分会用的却不多。是因为office太难吗，当然不是，只是因为只有一小部分人花费了很长很长的时间去使用和研究office而已。LAMP 是Linux Apache MySQL PHP的简写，其实就是把Apache, MySQL以及PHP安装在Linux系统上，组成一个环境来运行php的脚本语言。至于什么是php脚本语言，笔者不再介绍，请自己查资料吧。Apache是最常用的WEB服务软件，而MySQL是比较小型的数据库软件，这两个软件以及PHP都可以安装到windows的机器上。下面笔者就教你如何构建这个LAMP环境。【安装MySQL】一般我们平时安装MySQL都是源码包安装的，但是由于它的编译需要很长的时间，所以，笔者建议你安装二进制免编译包。你可以到MySQL官方网站去下载:http://www.mysql.com/downloads/ 具体版本根据你的平台和需求而定，目前比较常用的mysql-5.1.x 和mysql-5.3.x下面是安装步骤：1. 下载mysql到/usr/local/src/ cd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz2. 解压tar zxvf /usr/local/src/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz3. 把解压完的数据移动到/usr/local/mysqlmv mysql-5.0.86-linux-i686-icc-glibc23 /usr/local/mysql4. 建立mysql用户useradd mysql5. 初始化数据库cd /usr/local/mysqlmkdir /data/mysql ; chown -R mysql:mysql /data/mysql./scripts/mysql_install_db --user=mysql --datadir=/data/mysql --user定义数据库的所属主，--datadir定义数据库安装到哪里，建议放到大空间的分区上，这个目录需要自行创建。6. 拷贝配置文件cp support-files/my-large.cnf /etc/my.cnf7. 拷贝启动脚本文件并修改其属性cp support-files/mysql.server  /etc/init.d/mysqldchmod 755 /etc/init.d/mysqld8. 修改启动脚本vim /etc/init.d/mysqld需要修改的地方有datadir=/data/mysql（前面初始化数据库时定义的目录）9. 把启动脚本加入系统服务项，并设定开机启动，启动mysqlchkconfig --add mysqldchkconfig mysqld onservice mysqld start如果启动不了，请到/data/mysql/ 下查看错误日志，这个日志通常是主机名.err。关于mysql的配置文件/etc/my.cnf请参考这篇文章 http://www.92csz.com/19/603.html【安装Apache】cd /usr/local/src/wget  http://syslab.comsenz.com/downloads/linux/httpd-2.2.11.tar.gzuseradd www （增加 Apache运行账户）tar zvxf httpd-2.2.11.tar.bz2cd httpd-2.2.11./configure --prefix=/usr/local/apache2 --with-included-apr --enable-so  --enable-deflate=shared --enable-expires=shared --enable-rewrite=shared  --enable-static-support --disable-userdirmakemake install 【安装PHP】wget http://syslab.comsenz.com/downloads/linux/php-5.2.10.tar.gztar zvxf php-5.2.10.tar.gzcd php-5.2.10./configure --prefix=/usr/local/php \ --with-apxs2=/usr/local/apache2/bin/apxs \--with-config-file-path=/usr/local/php/etc \--with-mysql=/usr/local/mysql \--with-libxml-dir \--with-gd \--with-jpeg-dir \--with-png-dir \--with-freetype-dir \--with-iconv-dir \--with-zlib-dir  \--with-bz2 \--with-openssl \--with-mcrypt \--enable-soap \--enable-gd-native-ttf \--enable-ftp \--enable-mbstring \--enable-sockets \--enable-exif \--disable-ipv6 make && make installmkdir /usr/local/php/etccp php.ini-dist /usr/local/php/etc/php.ini【apache结合php】Apache主配置文件为：/usr/local/apache2/conf/httpd.conf# vim /usr/local/apache2/conf/httpd.conf找到：AddType application/x-gzip .gz .tgz在该行下面添加AddType application/x-httpd-php .php找到：<IfModule dir_module>    DirectoryIndex index.html</IfModule>将该行改为<IfModule dir_module>    DirectoryIndex index.html index.htm index.php</IfModule>找到：#Include conf/extra/httpd-mpm.conf#Include conf/extra/httpd-info.conf#Include conf/extra/httpd-vhosts.conf#Include conf/extra/httpd-default.conf去掉前面的“#”号，取消注释。【配置apache的进程管理以及虚拟主机】1. 配置Apache进程管理配置文件为：/usr/local/apache2/conf/extra/httpd-mpm.conf将配置文件中下面一段修改为如下：<IfModule mpm_prefork_module>    ServerLimit          2048    新添加    StartServers          5    MinSpareServers      5    MaxSpareServers      10    MaxClients           1024 默认最大为256，设置为超过256必须增加有ServerLimit    MaxRequestsPerChild   0</IfModule>2. 配置Apache虚拟主机配置文件为：/usr/local/apache2/conf/extra/httpd-vhosts.conf将配置文件中下面一段修改为如下：<VirtualHost *:80>   # ServerAdmin webmaster@dummy-host.example.com    DocumentRoot "/data/www"    ServerName www.example.com.cn    ErrorLog "|/usr/local/apache2/bin/rotatelogs -l /www/logs/error.log-%Y%m%d 86400"   CustomLog "|/usr/local/apache2/bin/rotatelogs -l /www/logs/access.log-%Y%m%d 86400" combined   </VirtualHost>说明：ServerAdmin 参数后为管理员emailDocumentRoot 指的是论坛文件存放的目录ServerName  是论坛的域名ErrorLog 是论坛错误日志  通过管道使用apache自带的rotatelogs工具将日志切割为每天一个文件CustomLog 是论坛访问日志，同样切割为每天一个文件配置Apache缺省httpd设置配置文件为：/usr/local/apache2/conf/extra/httpd-default.conf将配置文件中下面一段：将KeepAlive On 改为KeepAlive Off配置Apache的访问权限vim /usr/local/apache2/conf/httpd.conf找到<Directory />Options FollowSymlinksAllowOverride NoneOrder deny,allowDeny form all</Directory>改成：<Directory />Options FollowSymlinksAllowOverride NoneOrder deny,allowAllow form all</Directory>        配置Apache的运行账户vim  /usr/local/apache2/conf/httpd.conf找到User  daemonGroup daemon改成User wwwGroup www配置完上述内容之后，启动Apache：/usr/local/apache2/bin/apachectl start【测试LAMP是否成功】vim /data/www/1.php写入：<?php phpinfo();?>保存后，然后在浏览器中输入 http://你配置的域名/1.php 看是否能看到php的相关配置信息。【Zend安装】有时，需要在你的LAMP环境中配置ZEND，因为有些php的应用程序比如Discuz! 或者phpwind等是需要用zend来解密的，不装zend会显示乱码。安装步骤为：cd /usr/local/srcwget http://syslab.comsenz.com/downloads/linux/ZendOptimizer-3.3.3-linux-glibc23-i386.tar.gztar zxvf ZendOptimizer-3.3.3-linux-glibc23-i386.tar.gzcd ZendOptimizer-3.3.3-linux-glibc23-i386 ./install.sh 根据提示安装。php.ini文件的路径为：/usr/local/php/etc/ 当提示是否重启apache时，选择不重启。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

vmware 复制一台虚机 （vmware copy/clone vm)
今天同事问关于如何复制一台已经配置好的VM， 本人研究了一下，其实这个功能还挺好用的。主要的方法如下： 
1. 选择创建虚机 
2. 这步很关健，选择自定义（使用其他设备或特定的配置选项创建虚机） 
3. 给虚机命一个响亮的名字 
4. 选择虚机文件的目标存储，默认的即可，直接【下一步】 
5. 选择虚机的版本，一般主机或集群支持多个VM版本（4， 7， 8），我们选择适合自己的，比如我的是5.5的，所以选择版本8. 
6. 选择虚机的客户操作系统（这个依赖于你想clone或备份的VM） 
7. 选择虚机中虚拟CPU的数量, 默认的即可，直接【下一步】 
8. 选择虚机内存大小，默认的即可，直接【下一步】 
9. 为虚机设置网络，选择虚机需要使用的虚拟网卡数量及适配器。默认的即可，直接【下一步】 
10. 选择虚机SCSI控制器。默认的即可，直接【下一步】 
11. 这步很关健，选择要使用的磁盘的类型，我们选择“使用现有虚拟磁盘，重新使用以前配置的虚拟磁盘” 
12. 选择现有磁盘（磁盘文件路径），即要将现有的哪个磁盘用作该虚拟磁盘，选择【浏览】，选择datastore, 然后找到该虚机的vmdk格式文件。【下一步】 
13. 指定虚拟磁盘的高级选项，正常情况下不需要更改这些选项，默认的即可，直接【下一步】 
14. 单击【完成】即可。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

小议：Site Collection中SharePoint Publishing Feature无法激活的解决方案
有些时候，我们在使用SharePoint某个功能的时候，需要Activate一些feature才能实现，比如Navigation，就需要ActivatePublishing
 feature，但是往往在Activate这个feature的时候，会遇到一些错误，比如：
 
问题描述：SiteCollection feature中的SharePoint
 Publishing Infrastructurefeature激活成功后，在site feature中激活SharePoint
 Publishing失败，提示：sorry, something went wrong。
 
问题分析：可能在激活Site Collection级别的Publishing
 feature的时候，有一些功能还是没有成功激活，所显示的状态可能是假象。
 
解决方案：可以借助SharePoint Manager Tool，找到Site
 Collection Feature下的PublishingInfrastructure feature变为deactivate，然后借着tool重新对site
 collection和site
级别中的publishingfeature进行activate，可以解决上述问题。
 
具体步骤：
 

打开SharePoint Manager 2013，找到具体的Site
 Collection->Root Site的Feature，如下图所示：

 



 

展开Site Collection->Root Site的Feature，找到SharePoint
 Server Publishing Feature，点击Deactivate。

 


 

展开Site Collection->Feature，找到SharePoint
 Server Publishing Infrastructure Feature，点击Deactivate。

 



 

之后在Site Collection Setting页面按照顺序依次Activate这两个Feature，就可以解决问题了。
 
希望本篇文章能给大家带来帮助。

版权声明：本文为博主原创文章，未经博主允许不得转载。

学习shell脚本之前的基础知识
第十二章 学习	shell脚本之前的基础知识日常的linux系统管理工作中必不可少的就是shell脚本，如果不会写shell脚本，那么你就不算一个合格的管理员。目前很多单位在招聘linux系统管理员时，shell脚本的编写是必考的项目。有的单位甚至用shell脚本的编写能力来衡量这个linux系统管理员的经验是否丰富。笔者讲这些的目的只有一个，那就是让你认真对待shell脚本，从一开始就要把基础知识掌握牢固，然后要不断的练习，只要你shell脚本写的好，相信你的linux求职路就会轻松的多。笔者在这一章中并不会多么详细的介绍shell脚本，而只是带你进入shell脚本的世界，如果你很感兴趣那么请到网上下载相关的资料或者到书店购买相关书籍吧。在学习shell 脚本之前，需要你了解很多关于shell的知识，这些知识是编写shell脚本的基础，所以希望你能够熟练的掌握。【什么是shell】简单点理解，就是系统跟计算机硬件交互时使用的中间介质，它只是系统的一个工具。实际上，在shell和计算机硬件之间还有一层东西那就是系统内核了。打个比方，如果把计算机硬件比作一个人的躯体，而系统内核则是人的大脑，至于shell，把它比作人的五官似乎更加贴切些。回到计算机上来，用户直接面对的不是计算机硬件而是shell，用户把指令告诉shell，然后shell再传输给系统内核，接着内核再去支配计算机硬件去执行各种操作。笔者接触的linux发布版本（Redhat/CentOS）系统默认安装的shell叫做bash，即Bourne Again Shell，它是sh（Bourne Shell）的增强版本。Bourn Shell 是最早行起来的一个shell，创始人叫Steven Bourne，为了纪念他所以叫做Bourn Shell，检称sh。那么这个bash有什么特点呢？1）记录命令历史我们敲过的命令，linux是会有记录的，预设可以记录1000条历史命令。这些命令保存在用户的家目录中的.bash_history文件中。有一点需要你知道的是，只有当用户正常退出当前shell时，在当前shell中运行的命令才会保存至.bash_history文件中。与命令历史有关的有一个有意思的字符那就是”!”了。常用的有这么几个应用：（1）!! （连续两个”!”），表示执行上一条指令；（2）!n（这里的n是数字），表示执行命令历史中第n条指令，例如”!100”表示执行命令历史中第100个命令；（3）!字符串（字符串大于等于1），例如!ta，表示执行命令历史中最近一次以ta为开头的指令。2）指令和文件名补全在本教程最开始笔者就介绍过这个功能了，记得吗？对了就是按tab键，它可以帮你补全一个指令，也可以帮你补全一个路径或者一个文件名。连续按两次tab键，系统则会把所有的指令或者文件名都列出来。3）别名前面也出现过alias的介绍，这个就是bash所特有的功能之一了。我们可以通过alias把一个常用的并且很长的指令别名一个简洁易记的指令。如果不想用了，还可以用unalias解除别名功能。直接敲alias会看到目前系统预设的alias ：看到了吧，系统预设的alias指令也就这几个而已，你也可以自定义你想要的指令别名。alias语法很简单，alias  [命令别名]=[’具体的命令’]。4）通配符在bash下，可以使用*来匹配零个或多个字符，而用?匹配一个字符。5）输入输出从定向输入重定向用于改变命令的输入，输出重定向用于改变命令的输出。输出重定向更为常用，它经常用于将命令的结果输入到文件中，而不是屏幕上。输入重定向的命令是<，输出重定向的命令是>，另外还有错误重定向2>，以及追加重定向>>，稍后会详细介绍。6）管道符前面已经提过过管道符”|”，就是把前面的命令运行的结果丢给后面的命令。7）作业控制。当运行一个进程时，你可以使它暂停（按Ctrl+z），然后使用fg命令恢复它，利用bg命令使他到后台运行，你也可以使它终止（按Ctrl+c）。【变量】前面章节中笔者曾经介绍过环境变量PATH，这个环境变量就是shell预设的一个变量，通常shell预设的变量都是大写的。变量，说简单点就是使用一个较简单的字符串来替代某些具有特殊意义的设定以及数据。就拿PATH来讲，这个PATH就代替了所有常用命令的绝对路径的设定。因为有了PATH这个变量，所以我们运行某个命令时不再去输入全局路径，直接敲命令名即可。你可以使用echo命令显示变量的值。除了PATH, HOME, LOGNAME外，系统预设的环境变量还有哪些呢？使用env命令即可全部列出系统预设的全部系统变量了。不过登录的用户不一样这些环境变量的值也不一样。当前显示的就是root这个账户的环境变量了。下面笔者简单介绍一下常见的环境变量：PATH	决定了shell将到哪些目录中寻找命令或程序HOME	当前用户主目录HISTSIZE	历史记录数LOGNAME	当前用户的登录名HOSTNAME	指主机的名称SHELL	前用户Shell类型LANG	语言相关的环境变量，多语言可以修改此环境变量MAIL	当前用户的邮件存放目录PWD	当前目录env命令显示的变量只是环境变量，系统预设的变量其实还有很多，你可以使用set命令把系统预设的全部变量都显示出来。限于篇幅，笔者在上例中并没有把所有显示结果都截图。set不仅可以显示系统预设的变量，也可以连同用户自定义的变量显示出来。用户自定义变量？是的，用户自己同样可以定义变量。虽然你可以自定义变量，但是该变量只能在当前shell中生效，不信你再登录一个shell试试？使用bash命令即可再打开一个shell，此时先前设置的myname变量已经不存在了，退出当前shell回到原来的shell，myname变量还在。那要想设置的变量一直生效怎么办？有两种情况：1） 要想系统内所有用户登录后都能使用该变量需要在/etc/profile文件最末行加入 “export  myname=Aming” 然后运行”source /etc/profile”就可以生效了。此时你再运行bash命令或者直接su - test账户看看。2）只想让当前用户使用该变量需要在用户主目录下的.bashrc文件最后一行加入“export  myname=Aming” 然后运行”source .bashrc”就可以生效了。这时候再登录test账户，myname变量则不会生效了。上面用的source命令的作用是，讲目前设定的配置刷新，即不用注销再登录也能生效。笔者在上例中使用”myname=Aming”来设置变量myname，那么在linux下设置自定义变量有哪些规则呢？a. 设定变量的格式为”a=b”，其中a为变量名，b为变量的内容，等号两边不能有空格；b. 变量名只能由英、数字以及下划线组成，而且不能以数字开头；c. 当变量内容带有特殊字符（如空格）时，需要加上单引号；有一种情况，需要你注意，就是变量内容中本身带有单引号，这就需要用到双引号了。d. 如果变量内容中需要用到其他命令运行结果则可以使用反引号；e. 变量内容可以累加其他变量的内容，需要加双引号；在这里如果你不小心把双引号加错为单引号，将得不到你想要的结果通过上面几个例子也许你能看得出，单引号和双引号的区别：用双引号时不会取消掉里面出现的特殊字符的本身作用（这里的$），而使用单引号则里面的特殊字符全部失去它本身的作用。在前面的例子中笔者多次使用了bash命令，如果在当前shell中运行bash指令后，则会进入一个新的shell，这个shell就是原来shell的子shell了，不妨你用pstree指令来查看一下。pstree这个指令会把linux系统中所有进程通过树形结构打印出来。限于篇幅笔者没有全部列出，你可以直接输入pstree查看即可。在父shell中设定一个变量后，进入子shell后该变量是不会生效的，如果想让这个变量在子shell中生效则要用到export指令，笔者曾经在前面用过。export其实就是声明一下这个变量的意思，让该shell的子shell也知道变量abc的值是123.如果export后面不加任何变量名，则它会声明所有的变量。在最后面连同我们自定义的变量都被声明了。前面光讲如何设置变量，如果想取消某个变量怎么办？只要输入”unset  变量名”即可。用unset  abc后，再echo  $abc则不再输出任何内容。【系统环境变量与个人环境变量的配置文件】上面讲了很多系统的变量，那么在linux系统中，这些变量被存到了哪里呢，为什么用户一登陆shell就自动有了这些变量呢？/etc/profile ：这个文件预设了几个重要的变量，例如PATH, USER, LOGNAME, MAIL, INPUTRC, HOSTNAME, HISTSIZE, umas等等。/etc/bashrc ：这个文件主要预设umask以及PS1。这个PS1就是我们在敲命令时，前面那串字符了，例如笔者的linux系统PS1就是 [root@localhost ~]# ，你不妨看一下PS1的值。\u就是用户，\h 主机名， \W 则是当前目录，\$就是那个’#’了，如果是普通用户则显示为’$’除了两个系统级别的配置文件外，每个用户的主目录下还有几个这样的隐藏文件：.bash_profile ：定义了用户的个人化路径与环境变量的文件名称。每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。.bashrc ：该文件包含专用于你的shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。例如你可以将用户自定义的alias或者自定义变量写到这个文件中。.bash_history ：记录命令历史用的。.bash_logout ：当退出shell时，会执行该文件。可以把一些清理的工作放到这个文件中。 【linux shell中的特殊符号】你在学习linux的过程中，也许你已经接触过某个特殊符号，例如”*”，它是一个通配符号，代表零个或多个字符或数字。下面笔者就说一说常用到的特殊字符。1.  *  ：代表零个或多个字符或数字。test后面可以没有任何字符，也可以有多个字符，总之有或没有都能匹配出来。2.  ?  ：只代表一个任意的字符不管是数字还是字母，只要是一个都能匹配出来。3.  #  ：这个符号在linux中表示注释说明的意思，即”#”后面的内容linux忽略掉。在命令的开头或者中间插入”#” ，linux都会忽略掉的。这个符号在shell脚本中用的很多。4.  \  ：脱意字符，将后面的特殊符号（例如”*” ）还原为普通字符。5.  |  ：管道符，前面多次说过，它的作用在于将符号前面命令的结果丢给符号后面的命令。这里提到的后面的命令，并不是所有的命令都可以的，一般针对文档操作的命令比较常用，例如cat, less, head, tail, grep, cut, sort, wc, uniq, tee, tr, split, sed, awk等等，其中grep, sed, awk为正则表达式必须掌握的工具，在后续内容中详细介绍。6.  $ ：除了用于变量前面的标识符外，还有一个妙用，就是和’!’结合起来使用。‘!$’表示上条命中中最后一个变量（也许称为变量不合适，总之就是上条命令中最后出现的那个东西）例如上边命令最后是test.txt那么在当前命令下输入!$则代表test.txt。1）grep ：过滤一个或多个字符，将会在后续内容中详细介绍其用法。2) cut ：截取某一个字段语法：cut  -d  “分隔字符”  [-cf] n  这里的n是数字-d ：后面跟分隔字符，分隔字符要用双引号括起来-c ：后面接的是第几个字符-f ：后面接的是第几个区块-d 后面跟分隔字符，这里使用冒号作为分割字符，-f 1 就是截取第一段，-f和1之间的空格可有可无。-c 后面可以是1个数字n，也可以是一个区间n1-n2，还可以是多个数字n1,n2,n33) sort ：用做排序语法：sort  [-t 分隔符]  [-kn1,n2]  [-nru]  这里的n1 < n2-t 分隔符 ：作用跟cut的-d一个意思-n ：使用纯数字排序-r ：反向排序-u ：去重复-kn1,n2 ：由n1区间排序到n2区间，可以只写-kn1，即对n1字段排序4) wc ：统计文档的行数、字符数、词数，常用的选项为：-l ：统计行数-m ：统计字符数-w ：统计词数5） uniq ：去重复的行，笔者常用的选项只有一个：-c ：统计重复的行数，并把行数写在前面有一点需要注意，在进行uniq之前，需要先用sort排序然后才能uniq，否则你将得不到你想要的，笔者上面的试验当中已经是排序过所以省略掉那步了。6）tee ：后跟文件名，类似与重定向”>”，但是比重定向多了一个功能，在把文件写入后面所跟的文件中的同时，还显示在屏幕上。7）tr ：替换字符，常用来处理文档中出现的特殊符号，如DOS文档中出现的^M符号。常用的选项有两个：-d ：删除某个字符，-d 后面跟要删除的字符-s ：把重复的字符去掉最常用的就是把小写变大写： tr  ‘[a-z]’ ‘[A-Z]’当然替换一个字符也是完全可以的。不过替换、删除以及去重复都是针对一个字符来讲的，有一定局限性。如果是针对一个字符串就不再管用了，所以笔者建议只是简单了解这个tr即可，以后你还会学到更多可以实现针对字符串操作的工具。8）split ：切割文档，常用选项：-b ：依据大小来分割文档，单位为byte格式如上例，后面的passwd为分割后文件名的前缀，分割后的文件名为passwdaa, passwdab, passwdac … -l ：依据行数来分割文档6.  ； ：分号。平时我们都是在一行中敲一个命令，然后回车就运行了，那么想在一行中运行两个或两个以上的命令如何呢？则需要在命令之间加一个”;”了。7. ~ ：用户的家目录，如果是root则是 /root ，普通用户则是 /home/username8. & ：如果想把一条命令放到后台执行的话，则需要加上这个符号。通常用于命令运行时间非常长的情况。使用jobs可以查看当前shell中后台执行的任务。用fg可以调到前台执行。这里的sleep命令就是休眠的意思，后面跟数字，单位为秒，常用语循环的shell脚本中。此时你按一下CTRL +z 使之暂停，然后再输入bg可以再次进入后台执行。如果是多任务情况下，想要把任务调到前台执行的话，fg后面跟任务号，任务号可以使用jobs命令得到。9. >, >>, 2>, 2>> ：前面讲过重定向符号> 以及>>　分别表示取代和追加的意思，然后还有两个符号就是这里的2> 和 2>>　分别表示错误重定向和错误追加重定向，当我们运行一个命令报错时，报错信息会输出到当前的屏幕，如果想重定向到一个文本里，则要用2>或者2>>。10. [ ] ：中括号，中间为字符组合，代表中间字符中的任意一个11.  && 与 || 在上面刚刚提到了分号，用于多条命令间的分隔符。另外还有两个可以用于多条命令中间的特殊符号，那就是 “&&”和”||”。下面笔者把这几种情况全列出：1)  command1 ; command22)  command1 && command23)  command1 || command2使用”;”时，不管command1是否执行成功都会执行command2； 使用”&&”时，只有command1执行成功后，command2才会执行，否则command2不执行；使用”||”时，command1执行成功后command2 不执行，否则去执行command2，总之command1和command2总有一条命令会执行。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

配置Tomcat
第二十二章 配置Tomcat【关于Tomcat】目前有很多网站使用jsp的程序编写，所以解析jsp的程序就必须要有相关的软件来完成。Tomcat就是用来解析jsp程序的一个软件， Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应对HTML 页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。【安装Tomcat】Tomcat的安装分为两个步骤：安装JDK；安装Tomcat。JDK(Java Development Kit)是Sun Microsystems针对Java开发员的产品。自从Java推出以来，JDK已经成为使用最广泛的Java SDK。JDK 是整个Java的核心，包括了Java运行环境，Java工具和Java基础的类库。所以要想运行jsp的程序必须要有JDK的支持，理所当然安装Tomcat的前提是安装好JDK。 1. 安装JDK下载jdk-6u23-linux-i586.bin cd /usr/local/src/wget http://dl.dropbox.com/u/182853/jdk-6u23-linux-i586.bin（如果该版本不合适请到下面的官方网站下载适合你的版本）：https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jdk-6u23-oth-JPR@CDS-CDS_Developerchmod a+x jdk-6u23-linux-i586.binsh jdk-6u23-linux-i586.bin此时会出现JDK 安装授权协议。可以一路按Enter浏览，当出现Do you agree to the above license terms? [yes or no] 的字样,输入yes即可。mv  jdk1.6.0_23  /usr/local/ 2. 设置环境变量vim /etc/profile在末尾输入以下内容#set java environmentJAVA_HOME=/usr/local/jdk1.6.0_23/JAVA_BIN=/usr/local/jdk1.6.0_23/binJRE_HOME=/usr/local/jdk1.6.0_23/jrePATH=$PATH:/usr/local/jdk1.6.0_23/bin:/usr/local/jdk1.6.0_23/jre/binCLASSPATH=/usr/local/jdk1.6.0_23/jre/lib:/usr/local/jdk1.6.0_23/lib:/usr/local/jdk1.6.0_23/jre/lib/charsets.jarexport  JAVA_HOME  JAVA_BIN JRE_HOME  PATH  CLASSPATH执行命令source /etc/profile，使配置立即生效source /etc/profile检测是否设置正确：java –version如果显示如下内容，则配置正确。java version "1.4.2"gij (GNU libgcj) version 4.1.2 20080704 (Red Hat 4.1.2-46) Copyright (C) 2006 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 3.安装Tomcatcd /usr/local/src/wget http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.14/bin/apache-tomcat-7.0.14.tar.gz如果觉得这个版本不适合你，请到tomcat官方网站下载适合你的版本。tar zxvf apache-tomcat-7.0.14.tar.gzmv apache-tomcat-7.0.14 /usr/local/tomcatcp -p /usr/local/tomcat/bin/catalina.sh /etc/init.d/tomcatvim /etc/init.d/tomcat 在第二行加入以下内容：# chkconfig: 2345 63 37# description: tomcat server init script JAVA_HOME=/usr/local/jdk1.6.0_23/CATALINA_HOME=/usr/local/tomcat chmod 755 /etc/init.d/tomcatchkconfig --add tomcatchkconfig tomcat on 启动tomcat：service tomcat start查看是否启动成功：ps aux |grep tomcat如果有进程的话，请在浏览器中输入http://IP:8080/ 你会看到tomcat的主界面。【配置tomcat】在配置tomcat前，先来看看tomcat的几个目录：find /usr/local/tomcat/ -maxdepth 1 -type d （-maxdepth的作用指定目录级数，后边跟1代表只查找1级目录）/usr/local/tomcat//usr/local/tomcat/lib       # tomcat的库文件目录/usr/local/tomcat/temp           # 临时文件存放目录/usr/local/tomcat/webapps             # web应用目录，也就是我们访问的web程序文件所在目录/usr/local/tomcat/conf             # 配置文件目录/usr/local/tomcat/logs             # 日志文件所在目录/usr/local/tomcat/work            # 存放JSP编译后产生的class文件/usr/local/tomcat/bin               # tomcat的脚本文件Tomcat的主配置文件为/usr/local/tomcat/conf/server.xml1. 配置tomcat服务的访问端口。默认是8080，如果你想修改为80，则需要修改server.xml文件。找到 <Connector port="8080" protocol="HTTP/1.1"修改为：<Connector port="80" protocol="HTTP/1.1"2. 配置新的虚拟主机cd /usr/local/tomcat/conf/vim server.xml找到</Host>，下一行插入新的<Host>，内容如下：      <Host name="www.example.cn" appBase="/data/tomcatweb"            unpackWARs="false" autoDeploy="true"            xmlValidation="false" xmlNamespaceAware="false">      <Context path="" docBase="./" debug="0" reloadable="true" crossContext="true"/>      </Host>完成后，重启tomcatservice tomcat stop; service tomcat start测试新建的虚拟主机，首先需要修改你电脑的hosts文件vim /data/tomcatweb/test.jsp 加入以下内容：<html><body><center>Now time is: <%=new java.util.Date()%></center></body></html>保存后，在你的浏览器里输入 http://www.example.cn/test.jsp 看是否访问到如下内容：Now time is: Thu Jun 02 14:32:34 CST 2011 上面的test.jsp就是要显示当前系统的时间。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

配置samba服务器
第二十三章  配置samba服务器以前我们在windows上共享文件的话，只需右击要共享的文件夹然后选择共享相关的选项设置即可。然而如何实现windows和linux的文件共享呢？这就涉及到了samba服务了，这个软件配置起来也不难，使用也非常简单。 【samba配置文件smb.conf】一般你装系统的时候会默认安装samba，如果没有安装，只需要运行这个命令安装(CentOS)：“yum install -y samba samba-client”Samba的配置文件为/etc/samba/smb.conf，通过修改这个配置文件来完成我们的各种需求。打开这个配置文件，你会发现很多内容都用”#”或者”;”注视掉了。先看一下未被注释掉的部分：[global]        workgroup = MYGROUP        server string = Samba Server Version %v        security = user        passdb backend = tdbsam        load printers = yes        cups options = raw[homes]        comment = Home Directories        browseable = no        writable = yes[printers]        comment = All Printers        path = /var/spool/samba        browseable = no        guest ok = no        writable = no        printable = yes主要有以上三个部分：[global], [homes], [printers]。 [global] 定义全局的配置，”workgroup”用来定义工作组，相信如果你安装过windows的系统，你会对这个workgroup不陌生。一般情况下，需要我们把这里的”MYGROUP”改成”WORKGROUP”（windows默认的工作组名字）。security = user #这里指定samba的安全等级。关于安全等级有四种：share：用户不需要账户及密码即可登录samba服务器user：由提供服务的samba服务器负责检查账户及密码（默认）server：检查账户及密码的工作由另一台windows或samba服务器负责domain：指定windows域控制服务器来验证用户的账户及密码。passdb backend = tdbsam  # passdb backend （用户后台），samba有三种用户后台：smbpasswd, tdbsam和ldapsam.smbpasswd：该方式是使用smb工具smbpasswd给系统用户（真实用户或者虚拟用户）设置一个Samba 密码，客户端就用此密码访问Samba资源。smbpasswd在/etc/samba中，有时需要手工创建该文件。tdbsam：使用数据库文件创建用户数据库。数据库文件叫passdb.tdb，在/etc/samba中。passdb.tdb用户数据库可使用smbpasswd –a创建Samba用户，要创建的Samba用户必须先是系统用户。也可使用pdbedit创建Samba账户。pdbedit参数很多，列出几个主要的：pdbedit –a username：新建Samba账户。pdbedit –x username：删除Samba账户。pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。pdbedit –Lv：列出Samba用户列表详细信息。pdbedit –c “[D]” –u username：暂停该Samba用户账号。pdbedit –c “[]” –u username：恢复该Samba用户账号。ldapsam：基于LDAP账户管理方式验证用户。首先要建立LDAP服务，设置“passdb backend = ldapsam:ldap://LDAP Server”load printers 和 cups options 两个参数用来设置打印机相关。除了这些参数外，还有几个参数需要你了解：netbios name = MYSERVER  # 设置出现在“网上邻居”中的主机名hosts allow = 127.  192.168.12.  192.168.13. # 用来设置允许的主机，如果在前面加”;”则表示允许所有主机log file = /var/log/samba/%m.log #定义samba的日志，这里的%m是上面的netbios namemax log size = 50 # 指定日志的最大容量，单位是K [homes] 该部分内容共享用户自己的家目录，也就是说，当用户登录到samba服务器上时实际上是进入到了该用户的家目录，用户登陆后，共享名不是homes而是用户自己的标识符，对于单纯的文件共享的环境来说，这部分可以注视掉。 [printers] 该部分内容设置打印机共享。 【samba实践】注意：在试验之前，请先检测selinux是否关闭，否则可能会试验不成功。关于如何关闭selinux请查看第十五章 linux系统日常管理的“linux的防火墙”部分 1. 共享一个目录，任何人都可以访问，即不用输入密码即可访问，要求只读。打开samba的配置文件/etc/samba/smb.conf [global]部分把”MY GROUP”改成”WORKGROUP”把” security = user” 修改为 “security = share”然后在文件的最末尾处加入以下内容：[share]        comment = share all        path = /tmp/samba        browseable = yes        public = yes        writable = no mkdir /tmp/sambachmod 777 /tmp/samba启动samba服务/etc/init.d/smb start 测试：首先测试你配置的smb.conf是否正确，用下面的命令testparm如果没有错误，则在你的windows机器上的浏览器中输入 file://IP/share 看是否能访问 2. 共享一个目录，使用用户名和密码登录后才可以访问，要求可以读写打开samba的配置文件/etc/samba/smb.conf [global] 部分内容如下：[global]        workgroup = WORKGROUP        server string = Samba Server Version %v        security = user        passdb backend = tdbsam        load printers = yes        cups options = raw 然后加入以下内容：[myshare]        comment = share for users        path = /samba        browseable = yes        writable = yes        public = no 保存配置文件，创建目录：mkdir /sambachmod 777 /samba然后添加用户。因为在[globa]中” passdb backend = tdbsam”，所以要使用” pdbedit” 来增加用户，注意添加的用户必须在系统中存在。useradd  user1 user2pdbedit -a user1  # 添加user1账号，并定义其密码pdbedit -a user2pdbedit -L # 列出所有的账号测试：打开IE浏览器输入file://IP/myshare/ 然后输入用户名和密码 3. 使用linux访问samba服务器Samba服务在linux下同样可以访问。前提是你的linux安装了samba-client软件包。安装完后就可以使用smbclient命令了。smbclient //IP/共享名  -U 用户名  如：[root@localhost]# smbclient //10.0.4.67/myshare/ -U user1Password:Domain=[LOCALHOST] OS=[Unix] Server=[Samba 3.0.33-3.29.el5_6.2]smb: \>出现如上所示的界面。可以打一个”?”列出所有可以使用的命令。常用的有cd, ls, rm, pwd, tar, mkdir, chown, get, put等等，使用help + 命令可以打印该命令如何使用，其中get是下载，put是上传。另外的方式就是通过mount挂载了：如：mount -t cifs //10.0.4.67/myshare /mnt -o username=user1,password=123456格式就是这样，要指定-t cifs //IP/共享名 本地挂载点  -o后面跟username 和 password挂载完后就可以像使用本地的目录一样使用共享的目录了。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

windows下把本地代码同步到github上
1、在windows上安装gith客户端——msysgit，网址http://msysgit.github.io/下载。


2、注册github帐号，然后在github上创建仓库








3、然后在本地创建一个文件夹(名字和github上的仓库名一样，例如test)，把要同步的代码文件放进去


4、最后，按照github上的提示命令执行，如下：
 1）本地进入到test目录，执行git init
 2）执行 git add .  把本地仓库中所有文件添加到版本库；
 3）提交：git  commit -m "first"
 4）执行：git remote add origin https://github.com/lanjingling/test.git
 5）提交：git push -u origin master 
  输入用户名、密码 即可

版权声明：本文为博主原创文章，未经博主允许不得转载。

配置squid服务
第二十一章配置squid服务【什么是squid】Squid是比较知名的代理软件，它不仅可以跑在linux上还可以跑在windows以及Unix上，它的技术已经非常成熟。目前使用Squid的用户也是十分广泛的。Squid与Linux下其它的代理软件如Apache、Socks、TIS FWTK和delegate相比，下载安装简单，配置简单灵活，支持缓存和多种协议。Squid的缓存功能相当好用，不仅可以减少带宽的占用，同样也大大降低了后台的WEB服务器的磁盘I/O的压力。Squid接收用户的下载申请，并自动处理所下载的数据。也就是说，当一个用户象要下载一个主页时，它向Squid发出一个申请，要Squid替它下载，然后Squid 连接所申请网站并请求该主页，接着把该主页传给用户同时保留一个备份，当别的用户申请同样的页面时，Squid把保存的备份立即传给用户，使用户觉得速度相当快。 Squid将数据元缓存在内存中，同时也缓存DNS查寻的结果，除此之外，它还支持非模块化的DNS查询，对失败的请求进行消极缓存。Squid支持SSL，支持访问控制。由于使用了ICP，Squid能够实现重叠的代理阵列，从而最大限度的节约带宽。 Squid对硬件的要求是内存一定要大，不应小于128M，硬盘转速越快越好，最好使用服务器专用SCSI 硬盘，处理器要求不高，400MH以上既可。【安装squid】wget http://www.squid-cache.org/Versions/v2/2.6/squid-2.6.STABLE20.tar.gztar zxvf squid-2.6.STABLE20.tar.gzcd squid-2.6.STABLE20ulimit -HSn 65535useradd  squid编译参数./configure --prefix=/usr/local/squid \--disable-dependency-tracking \--enable-dlmalloc \--enable-gnuregex \--disable-carp \--enable-async-io=240 \--with-pthreads \--enable-storeio=ufs,aufs,diskd,null \--disable-wccp \--disable-wccpv2 \--enable-kill-parent-hack \--enable-cachemgr-hostname=localhost \--enable-default-err-language=Simplify_Chinese \--with-build-environment=POSIX_V6_ILP32_OFFBIG \--with-maxfd=65535 \--with-aio \--disable-poll \--enable-epoll \--enable-linux-netfilter \--enable-large-cache-files \--disable-ident-lookups \--enable-default-hostsfile=/etc/hosts \--with-dl \--with-large-files \--enable-removal-policies=heap,lru \--enable-delay-pools \--enable-snmp \--disable-internal-dnsmake && make install 关于squid的版本，有必要提一下，目前squid最新版本已经到了3.1了，但是笔者认为2.6版本比较好用，如果你有兴趣可以研究一下3.1。【squid配置】编辑配置文件 /usr/local/squid/etc/squid.conf把原来配置文件删除，替换成：http_port 80 transparentcache_replacement_policy lru  #如果有多个（下面两行）缓存目录，则需要写这个参数cache_dir aufs  /cache1 8192 16 256  #缓存目录1 /cache1 大小为8Gcache_dir aufs /cache2 4096 16 256  #缓存目录2 /cache2 大小为4G## 上面两行定义了缓存目录，这个缓存目录可以只有一个，也可以定义很多个。cache_mem 2048 MB  #分配多少内存给squid，建议留至少512M给系统，如果你是虚拟机内存很小，只作为试验用的话，那就分一半内存给squidmaximum_object_size 2048 KB  #缓存的文件最大不能超过2Mmaximum_object_size_in_memory 512 KB #缓存在内存中的文件最大不超过512kvisible_hostname cache.example.com  #显示给用户的主机名client_persistent_connections off  #client端关闭长连接server_persistent_connections on  #server端打开长连接memory_pools onmemory_pools_limit 1024 MBforwarded_for onlog_icp_queries offcache_mgr  cache@example.com  #定义管理员的mail为cache@example.comvia onhttpd_suppress_version_string offcache_effective_user squid   #定义以squid用户的身份运行squidcache_effective_group squiderror_directory /usr/local/squid/share/errors/Simplify_Chineseicon_directory /usr/local/squid/share/iconsmime_table /usr/local/squid/etc/mime.confie_refresh offtcp_recv_bufsize 32 KBacl all src 0.0.0.0/0.0.0.0acl localhost src 127.0.0.0/8 acl Mgr_ip src 127.0.0.0/8 acl allow_ip dst 127.0.0.0/8  192.168.0.0/16  #定义允许代理的web的IP或者IP段acl PURGE method PURGEacl Safe_ports port 80 8080acl CONNECT method CONNECTacl manager proto cache_objectacl HTTP proto HTTPhttp_access allow allow_iphttp_access allow manager Mgr_iphttp_access deny managerhttp_access deny PURGEhttp_access deny !Safe_portshttp_access deny allicp_access deny allipcache_size 1024ipcache_low 90ipcache_high 95memory_replacement_policy lruhosts_file /etc/hostsrequest_header_max_size 128 KBhierarchy_stoplist cgi-bin ? \.php \.htmlacl QUERY urlpath_regex cgi-bin \? \.php \.htmlcache deny QUERYquick_abort_min -1 KBquick_abort_max 32 KBquick_abort_pct 95# error page#error_map http://www.92csz.com/404.html 403#deny_info http://www.92csz.com/error.html cctv_Domain# timeoutpeer_connect_timeout 20 secondsconnect_timeout 20 secondsread_timeout 60 secondsrequest_timeout 20 secondspconn_timeout 20 secondsshutdown_lifetime 5 secondsstrip_query_terms officp_port 0# logfileemulate_httpd_log onlogformat combined %>a %ui %un [%tl] "%rm %ru HTTP/%rv" %Hs %<st "%{Referer}>h" "%{User-Agent}>h" %Ss:%Sh#access_log /log/squid-log/access.log combinedcache_store_log /dev/nullcache_log /var/log/squid/cache.loglogfile_rotate 12# MISCELLANEOUSstore_objects_per_bucket 15client_db off 修改完配置文件后保存，然后初始化squidmkdir /cache1  /cache2 /var/log/squidchown -R squid:squid /cache1 /cache2 /var/log/squid/usr/local/squid/sbin/squid  -z  # 用来生成cache目录，如果你的配置文件配置出错，往往会在初始化的时候报错，错误信息会直接显示在屏幕上。初始化成功后，就可以启动squid了，启动命令为：nohup /usr/local/squid/bin/RunCache &启动后，可以去看看cache.log 在这个日志中，你可以看到很多关于squid的信息，当然也包括一些错误日志。如果想开机启动则需要在/etc/rc.d/rc.local中最后加入一行/usr/local/bin/RunCache &到这里算是配置完成了，但是还有一个问题，就是如何定义被代理的web以及域名？单单看配置文件并没有说代理的web是哪一个。确实，这个配置文件其实可以代理多台web，只要你在/etc/hosts中定义要代理的域名以及IP即可，hosts格式在前面已经介绍过。笔者要提醒你的是，如果是一台web上的多个域名，请不要写一行，虽然hosts是允许的，但是如果写成一个IP对应多个域名，squid代理时就会出错。所以有几个域名就要写几行。更改/etc/hosts后要重启squid才能生效：/usr/local/squid/sbin/squid  -krec在重启前可以先检测一下，是否有错，命令为：/usr/local/squid/sbin/squid –kcheck如果没有错，则不会显示任何信息，否则会显示一些信息出来。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

﻿﻿﻿﻿双机热备数据库备份脚本 v2.1
Text
/*
THIS4.0 数据库备份脚本

[作者] Rulition QQ:7355157

[版本] v2.1

[修改]
       2010年5月21日15:35:13 完成
       2010年5月24日11:35:13 细节修改
       2010年5月25日11:31:13 增加[完整备份]前的一致性检查
       2010年5月27日10:31:13 检查差异备份的大小,避免过大文件影响差异备份.
       2010年5月28日11:14:15 补备份时查看最近是否已做过完全备份.
       2010年10月17日21:58:32 切换@备份路径[如果是第一次运行,可以 Select @备份路径 = @备份路径1]
       2011年03月17日15:00:00 增加单双月备份,增加完全备份频次,修证(30)删除过期备份文件
       2012-10-26 14:53 修改 月备份 到 \\202.202.202.26\Y$\This_BackUp
       2012-10-31 10:00 增加 正常运行时 显示 ‘可用磁盘空间不足’的中间计算结果。
       2015年03月31日10:00:00 修改说明，并将 DBCC 改成晚上执行.
----
       2015-04-03 09:00 v2.0 修改流程，将外部引用的程序放在前部，处理参数校验，增加更多的说明，差异备份文件太大时改为提示手工处理。

[环境] SQL2000 和 SQL2005 中测试通过

[来源] http://blog.csdn.net/rulition/article/details/47999561

[说明]
	利用双机热备的磁盘空间,将 THIS4.0 数据库的备份计划设置为以下方式:

	"差异备份"-每N小时执行一次,分别存储到 1# 和 2# 的 C: , 保留N天。
	"完整备份"-按可用空间，指定在 12:25 21:25 03:25 ,存储到 群集空间，保留X天。

        例如：本脚目前的设置状态为:

              1\按 SQL 计划任务的要求，每3小时的25分时运行一次，在 12:25、21:25、03:25 这三个时间点进行完整备份，其他时间点进行差异备份。
              2\每月1号的月备份后缀名不再是.bak 而是 .ybf。（还可以按单双月，将备份放在不同的地方.）
              3\数据库的一致性检查放在下半夜进行。

[特点]
	1）备份频度由 SQL 计划任务来调节
	2）操作日志由 SQL 计划任务通过追加方式进行收集 (详见计划任务的高级选项)
	3) 先删除过期备份文件，然后再执行备份操作，与 SQL 操作模式相反 
  	 （也可以修改 (备份前的准备工作) 这一小节，与 SQL 操作模式一样。）
	4）自动判断并建立备份文件夹、按保留时间删除过期备份文件
	5）在执行备份操作前，自动检查空间是否够用，自动回避[差异备份][完整备份]同时进行，并进行一致性检查。
	6）检查差异备份的大小,避免过大文件影响差异备份.并自动做一次[完整备份]

[注意]
	1）脚本中大量使用 MS-DOS 命令，如果不是很熟悉，请不要修改！
	2）为删除过期备份文件使用了 FORFILES.exe 命令，否则无法执行。
	   这个可以在 Win2000 环境下使用的命令，是 FORFILES v 1.1 - emmanubo@microsoft.com - 4/98
	   与 Win7 系统自带的中文版，在使用参数上有一点区别，使用时请注意！
	3）为减少操作日志大小，在 (一致性检查) 这一小节调用了 isql.exe ，这个文件在 SQL2005 中没有，
	   可以从 SQL2000 系统中拷贝过来，使用时注意路径。 
        4) 所有外部引用的程序(含路径)，必须在 1#机 和 2#机 存放在同一路径下，且此程序不缺少相应的
           支持文件，否则，程序将无法正常运行。
        5) 所需 FORFILES.exe 和 isql.exe 可从以下地址获取：http://download.csdn.net/detail/rulition/9048595


[参考]
	1)清理系统备份日志、 删除备份作业的历史记录
	2)关于SQL2005 远程备份

	*以上资料详见脚本最后一部分

exec usp_job_backup_this4 0

*/


CREATE Proc usp_job_backup_this4
(@Is_Run int = 0 )	---- 0-测试运行并显示操作记录 ,当 @Is_Run = 1 时，自动执行所有操作。
AS
----
----
SET NOCOUNT ON
----
Select GetDate() AS '【开始时间】'
--- Test
-- Declare @Is_Run int
-- Select @Is_Run = 0
----
IF @Is_Run = 0 Print '【测试状态】'
----
----
/*设置外部引用程序(含路径)*/
declare @ISQL varchar(50)
declare @FORFILES varchar(50)
 Select @ISQL='C:\THIS_BAT\isql.exe'
 Select @FORFILES='C:\THIS_BAT\forfiles.exe'
----开启 xp_cmdshell 支持
-- Exec sp_configure 'show advanced options', 1
-- reconfigure with override
-- Exec sp_configure 'xp_cmdshell', 1 
-- reconfigure with override
-- Exec sp_configure 'show advanced options', 0
-- reconfigure with override
----参数检查
declare @SQL varchar(8000)
 Select @SQL='dir '+@ISQL
declare @result int
   Exec @result = xp_cmdshell @SQL,NO_OUTPUT
IF (@result = 1)
        Begin
        Print '错误:没有找到外部引用程序: '+@ISQL
        Return
        End
Select @SQL=Replace(@SQL,@ISQL,@FORFILES)
  Exec @result = xp_cmdshell @SQL,NO_OUTPUT
IF (@result = 1)
        Begin
        Print '错误:没有找到外部引用程序: '+@FORFILES
        Return
        End
----
----
/*设置运行参数*/
Declare @数据库名 varchar(100)
Declare @备份路径 varchar(100)
Declare @备份文件 varchar(100)
Declare @备份方式 varchar(50)
Declare @保留时间 varchar(10)
Declare @备份语句 varchar(1000)
----
 Select @数据库名 = 'THIS4'
 Select @备份文件 = Convert(char(8),getdate(),112) + replace(convert(char(6),getdate(),108),':','')
----
----
/*完整备份-参数设置*/
IF Convert(varchar,getdate(),24) between '03:00:00' and '04:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.26\Y$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	----每月1号的备份其后缀名改为 .ybf
----	IF ( DAY(getdate())=1 and MONTH(getdate())%2 = 1 )	----单月
----	IF ( DAY(getdate())=1 and MONTH(getdate())%2 = 0 )	----双月
        IF DAY(getdate())=1
		Begin
                Select @备份方式 =  @备份方式 +'【月备份】'
	        Select @备份路径 = '\\202.202.202.26\Y$\This_BackUp'
		Select @备份文件 = Replace(@备份文件,'.bak','.ybf')
		Select @保留时间 = '9600'
		End
	End
----
ELSE
IF Convert(varchar,getdate(),24) between '12:00:00' and '13:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.46\X$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	End
----
ELSE
IF Convert(varchar,getdate(),24) between '21:00:00' and '22:00:00'
	Begin
	Select @备份方式 = '完整备份'
	Select @备份路径 = '\\202.202.202.26\Z$\This_BackUp'
	Select @备份文件 = @备份文件+'.bak'
	Select @保留时间 = '2'
	End
ELSE
----
----
/*差异备份-参数设置（如需时间限制，可以参考上面的方法。）*/
	Begin
	 Select @备份方式 = '差异备份'
	Declare @备份路径1 varchar(100)	
	Declare @备份路径2 varchar(100)	
	 Select @备份路径1 = '\\202.202.202.32\C$\This_BackUp'
	 Select @备份路径2 = '\\202.202.202.33\C$\This_BackUp'
	 Select @备份文件  = @备份文件+'.dif'
	 Select @保留时间 = '1'
	End
----
----
Select  '★' + @备份方式 + '★' 
----
----
/*参数检查*/
----检查@数据库名
IF not exists ( Select 1 from master.dbo.sysdatabases where name=@数据库名) 
        Begin
        Select '错误:没有找到指定的数据库名，或者是当前实例区分大小写！'
        Return
        End
----提取上次备份的有效数据
	Declare @backup_set_id int		----备份操作的ID号
	Declare @backup_size   numeric		----备份文件大小，其结果/1024才能与电脑看到的一致[单位:KB]
	Declare @description   nvarchar(510)	----备份描述
	Declare @name	       nvarchar(256)	----备份名称，后面跟上'_KB'+当时备份时的库文件大小[单位:KB]
        Declare @backup_finish_date datetime    ----备份完成时间
        Declare @expiration_date datetime       ----备份过期时间
        ----初值设置
        Select @backup_size=1, @description='没有找到有效可用的备份文件', @name='无'
        ----按备份方式提供取最后一次数据
	 Select top 1 @backup_set_id = backup_set_id , @backup_size = isnull(backup_size/1024,1) , 
		      @description = [description] ,   @name = [name] , @backup_finish_date = backup_finish_date , @expiration_date = expiration_date
	  from msdb.dbo.backupset (NOLOCK)
	 where type = case when @备份方式 = '差异备份' then 'I' ELSE 'D' end
	   and database_name = @数据库名
           and expiration_date > getdate() ----有效数据
	 order by backup_set_id DESC
        ----显示中间数据
        IF @Is_Run = 0 
                Begin
                Print '上次备份的有效数据'
                Select @backup_set_id as 'ID号', @backup_size as '文件大小', @description as '描述', @name as '名称',
                       @backup_finish_date as '完成时间', @expiration_date as '过期时间'
                End
----处理@备份路径
IF @备份方式 = '差异备份'
	Begin
	----切换@备份路径
	Select @备份路径 = @备份路径2
	IF @description = @备份路径1+'\'+@数据库名 Select @备份路径 = @备份路径2 
	IF @description = @备份路径2+'\'+@数据库名 Select @备份路径 = @备份路径1
           else Print '【上次备份】' + @description 
	End
        Print '【本次备份】' + @备份路径 + '\' + @数据库名
----检查@备份路径
 Select @SQL = ' IF not exist ' + @备份路径 +'\'+@数据库名 + '\*.* md '+ @备份路径 +'\' +@数据库名 
   Exec @result = xp_cmdshell @SQL , NO_OUTPUT
	IF (@result = 1)
		Begin
		Print('错误:无法访问指定的备份路径 '+ @备份路径+' (原因：1、没有访问权限。2、目标磁盘不存在。) ' )
		Print( @SQL )
		Return
		End
----
----
Print  '【备份文件】' + @备份文件
----
----
/*备份前的准备工作*/
	---------------------------------------------------------------------------------------------
	----(10)获取@备份路径所在分区的剩余空间大小[已换成KB,近似值= 可用字节/1024*0.95 ]
	Select @SQL=' dir '+ @备份路径 + ' | find "可用字节" > "%temp%\Rulition" '
	  Exec xp_cmdshell @SQL , NO_OUTPUT
	  Exec xp_cmdshell ' for /f "tokens=3 delims= " %i in (%temp%\Rulition) do @echo %i > "%temp%\Rulition" ' , NO_OUTPUT
	Select @SQL=' for /f "tokens=1-9 delims=," %1 in (%temp%\Rulition) do @echo %1%2%3%4%5%6%7%8%9 '
	----将结果传入到表[必须充许空值插入，否则会出错！]
	Create Table #disk_space (free_sizes VarChar(100) NULL )
	Insert into  #disk_space Exec xp_cmdshell @SQL
	Delete from  #disk_space where free_sizes is null
	----提取结果
	Declare @disk_space numeric
	 Select @disk_space = Convert(numeric,free_sizes)/1024*0.95 from #disk_space
	   Drop table #disk_space
	---------------------------------------------------------------------------------------------	
	----(20)获取当前数据库大小(参考:sp_spaceused)[已换成KB,近似值= 统计结果/1024*0.95 ]
	Select @SQL = ' Declare @dbsize  bigint ' + CHAR(10) +
		      ' Declare @logsize bigint ' + CHAR(10) +
		      ' Declare @database_size bigint ' + CHAR(10) +
		' Select @dbsize  = sum(convert(bigint,case when status & 64 = 0 then size ELSE 0 end)) ,'+ CHAR(10) +
		'        @logsize = sum(convert(bigint,case when status & 64 <> 0 then size ELSE 0 end))' + CHAR(10) +
			' from ' + @数据库名 + '.dbo.sysfiles ' + CHAR(10) +
		' Select (convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize) ) * 8192 '
	----将结果传入到表
	Create Table #database_size (files_sizes dec(15,2) NULL )
	Insert into  #database_size Exec (@SQL)
	----提取结果
	Declare @database_size numeric
	 Select @database_size = Convert(numeric,files_sizes)/1024*0.95 from #database_size
	   Drop table #database_size
	---------------------------------------------------------------------------------------------
	----(25)一致性检查
	/*如果一致性检查在白天进行时要花费很长时间,可以设置为只在晚上处理。(具体情况详见操作结果日志)*/
	IF (@备份方式 = '完整备份' and (Convert(varchar,getdate(),24) between '03:00:00' and '04:00:00') )
        	Begin
                	/*
                	在数据库备份之前，应该进行数据的一致性检查：   
                	     1。运行检查点进程	checkpoint  [强制将当前数据库的所有脏页写到磁盘上。]
                	     2。检查数据库	dbcc checkdb   
                	     3。检查页面	dbcc checkalloc 
                	     4。检查系统表	dbcc checkcatalog   
                	然后再进行数据库备份。 
                	----
                	【DBCC CHECKDB】 是大量占用 CPU 和磁盘的操作。每一个需要检查的数据页都必须首先从磁盘读入内存。
                		另外，DBCC CHECKDB 使用 tempdb 排序。建议在服务器负荷较少的时候运行 DBCC CHECKDB。
                		如果在负荷高峰期运行 DBCC CHECKDB，那么事务吞吐量性能和 DBCC CHECKDB 完成时间性能都会受到影响。
                	----
                	【DBCC CHECKALLOC】 对数据库中的分配和页使用（包括索引视图）情况进行检查。
                		只用于向后兼容性的 NOINDEX 选项也适用于索引视图。
                		如果已经执行 DBCC CHECKDB，则不必执行 DBCC CHECKALLOC。
                		DBCC CHECKDB 是 DBCC CHECKALLOC 的超集，除了对索引结构和数据完整性进行检查之外，它还包括对分配进行检查。
                	*/
                	----★一致性检查[只保留检查的最终结果到日志文件，注意修改 isql.exe 使用的用户名和密码还有 isql.exe 所在的路径]★
                	Print '【一致性检查】'
                	Declare @CHECK VarChar(1000)
                	----
                	Print '1.运行检查点进程		(' + Convert(varchar,GetDate(),21) + ')'
                		IF (@Is_Run = 1) CHECKPOINT
                	----
                	Print '2.检查数据库		(' + Convert(varchar,GetDate(),21) + ')'
                	 	Select @CHECK = @ISQL+' -S '+ @@SERVERNAME + ' -d '+ @数据库名 + ' -U sa -P SERVER -Q "dbcc checkdb (' + @数据库名 + ') " -o "%temp%\check_db.log" -w 9999 & find "CHECKDB" "%temp%\check_db.log" '
                		IF (@Is_Run = 0) Print @CHECK 
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '3.检查页面		(' + Convert(varchar,GetDate(),21) + ')'
                	 	Select @CHECK = @ISQL+' -S '+@@SERVERNAME + ' -d '+ @数据库名 + ' -U sa -P SERVER -Q "dbcc checkalloc (' + @数据库名 + ') " -o "%temp%\check.log" -w 9999 & find "CHECKALLOC" "%temp%\check.log" '
                		IF (@Is_Run = 0) Print @CHECK
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '4.检查系统表		(' + Convert(varchar,GetDate(),21) + ')'
                		Select @CHECK = @ISQL+' -S ' + @@SERVERNAME + ' -d ' + @数据库名 + ' -U sa -P SERVER -Q "dbcc checkcatalog (' + @数据库名 + ')" '
                		IF (@Is_Run = 0) Print @CHECK
                		IF (@Is_Run = 1) EXEC xp_cmdshell @CHECK
                	----
                	Print '5.一致性检查已完成		(' + Convert(varchar,GetDate(),21) + ')'
        	End
	---------------------------------------------------------------------------------------------
	----(30)删除过期备份文件
	----   凡大于(@保留时间)24小时的都会被删除,注意扩展名!! 
	----   forfiles.exe 也要指定路径，否则无法执行这个操作.
	Declare @删除操作 nvarchar(4000)
	----
	Select  @删除操作 =' pushd ' + @备份路径 + '\' + @数据库名 + ' && ' +
			@FORFILES +' -M'+@数据库名+'_*.bak -c"cmd /c echo 删除 @FILE & del @FILE " -D-'+ @保留时间 + ' && ' +
			' popd '
	 Print '【删除文件】保留时间: ' + @保留时间 + ' 天'
	----处理差异备份 .dif
	IF @备份方式='差异备份' Select @删除操作=Replace(@删除操作,'_*.bak','_*.dif')
	----每月1号的备份其后缀名改为 .ybf
	  IF DAY(getdate())=1 Select @删除操作=Replace(@删除操作,'_*.bak','_*.ybf')
	----
	  IF (@Is_Run = 0) Print @删除操作
	  IF (@Is_Run = 1) Exec xp_cmdshell @删除操作
	---------------------------------------------------------------------------------------------
	----(40)备份可行性估算
	----  如果 [剩余空间] 不够存放 [预期备份]的大小，先删除过期备份文件，如果还不够用，则退出。
	----       [预期备份的大小] = [上次备份文件的大小] / [上次备份时数据库的大小] * [当前数据库的大小]
	----       SQL的备份策略是先备份后删除，事先也不判断一下，很浪费时间。
	----
	----[上次备份时数据库的大小]取自 msdb.dbo.backupset.name ,在生成备份语句时进行标记。
	----
	Declare @last_data_sizes numeric
	Declare @评估结果 varchar(8)
	----
	 Select @last_data_sizes = 1
	 Select @评估结果 = '通过'
	----如果上次备份时没有'_KB'标记，则默认为1。
	IF ( CharIndex('_KB',@name) = 0 )  Select @last_data_sizes = 1
	    ELSE
		Begin
		----如果仅有'_KB'标记，但没有数据，也默认为1。
		IF ( CharIndex('_KB',@name) + 3 ) > LEN(@name) Select @last_data_sizes = 1 
		----否则，提取'_KB'后的数据
		ELSE Select @last_data_sizes = Convert(numeric,SubString(@name,CharIndex('_KB',@name)+3,20))
		End
	----显示评估情况明细
	IF (@Is_Run = 0) 
		Begin
		Print '【评估情况】'
		Select @backup_set_id as   '上次备份的ID: '
		Select isnull(@backup_size,1) as '上次备份文件的大小(KB)' , isnull(@last_data_sizes,1) as '上次备份时数据库的大小(KB)' 
		Select @database_size as '当前数据库的大小(KB)' , @disk_space as '可用磁盘空间(KB)' 
		Print '【本次备份】' + @备份路径 + '\'+ @数据库名
		End
	----开始评估
	----检查[完整备份]的大小
        IF @备份方式='完整备份' 
        	/* 如果[上次备份文件的大小] = 1 , 则比较 [当前数据库的大小]*0.80 与 [可用磁盘空间]
        	   这里的 (*0.80) 是人个经验值,可以结合每次的【评估情况】大致算出来。*/
        Begin
        	IF @last_data_sizes = 1
        		Begin
        		IF @database_size * 0.80 > @disk_space 
        			Begin
        			Select @备份路径 + ' 可用磁盘空间不足，无法存入数据库备份文件，退出操作！' + CHAR(10) as '【错误提示1】'
                                Select @database_size * 0.80 as '@database_size * 0.80' , @disk_space as '@disk_space'
        			Return			
        			End
        		End
        	----[预期备份的大小] = [上次备份文件的大小] / [上次备份时数据库的大小] * [当前数据库的大小]
        	ELSE
        		Begin
        		IF ( @backup_size / @last_data_sizes ) * @database_size  > @disk_space 
        			Begin
        			Select @备份路径 + ' 可用磁盘空间不足，无法存入数据库备份文件，退出操作！' + CHAR(10) as '【错误提示2】'
                                Select ( @backup_size / @last_data_sizes ) * @database_size as '预期备份的大小', @disk_space as '磁盘空间'
        			Return			
        			End
        		End
        End
	----检查[差异备份]的大小
	IF(  @备份方式 = '差异备份' and ( @last_data_sizes <> 1 ) )
        	/*如果 [上次备份文件的大小] 相对 [当前数据库的大小] 超过 30% ,说明上次的完全备份失败了,与此同时，最近又没有做过完整备份,
        	  则必须再次进行完整备份,否则,数量过多的大体积差异备份文件会占用对应的磁盘空间,造成差异备份的失败。(v2.0提示并退出)
               	  这里的 (超过 30%) 是人个经验值,可以结合每次的【评估情况】大致算出来。*/
	Begin
        	IF (isnull(@backup_size,1) / @database_size > 0.3)
        	   IF NOT EXISTS (Select 1 from msdb.dbo.backupset where type = 'D' and backup_set_id > @backup_set_id and [name] like '%' + @数据库名 + '%' )
        		Begin
                		Print  '【有情提示】' +  '上次(差异备份)的文件偏大，有可能最近一次的完整备份失败！请手工运行【完整备份】进行补救。' 
                		Print  '【有情提示】' +  '如果多次出现这个问题，请检查相关所有操作或设置。' 
                		Select @评估结果 = '失败'
                                Return
        		End
	End
	----
	IF @评估结果 = '通过' Print '【评估通过，可以备份!】'
	---------------------------------------------------------------------------------------------
/*组织@备份语句*/
Select @备份语句=''
Select @备份语句='BACKUP DATABASE '+ @数据库名 + ' TO DISK = N''' + @备份路径+'\'+@数据库名+'\'+ @数据库名 + '_' +@备份文件 + 
		 ''' WITH RETAINDAYS = ' + @保留时间 + ', NOFORMAT, NOINIT, NAME = N''' + 
		 @数据库名 + '_' + @备份方式 + '_' + @备份文件 +'_KB' + Convert(varchar,@database_size) +
		 ''', SKIP, NOREWIND, NOUNLOAD, STATS = 100,'
		+ ' DESCRIPTION = '''+ @备份路径 + '\' + @数据库名 +'''' 
----
    IF @备份方式 = '差异备份' Select @备份语句 = @备份语句 + ' , DIFFERENTIAL '
----
/*显示@备份语句*/
Print '【备份语句】'
Print @备份语句
----
/*[差异备份]回避[完整备份]*/
IF exists(Select spid from  master.dbo.sysprocesses where db_name(dbid) = @数据库名
             and status = 'runnable' and cmd= 'BACKUP DATABASE')
	Begin
	 Print @数据库名 + ' 正在备份，跳过本次操作!'+ CHAR(10)
	 Return
	End
----
/*执行操作*/
IF (@Is_Run = 1) Exec (@备份语句)
----
Select GetDate() AS '【结束时间】'
----
/*
[参考资料1]
	----清理日志记录
	Select * from msdb.dbo.backupset
	Select * from msdb.dbo.restorehistory
	----
	删除备份和还原历史记录表中所有早于指定日期的备份集的条目。
	由于执行备份或还原操作后会在备份和还原历史记录表中添加一些行，
	因此使用 sp_delete_backuphistory 可以减小 msdb 数据库中历史记录表的大小。
	----
	Declare @dt datetime 
	 Select @dt = cast(N'01/01/2015 00:00:00' as datetime) 
	   exec msdb.dbo.sp_delete_backuphistory @dt

	----删除作业的历史记录
	EXEC msdb.dbo.sp_purge_jobhistory  @oldest_date='01/01/2015 00:00:00'
	EXEC msdb..sp_maintplan_delete_log null,null,'01/01/2015 00:00:00'


[参考资料2]

关于 SQL2005 远程备份

Rulition 10:19 2009-10-17

要实现 SQL 远程备份,必须处理好本机远程访问的问题：

第一、远程计算机与本机最好在同一网段内，如果跨了网段（或VLAN），需交换机路由支持，甚至修改本地路由表。

第二、为本机提供 SQL 服务的“用户名”和“密码”必须是[远程计算机]的[合法用户]，且能对[远程计算机]的[备份文件夹]进行[完全操作]。
      一般情况下，在安装 SQL 服务时使用的是系统帐户（多半是 administrator），如果刚好是远程计算机的合法用户，则处理起来就简单多了。
      否则，在进行远程备份时必须使用 xp_cmdshell 调用 MS-DOS 的 net use 命令，使用对方的[合法用户]进行登记，以操作[备份文件夹]。 
      
第三、至于[远程计算机]的[备份文件夹]，可以事先在[远程计算机]上将[备份文件夹]进行共享，并指定可完全访问的用户名。
      如果不想让无关的人看到这个[备份文件夹]，可在共享时将共享名后加上$，例如：备份文件夹$
      或者，在使用 net use 进行[合法用户]登记时，直接使用对方超级用户，这样可直接访问[备份文件夹]。
      例如：\\COMPUTER\E$\备份文件夹

      net use \\COMPUTER\E$\备份文件夹 /user:用户名 口令

      如果是空口令，可用""代替: /user:用户名 ""
*/
<span style="font-family:Arial;BACKGROUND-COLOR: #ffffff"></span>
 

版权声明：本文为博主原创文章，未经博主允许不得转载。

第八章 Linux磁盘管理
【查看磁盘或者目录的容量 df 和 du】df  查看已挂载磁盘的总容量、使用容量、剩余容量等，可以不加任何参数，默认是按k为单位显示的df常用参数有 –i  -h  -k  –m等-i  使用inodes 显示结果-h  使用合适的单位显示，例如G	-k  -m 分别为使用K，M为单位显示简单介绍一下，你看到的相关数据。Filesystem 表示扇区，也就是你划分磁盘时所分的区；1K-blocks/1M-blocks表示以1K/1M为单位；Used 和 Available 分别是已使用和剩余；Use% 就是已经使用的百分比，如果这个值大于90% 那么你就应该注意了，磁盘很有可能马上就会变满的；Mounted on 则表示该分区（扇区）所挂载的地方。du  用来查看某个目录所占空间大小语法：du [-abckmsh]  [文件或者目录名]  常用的参数有：-a：全部文件与目录大小都列出来。如果不加任何选项和参数只列出目录（包含子目录）大小。-b：列出的值以bytes为单位输出，默认是以Kbytes	-c：最后加总	-k：以KB为单位输出-m：以MB为单位输出-s：只列出总和-h：系统自动调节单位，例如文件太小可能就几K，那么就以K为单位显示，如果大到几G，则就以G为单位显示。笔者习惯用  du –sh  filename  这样的形式。【磁盘的分区和格式化】笔者经常做的事情就是拿一个全新的磁盘来分区并格式化。这也说明了作为一个linux系统管理员，对于磁盘的操作必须要熟练。所以请你认真学习该部分内容。fdisk  linux下的硬盘分区工具语法： fdisk  [-l ] [设备名称]-l ：后边不跟设备名会直接列出系统中所有的磁盘设备以及分区表，加上设备名会列出该设备的分区表。如果不加-l 则进入另一个模式，在该模式下，可以对磁盘进行分区操作。刚进入该模式下，会有一个提示Command (m for help): 此时按m则会打印出帮助列表，如果你英文好，我想你不难理解这些字母的功能。笔者常用的有p, n,d, w, q. 	P：打印当前磁盘的分区情况。n：重新建立一个新的分区。w：保存操作。q：退出。d：删除一个分区因为笔者的linux系统是安装在虚拟机上的，所以我可以增加一块新的磁盘。然后笔者会把新的磁盘分成多个分区。当再次fdisk -l 查看时发现多了一个/dev/hdb 设备，并提示该设备没有可用的分区表。那么下面就来分一下这个/dev/hdb.首先用p查看一下，并没有任何分区信息。用n创建一个新的分区，会提示要建立e （extended 扩展分区）或者p （primary partition主分区），这里笔者选择主分区，所以按了p回车后，又让输入First  cylinder 你或者直接回车或者输入一个数字，因为这块磁盘是新的并没有任何分区，所以直接回车其实就是从1开始了。你也可以自定义输入，但不要超过2080，笔者这里输入1回车。此时会提示要分多大，可以写一个数值（2-2080），也可以输入+sizeK或者+sizeM，后者比较直观容易理解，所以笔者在这里输入+100M，即我分了一个100M的主分区。再用p查看时，果真多出来一个分区。然后笔者继续重复前面的操作，建立了4个主分区。当笔者再次输入n创建分区时，结果提示错了。由此你会发现，在linux中最多只能创建4个主分区，那如果你想多创建几个分区如何做？很容易，在创建完第三个分区后，创建第四个分区时选择扩展分区。先删除第四个主分区，然后建立一个扩展分区在建立扩展分区时，会问你要分多少给这个扩展分区，笔者直接回车，即把所有空间都分给了这个扩展分区。这个扩展分区/dev/hdb4并不能往里写数据，它只是一个空壳子，需要我们继续在这个空壳中继续创建分区。当建立完扩展分区，然后按n创建新分区时你会发现不再提示是要建立p还是e了，因为我们已经不能再创建p了。在这里需要你明白的是，hdb5 其实只是 hdb4 中的一个子分区，到目前为止可用的分区也才4个，那笔者就再创建第5个分区出来。然后按w保存，该模式自动退出，如果你不想保存分区信息直接按q即可退出。下面我们把刚分好的分区删除，重新建立分区。如何删除你还记得吧，对了就是直接按d然后选择合适的数字。删除完所有分区后，这块磁盘就恢复如初了。第一个分区，我们就建立成扩展分区。并且分给它200M。当再次新建分区时，发生了变化，不再是p或者e了，而是p或者l（逻辑分区），这是为什么呢？在上面也提到了，一个扩展分区只是一个空壳，在扩展分区下才可以继续划分小的分区，这个小的分区其实就是逻辑分区了。而且这个逻辑分区默认都是从字数5开始的，因为前面的数字要么给主分区留着，要么给扩展分区留着。由此我们也可以得到，在linux中最多可以创建4个主分区，一旦创建4个主分区后就不能增加任何分区了。另外最多也只能创建一个扩展分区。扩展分区下的逻辑分区最多可以创建多少呢？IDE的硬盘（类似于hda, hdb, hdc 等）最多可以创建10个（hdb5-hdb15），这是笔者试验出来的结果。有的资料说linux下的逻辑分区是没有限制的，也有的说最大可以到64，至于对不对，需要你去近一步考察了，我们没有必要多么深入的研究这个问题，也没有什么意义。通过以上操作，相信你也学会了用fdisk 来分区了吧。值得提出的是，不要闲着没事分区玩儿，这操作的危险性是很高的，一不留神就把你服务器上的数据全部给分没有了。如果有分区的操作，那么请保持百分之二百的细心，切记切记！mkfs.ext2 / mkfs.ext3 /mke2fs 格式化linux硬盘分区当用man查询这三个命令的帮助文档时，你会发现我们看到了同一个帮助文档，这说明三个命令是一样的。常用的选项有：-b：分区时设定每个数据区块占用空间大小，目前支持1024, 2048 以及4096 bytes每个块。-i：设定inode大小-N：设定inode数量，有时使用默认的inode数不够用，所以要自定设定inode数量。-c：在格式化前先检测一下磁盘是否有问题，加上这个选项后会非常慢-L：预设该分区的标签label	-j：建立ext3格式的分区，如果使用mkfs.ext3 就不用加这个选项了不加任何选项，直接格式化/dev/hdb1 上例中更改了block size为4096 默认是1024，而inode大小设定为4096。下面的例子分区时自定义分区的label（标签）名。e2label  用来查看或者修改分区的标签（label）这个命令很简单，后边直接跟分区编号，即可查看该分区的label，当想要修改标签名时，分区编号后边跟想要的标签名即可。fsck 检查硬盘有没有坏道语法： fsck [-Aar] [分区]-A ：加该参数时，后不需要跟分区名作为参数。它会自动检查/etc/fstab 文件下的所有分区（开机过程中就会执行一次该操作）；-a ：自动修复检查到有问题的分区；-r ：当检查到有坏道的分区时会让用户决定是否修复。当你使用fsck检查磁盘有无坏道时，会提示用户“跑这个任务可能会导致某些挂载的文件系统损坏”，所以这个命令不要轻易运行。否则真的遇到问题，系统甚至都不能启动了。【挂载/卸载磁盘】在上面的内容中讲到了磁盘的分区和格式化，那么格式化完了后，如何去用它呢？这就涉及到了挂载这块磁盘。格式化后的磁盘其实是一个块设备文件，类型为b，也许你会想，既然这个块文件就是那个分区，那么直接在那个文件中写数据不就写到了那个分区中么？当然不行。在挂载某个分区前需要先建立一个挂载点，这个挂载点是以目录的形式出现的。一旦把某一个分区挂载到了这个挂载点（目录）下，那么再往这个目录写数据使，则都会写到该分区中。这就需要你注意一下，在挂载该分区前，挂载点（目录）下必须是个空目录。其实目录不为空并不影响所挂载分区的使用，但是一旦挂载上了，那么该目录下以前的东西就不能看到了。只有卸载掉该分区后才能看到。mount 挂载设备先建立/test1  /test2 目录，然后在/test1目录下建立一个1.txt文件。把/dev/hdb1分区挂载到/test1目录，然后再查看/test1目录发下，1.txt不存在了。此时往/test1目录下写数据，则会写到/dev/hdb1分区中。在讲mount的-a选项时，我们有必要先了解一下这个文件 /etc/fstab这个文件是系统启动时，需要挂载的各个分区。第一列就是分区的label；第二列是挂载点；第三列是分区的格式；第四列则是mount的一些挂载参数，等下会详细介绍一下有哪些参数，一般情况下，直接写defaults即可；第五列的数字表示是否被dump备份，是的话这里就是1，否则就是0；第六列是开机时是否自检磁盘，就是刚才讲过的那个fsck检测。1，2都表示检测，0表示不检测，在Redhat中，这个1，2还有个说法，/ 分区必须设为1，而且整个fstab中只允许出现一个1，这里有一个优先级的说法。1比2优先级高，所以先检测1，然后再检测2，如果有多个分区需要开机检测那么都设置成2吧，1检测完了后会同时去检测2。下面该说说第四列中常用到的参数了。async/sync ：async表示和磁盘和内存不同步，系统每隔一段时间把内存数据写入磁盘中，而sync则会时时同步内存和磁盘中数据；auto/noauto ：开机自动挂载/不自动挂载；default：按照大多数永久文件系统的缺省值设置挂载定义，它包含了rw, suid, dev, exec, auto, nouser,async  ；ro：按只读权限挂载 ；rw：按可读可写权限挂载 ；exec/noexec ：允许/不允许可执行文件执行，但千万不要把根分区挂载为noexec，那就无法使用系统了，连mount命令都无法使用了，这时只有重新做系统了；user/nouser ：允许/不允许root外的其他用户挂载分区，为了安全考虑，请用nouser ；suid/nosuid ：允许/不允许分区有suid属性，一般设置nosuid ；usrquota ：启动使用者磁盘配额模式，磁盘配额相关内容在后续章节会做介绍；grquota ：启动群组磁盘配额模式；学完这个/etc/fstab后，我们就可以自己修改这个文件，增加一行来挂载新增分区。例如，笔者增加了这样一行/dev/hdb1	/test1	ext3		defaults		0  0那么系统再重启时就会挂载这个分区了。讲完了/etc/fstab 我们继续回来讲这个mount，mout -a 如果运行了这个命令，则会把/etc/fstab中出现的所有磁盘分区挂载上。所以当你在/etc/fstab文件中增加一行后，你完全可以直接运行mount -a 来挂载你增加的那行，这样就不用重启啦。你可以使用mount -o 选项来重新挂载一个分区，并同时指定你想要的选项（即上边介绍fstab第六列中那些）看到了吧，使用了ro选项，则不能新建文件了。再重新挂载一次就恢复正常了，如果不加任何其他选项，则就是defaults。笔者在日常的运维工作中遇到过这样的情况，一台服务器上新装了亮块磁盘，磁盘a（在服务器上显示为sdc）和磁盘b（在服务器上显示为sdd），有一次把这两块磁盘都拔掉了，然后再重新插上，重启机器，结果磁盘编号调换了，a变成了sdd，b变成了sdc（这是因为把磁盘插错了插槽），问题来了。通过上边的学习，你挂载磁盘是通过/dev/hdb1 这样的分区名字来挂载的，如果先前加入到了/etc/fstab 中，结果系统启动后则会挂载错分区。那么怎么样避免这样的情况发生？blkid  这个命令是用来显示磁盘分区uuid的，uuid其实就是一大串字符，在linux系统中每一个分区都会有唯一的一个uuid。说到这，聪明的你想到了吧，没有错，我们就用这唯一的uuid来挂载磁盘分区。这个命令笔者只是用来显示uuid，没有其他用途所以不做详细介绍，当然你也可以在命令后边跟某一个分区，只显示该分区的uuid。看到了吧，其实是很好用的。那么怎么让它也开机启动？很简单，把刚才敲的mount 磁盘的命令直接写到 /etc/rc.d/rc.local 文件即可。对了，笔者到现在还没有给你讲过这个rc.local文件的作用。简单点说，系统启动完后会执行这个文件中的命令。所以只要你想开机后运行什么命令统统写入到这个文件下面吧。其实这个文件就是一个shell 脚本，以后笔者会单独用一章来介绍它。行开头的”#”是注释的意思，代表这行在这个脚本中不生效。你想让系统开机后运行什么命令，就把什么命令写到这里面来。就比如刚才笔者挂载的那条命令。你可以这样实现：mount 还有一个比较常用的选项就是-t ，后边指定文件系统的类型，比如挂载软盘时就需要指定 vfat，而挂载光盘时就需要指定iso9660，但在笔者多年来的经验，目前的系统都是智能识别所要挂载分区的系统格式类别的。也就是说，用不着你去指定，它会自动判断的。umount  卸载设备现在你学会了如何挂载一个设备，那么如何去卸载一个设备呢，这就要用到umount了，这个命令也简单的很，后边可以跟挂载点，也可以跟分区名(/dev/hdb1) 有时也许你会遇到比较难卸载的设备，就像在windows下无法删除U盘一样，教你一个特管用的方法就是  umount -l /dev/hdb1 ，这个-l选项有强制卸载的意思，你一定要记住哦，非常有用的。【建立一个swap文件】从装系统时就接触过这个swap了，前面也说过它类似与windows的虚拟内存，分区的时候一般大小为内存的2倍，如果你的内存超过4G，那么你分8G似乎是没有必要了。分4G足够日常交换了。然而，还会有虚拟内存不够用的情况发生。如果真遇到了，莫非还要重新分一下磁盘？当然不能！那我们就增加一个虚拟的磁盘出来。基本的思路就是：建立swapfile  格式化为swap格式  启用该虚拟磁盘利用dd 来创建一个419M的文件/tmp/newdisk出来，其中if代表从哪个文件读，/dev/zero是linux下特有的一个0生成器，of表示输出到哪个文件，bs即块大小，count则定义有多少个块。mkswap 这个命令是专门格式化swap格式的分区的，这个命令用的时候一定要看清楚了，否则把其他分区给格式化错了就只有哭了。free 是用来查看系统内存以及虚拟内存使用情况的，-m选项是以M的形式查看。可以看到当前系统的。而swapon 是启用我们新建的swap文件，启用后再用free查看发现多了400M。我们还可以用swapoff 关闭启用的swap文件。【磁盘配额】磁盘配合其实就是给每个用户分配一定的磁盘额度，只允许他使用这个额度范围内的磁盘空间。在linux系统中，是多用户多任务的环境，所以会有很多人共用一个磁盘的情况。针对每个用户去限定一定量的磁盘空间是有必要的，这样才显得公平。在linux中，用来管理磁盘配额的东西就是quota了。如果你的linux上没有quota，则需要你安装这个软件包 quota-3.13-5.el5.RPM （其实版本是多少无所谓了，关键是这个软件包）。quota在实际应用中是针对整个分区进行限制的。如果你的/dev/hda3 是挂载在/home 目录下的，那么/home 所有目录都会受到限制。quota 这个模块主要分为quota quotacheck quotaoff  quotaon quotastats edquota  setquota  warnquota repquota这几个命令，下面就分别介绍这些命令。quota 用来显示某个组或者某个使用者的限额。语法：quota  [-guvs]  [user,group]	-g ：显示某个组的限额-u ：显示某个用户的限额-v ：显示的意思-s ：选择inod或硬盘空间来显示 quotacheck 用来扫描某一个磁盘的quota空间。语法：quotacheck  [-auvg]  /path	-a ：扫描所有已经mount的具有quota支持的磁盘-u ：扫描某个使用者的文件以及目录-g ：扫描某个组的文件以及目录-v ：显示扫描过程-m ：强制进行扫描 edquota  用来编辑某个用户或者组的quota值。语法：edquota  [-u user]  [-g group] [-t]		  edquota  -p user  -u user	-u ：编辑某个用户的quota	-g ：编辑某个组的quota	-t ：编辑宽限时间-p ：拷贝某个用户或组的quta到另一个用户或组当运行edquota  -u user 时，系统会打开一个文件，你会看到这个文件中有7列，它们分别代表的含义是：Filesystem ：磁盘分区，如/dev/hda3	blocks ：当前用户在当前的Filesystem中所占用的磁盘容量，单位是Kb。该值请不要修改。soft/hard ：当前用户在该Filesystem内的quota值，soft指的是最低限额，可以超过这个值，但必须要在宽限时间内将磁盘容量降低到这个值以下。hard指的是最高限额，即不能超过这个值。当用户的磁盘使用量高于soft值时，系统会警告用户，提示其要在宽限时间内把使用空间降低到soft值之下。inodes ：目前使用掉的inode的状态，不用修改。quotaon 启动quta，在编辑好quota后，需要启动才能是quta生效语法：quotaon  [-a] [-uvg  directory]	-a ：全部设定的quota启动-u ：启动某个用户的quota	-g ：启动某个组的quota	-s ：显示相关信息 quotaoff 关闭quota该命令常用只有一种情况  quotaoff -a 关闭全部的quota以上讲了很多quota的相关命令，那么接下来笔者教你如何在实践应用中去做这个磁盘配额。整个执行过程如下：首先先确认一下，你的/home目录是不是单独的挂载在一个分区下，用df 查看即可。如果不是则需要你跟我一起做。否则这一步即可省略。笔者的linux系统中，/home并没有单独占用一个分区。所以需要把/home目录挂载在一个单独的分区下，因为quota是针对分区来限额的。笔者用fdisk -l 查看目前/dev/hdb 磁盘有5个可用分区，所以笔者打算把/dev/hdb1挂载在/home 目录下看到了吧，目前笔者的/home目录已经是一个单独的分区了。1）建立测试用户首先建立一个test用户，则同时建立了一个test组。可以在/etc/passwd中有以test为开头的行，其中uid和gid都为500 ，然后又建立一个test1账号，使其加入test组，查看/etc/passwd文件发现test和test1用户的gid都为500。（也许你对/etc/passwd文件、增加一个用户以及uid和gid等概念不熟悉，没有关系，在以后的章节中会做介绍，在这里只需要你明白即可）2）打开磁盘的quota功能默认linux并没有对任何分区做quota的支持，所以需要我们手动打开磁盘的quota功能，你是否记得，在前面内容中分析/etc/fstab文件的第四列时讲过这个quota选项（usrquota, grpquota）。没错，要想打开这个磁盘的quota支持就是需要修改这个第四列的。用vim编辑/etc/fstab 加入一行，如下图：vim命令将会在后续章节详细介绍，前面介绍过如何进入编辑模式以及如何保存文件。如果你的linux系统已经有/home这一行，那么直接修改第四列，加上usrquota,grpguota（中间没有空格）。接下来需要重新挂载/home。另外你也可以这样实现重新挂载/home如何查看是否启用了quota呢？只要查看/etc/mtab文件中/home所在那行是否有usrguota,grpquota即可。笔者的/dev/hdb1现在已经支持了quota	3）扫描磁盘的使用者使用状况，并产生重要的aquota.group与aquota.user这一步就需要用到quotacheck了，aquota.group与aqouta.user分别是组以及用户磁盘配额需要的配置文件。如果没有这两个文件，则磁盘配额是不会生效的。当首次使用quotacheck命令时，会提示“cannot stat old user quota file ……”其实这是在提示你在/home目录下没有aquota.user以及aquota.group两个文件。没有关系，因为以前并没有配置过磁盘配额，当然没有这两个文件了。当执行完quotacheck命令后，会在/home目录下生成这两个文件的。4）启动quota配额5）编辑用户磁盘配额先来设定test账户的配额，然后直接把test的配额拷贝给test1即可。这里就需要用到edquota了。讲上面内容修改为其中单位是Kb，所以soft 值大约为20Mb，hard值为30Mb，保存这个文件，保存的方式跟vim一个文件的方式一样的。将test的配额复制给test1。下面继续设定宽限时间。默认是7days 在这里我们改为1days。下面查看一下test以及test1用户的配额吧。6）编辑组磁盘配额设定组test的soft配额值为40M，hard值为50M。下面查看组test的配额。7）设定开机启动前面已经讲到启动磁盘配额的命令是quotaon -aug ，所以要想开机启动，只需将这条命令加入到 /etc/rc.d/rc.local文件即可。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

SHELL 脚本
终于到shell 脚本这章了，在以前笔者卖了好多关子说shell脚本怎么怎么重要，确实shell脚本在linux系统管理员的运维工作中非常非常重要。下面笔者就带你正式进入shell脚本的世界吧。到现在为止，你明白什么是shell脚本吗？如果明白最好了，不明白也没有关系，相信随着学习的深入你就会越来越了解到底什么是shell脚本。首先它是一个脚本，并不能作为正式的编程语言。因为是跑在linux的shell中，所以叫shell脚本。说白了，shell脚本就是一些命令的集合。举个例子，我想实现这样的操作：1）进入到/tmp/目录；2）列出当前目录中所有的文件名；3）把所有当前的文件拷贝到/root/目录下；4）删除当前目录下所有的文件。简单的4步在shell窗口中需要你敲4次命令，按4次回车。这样是不是很麻烦？当然这4步操作非常简单，如果是更加复杂的命令设置需要几十次操作呢？那样的话一次一次敲键盘会很麻烦。所以不妨把所有的操作都记录到一个文档中，然后去调用文档中的命令，这样一步操作就可以完成。其实这个文档呢就是shell脚本了，只是这个shell脚本有它特殊的格式。Shell脚本能帮助我们很方便的去管理服务器，因为我们可以指定一个任务计划定时去执行某一个shell脚本实现我们想要需求。这对于linux系统管理员来说是一件非常值得自豪的事情。现在的139邮箱很好用，发邮件的同时还可以发一条邮件通知的短信给用户，利用这点，我们就可以在我们的linux服务器上部署监控的shell脚本，比如网卡流量有异常了或者服务器web服务器停止了就可以发一封邮件给管理员，同时发送给管理员一个报警短信这样可以让我们及时的知道服务器出问题了。有一个问题需要约定一下，凡是自定义的脚本建议放到/usr/local/sbin/目录下，这样做的目的是，一来可以更好的管理文档；二来以后接管你的管理员都知道自定义脚本放在哪里，方便维护。【shell脚本的基本结构以及如何执行】Shell脚本通常都是以.sh 为后缀名的，这个并不是说不带.sh这个脚本就不能执行，只是大家的一个习惯而已。所以，以后你发现了.sh为后缀的文件那么它一定会是一个shell脚本了。test.sh中第一行一定是 “#! /bin/bash” 它代表的意思是，该文件使用的是bash语法。如果不设置该行，那么你的shell脚本就不能被执行。’#’表示注释，在前面讲过的。后面跟一些该脚本的相关注释内容以及作者和创建日期或者版本等等。当然这些注释并非必须的，如果你懒的很，可以省略掉，但是笔者不建议省略。因为随着你工作时间的增加，你写的shell脚本也会越来越多，如果有一天你回头查看你写的某个脚本时，很有可能忘记该脚本是用来干什么的以及什么时候写的。所以写上注释是有必要的。另外系统管理员并非你一个，如果是其他管理员查看你的脚本，他看不懂岂不是很郁闷。该脚本再往下面则为要运行的命令了。Shell脚本的执行很简单，直接”sh  filename “ 即可，另外你还可以这样执行默认我们用vim编辑的文档是不带有执行权限的，所以需要加一个执行权限，那样就可以直接使用’./filename’ 执行这个脚本了。另外使用sh命令去执行一个shell脚本的时候是可以加-x选项来查看这个脚本执行过程的，这样有利于我们调试这个脚本哪里出了问题。该shell脚本中用到了’date’这个命令，它的作用就是用来打印当前系统的时间。其实在shell脚本中date使用率非常高。有几个选项笔者常常在shell脚本中用到：%Y表示年，%m表示月，%d表示日期，%H表示小时，%M表示分钟，%S表示秒注意%y和%Y的区别。-d 选项也是经常要用到的，它可以打印n天前或者n天后的日期，当然也可以打印n个月/年前或者后的日期。 另外星期几也是常用的【shell脚本中的变量】在shell脚本中使用变量显得我们的脚本更加专业更像是一门语言，开个玩笑，变量的作用当然不是为了专业。如果你写了一个长达1000行的shell脚本，并且脚本中出现了某一个命令或者路径几百次。突然你觉得路径不对想换一下，那岂不是要更改几百次？你固然可以使用批量替换的命令，但是也是很麻烦，并且脚本显得臃肿了很多。变量的作用就是用来解决这个问题的。在test2.sh中使用到了反引号，你是否还记得它的作用？’d’和’d1’在脚本中作为变量出现，定义变量的格式为 “变量名=变量的值”。当在脚本中引用变量时需要加上’$’符号，这跟前面讲的在shell中自定义变量是一致的。下面看看脚本执行结果吧。下面我们用shell计算两个数的和。数学计算要用’[ ]’括起来并且外头要带一个’$’。脚本结果为：Shell脚本还可以和用户交互。这就用到了read命令了，它可以从标准输入获得变量的值，后跟变量名。”read  x”表示x变量的值需要用户通过键盘输入得到。脚本执行过程如下：我们不妨加上-x选项再来看看这个执行过程：在test4.sh中还有更加简洁的方式。read -p 选项类似echo的作用。执行如下：你有没有用过这样的命令”/etc/init.d/iptables restart “ 前面的/etc/init.d/iptables 文件其实就是一个shell脚本，为什么后面可以跟一个”restart”? 这里就涉及到了shell脚本的预设变量。实际上，shell脚本在执行的时候后边是可以跟变量的，而且还可以跟多个。不妨笔者写一个脚本，你就会明白了。执行过程如下：在脚本中，你会不会奇怪，哪里来的$1和$2，这其实就是shell脚本的预设变量，其中$1的值就是在执行的时候输入的1，而$2的值就是执行的时候输入的$2，当然一个shell脚本的预设变量是没有限制的，这回你明白了吧。另外还有一个$0，不过它代表的是脚本本身的名字。不妨把脚本修改一下。执行结果想必你也猜到了吧。【shell脚本中的逻辑判断】如果你学过C或者其他语言，相信你不会对if 陌生，在shell脚本中我们同样可以使用if逻辑判断。在shell中if判断的基本语法为：1）不带else	if  判断语句; then		command	fi在if1.sh中出现了 ((a<60))这样的形式，这是shell脚本中特有的格式，用一个小括号或者不用都会报错，请记住这个格式，即可。执行结果为：2）带有elseif  判断语句  ; then		commandelse 		commandfi执行结果为：3）带有elifif  判断语句一  ; then		commandelif  判断语句二; then 		command	else		commandfi这里的 && 表示“并且”的意思，当然你也可以使用 || 表示“或者”，执行结果：以上只是简单的介绍了if语句的结构。在判断数值大小除了可以用”(( ))”的形式外，还可以使用”[ ]”。但是就不能使用>, < , = 这样的符号了，要使用 -lt （小于），-gt （大于），-le （小于等于），-ge （大于等于），-eq （等于），-ne （不等于）。再看看if中使用 && 和 ||的情况。shell 脚本中if还经常判断关于档案属性，比如判断是普通文件还是目录，判断文件是否有读写执行权限等。常用的也就几个选项：-e ：判断文件或目录是否存在-d ：判断是不是目录，并是否存在-f ：判断是否是普通文件，并存在-r ：判断文档是否有读权限-w ：判断是否有写权限-x ：判断是否可执行使用if判断时，具体格式为： if [ -e filename ] ; then 在shell 脚本中，除了用if来判断逻辑外，还有一种常用的方式，那就是case了。具体格式为：case  变量  in	value1)		command		;;	value2)		command		;;	value3)		command		;;	*)		command		;;	esac上面的结构中，不限制value的个数，*则代表除了上面的value外的其他值。下面笔者写一个判断输入数值是奇数或者偶数的脚本。$a 的值或为1或为0，执行结果为：也可以看一下执行过程：case脚本常用于编写系统服务的启动脚本，例如/etc/init.d/iptables中就用到了，你不妨去查看一下。【shell脚本中的循环】Shell脚本中也算是一门简易的编程语言了，当然循环是不能缺少的。常用到的循环有for循环和while循环。下面就分别介绍一下两种循环的结构。脚本中的seq 1 5 表示从1到5的一个序列。你可以直接运行这个命令试下。脚本执行结果为：通过这个脚本就可以看到for循环的基本结构 ：for 变量名 in 循环的条件； do	commanddone循环的条件那一部分也可以写成这样的形式，中间用空格隔开即可。你也可以试试，for i in `ls`; do echo $i; done 和  for i in `cat test.txt`； do echo $i; done再来看看这个while循环，基本格式为：while  条件; do		command	done脚本的执行结果为：另外你可以把循环条件忽略掉，笔者常常这样写监控脚本。while :; do command done【shell脚本中的函数】如果你学过开发，肯定知道函数的作用。如果你是刚刚接触到这个概念的话，也没有关系，其实很好理解的。函数就是把一段代码整理到了一个小单元中，并给这个小单元起一个名字，当用到这段代码时直接调用这个小单元的名字即可。有时候脚本中的某段代总是重复使用，如果写成函数，每次用到时直接用函数名代替即可，这样就节省了时间还节省了空间。fun.sh 中的sum() 为自定义的函数，在shell脚本中要用 function 函数名() { command }这样的格式去定义函数。上个脚本执行过程如下：有一点笔者要提醒你一下，在shell脚本中，函数一定要写在最前面，不能出现在中间或者最后，因为函数是要被调用的，如果还没有出现就被调用，肯定是会出错的。Shell脚本大体上就介绍这么多了，笔者所举的例子都是最基础的，所以即使你把所有例子完全掌握也不代表你的shell脚本编写能力有多么好。所以剩下的日子里你尽量要多练习，多写脚本，你写的脚本越多，你的能力就越强。希望你能够找专门介绍shell脚本的书籍深入的去研究一下它。随后笔者将给你留几个shell脚本的练习题，你最好不要偷懒。1. 编写shell脚本，计算1-100的和；2. 编写shell脚本，要求输入一个数字，然后计算出从1到输入数字的和，要求，如果输入的数字小于1，则重新输入，直到输入正确的数字为止；3. 编写shell脚本，把/root/目录下的所有目录（只需要一级）拷贝到/tmp/目录下；4. 编写shell脚本，批量建立用户user_00, user_01, … ,user_100并且所有用户同属于users组；5. 编写shell脚本，截取文件test.log中包含关键词’abc’的行中的第一列（假设分隔符为”:”），然后把截取的数字排序（假设第一列为数字），然后打印出重复次数超过10次的列；6. 编写shell脚本，判断输入的IP是否正确（IP的规则是，n1.n2.n3.n4，其中1<n1<255, 0<n2<255, 0<n3<255, 0<n4<255）。以下为练习题答案：1. #! /bin/bashsum=0for i in `seq 1 100`; do        sum=$[$i+$sum]doneecho $sum2. #! /bin/bashn=0while [ $n -lt "1" ]; do        read -p "Please input a number, it must greater than "1":" ndone sum=0for i in `seq 1 $n`; do        sum=$[$i+$sum]doneecho $sum 3. #! /bin/bashfor f in `ls /root/`; do        if [ -d $f ] ; then                cp -r $f /tmp/        fidone 4. #! /bin/bashgroupadd usersfor i in `seq 0 9`; do        useradd -g users user_0$idone for j in `seq 10 100`; do        useradd -g users user_$jdone 5. #! /bin/bashawk -F':' '$0~/abc/ {print $1}' test.log >/tmp/n.txtsort -n n.txt |uniq -c |sort -n >/tmp/n2.txtawk '$1>10 {print $2}' /tmp/n2.txt 6. #! /bin/bashcheckip() {        if echo $1 |egrep -q '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' ; then                a=`echo $1 | awk -F. '{print $1}'`                b=`echo $1 | awk -F. '{print $2}'`                c=`echo $1 | awk -F. '{print $3}'`                d=`echo $1 | awk -F. '{print $4}'`                 for n in $a $b $c $d; do                        if [ $n -ge 255 ] || [ $n -le 0 ]; then                                echo "the number of the IP should less than 255 and greate than 0"                                return 2                        fi                done        else                echo "The IP you input is something wrong, the format is like 192.168.100.1"                return 1        fi} rs=1while [ $rs -gt 0 ]; doread -p  "Please input the ip:" ipcheckip $iprs=`echo $?`doneecho "The IP is right!"

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

SharePoint 2013 IT Professional——New Feature（Work Management Service）
众所周知，SharePoint企业管理平台对数据管理是非常有效的，一个公司对于一个项目而言，借助SharePoint的Task管理能很清晰的表现出项目在各个Team的进展情况，但是对于用户个人来说，管理Task就有点难度了，比如下面一个案例：
 
企业中每个部门都有一个WebSite进行数据管理，如下所示：
 
http://www.contoso.com/Sites/QA
http://www.contoso.com/Sites/Project
http://www.contoso.com/Sites/Package
 
每个Team可能都会给用户Shelley分配Task，那么对于Shelley来说管理和更新Task进展情况就比较有难度，希望能有个集中的List管理这些Task。
 
这个需求Make Sense，微软在SharePoint
 2013就实现了这个功能——Work Management Services。
 
具体实现步骤：
 

http://www.contoso.com/Sites/QA
这个站点下的SP Training这个List
下，Assign给Shelley一些培训相关的Task，如下所示：

 



 

http://www.contoso.com/sites/Project
这个站点下的Project Document这个List下，Assign给Shelley一些Project的Task，如下图所示：

 


 
 

将这些Site Collection所在的Web
 Application 与Work Management Service进行关联，如下图所示：

 



进入Shelley的My
 Site，点击Task，如下图所示：

 



 

 
 

就能在Shelley的My
 Site中看到来自哪个站点Assign to给自己的task以及状态了，如下图所示：

 


 
注意：WorkManagement Service的使用前提是有End
 user的My Site，所以要保证User Profile Service也是可用的，并且部署了EndUser的My
 Site 。

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ubuntu Win8双系统  Grub引导Win8
Win8的基础上添加Ubuntu，安装的过程中注意启动器选择为/boot所在的设备（然后在Window下用EasyBCD引导Ubuntu），太长时间没装双系统了，不留神启动器选成了Windows 8 loader，然后悲剧开始了：


无论如何不能引导启动Win8了，从PE引导硬盘启动可以引导成功，但从本地引导一直是黑屏和一个一直闪动的光标。
期间试着修复引导，修改坏道，重建MBR，BCD各种，还是，黑屏和一个左上角一直闪动的光标。。
各种修改grub.cfg，还是无果。。。


最终的解决方案是：直接让grub 引导 windows 的启动镜像 bootmgr


把grub.cfg (/boot/grub下) 关于win8 的地方改为下
menuentry 'Microsoft Windows 8 x64 '{
insmod ntfs
insmod ntldr
set root=(hd0,1) ##前提是你的win 8 安装在hd（0，1）盘下
search --set -f /bootmgr
ntldr /bootmgr

}
遂终

版权声明：本文为博主原创文章，未经博主允许不得转载。

配置ftp服务
第二十章配置ftp服务【什么是FTP】也许你对FTP不陌生，但是你是否了解FTP到底是个什么玩意？FTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。用户可以通过它把自己的PC机与世界各地所有运行FTP协议的服务器相连，访问服务器上的大量程序和信息。FTP的主要作用，就是让用户连接上一个远程计算机（这些计算机上运行着FTP服务器程序）察看远程计算机有哪些文件，然后把文件从远程计算机上拷到本地计算机，或把本地计算机的文件送到远程计算机去。FTP用的比NFS更多，所以你一定要熟练配置它。【配置ftp】安装Redhat/CentOS系统时也许你会连带着把ftp装上，系统默认带的ftp是vsftp，比较常用，配置也很简单。但笔者常使用的ftp软件为pure-ftpd。因为这个软件比vsftp配置起来更加灵活和安全。下面是笔者配置pure-ftpd的过程：下载最新的pure-ftp源码包pure-ftpd-1.0.21.tar.bz2   # wget http://syslab.comsenz.com/downloads/linux/pure-ftpd-1.0.21.tar.bz2#tar jxvf pure-ftpd-1.0.21.tar.bz2#cd pure-ftpd-1.0.21./configure \"--prefix=/usr/local/pureftpd" \"--without-inetd" \"--with-altlog" \"--with-puredb" \"--with-throttling" \"--with-largefile" \"--with-peruserlimits" \"--with-tls" \"--with-language=simplified-chinese"#make && make install启动用配置文件#mkdir /usr/local/pureftpd/etc#cd configuration-file#cp pure-ftpd.conf /usr/local/pureftpd/etc/pure-ftpd.conf#cp pure-config.pl  /usr/local/pureftpd/sbin/pure-config.pl#chmod 755 /usr/local/pureftpd/sbin/pure-config.pl在启动pure-ftp之前需要先修改配置文件，配置文件为/usr/local/pureftpd/etc/pure-ftpd.conf,你可以打开看一下，里面内容很多，如果你英文好，可以好好研究一番，下面是我的配置文件，如果你嫌麻烦，直接拷贝过去即可。____________________________________ChrootEveryone              yesBrokenClientsCompatibility  noMaxClientsNumber            50Daemonize                   yesMaxClientsPerIP             8VerboseLog                  noDisplayDotFiles             yesAnonymousOnly               noNoAnonymous                 noSyslogFacility              ftpDontResolve                 yesMaxIdleTime                 15PureDB                         /usr/local/pureftpd/etc/pureftpd.pdbLimitRecursion              2000 8AnonymousCanCreateDirs      noMaxLoad                     4AntiWarez                   yesUmask                        133:022MinUID                      100AllowUserFXP                noAllowAnonymousFXP           noProhibitDotFilesWrite       noProhibitDotFilesRead        noAutoRename                  noAnonymousCantUpload         noPIDFile                     /usr/local/pureftpd/var/run/pure-ftpd.pidMaxDiskUsage               99CustomerProof              yes####################################到此结束，保存即可#########################启动命令： /usr/local/pureftpd/sbin/pure-config.pl /usr/local/pureftpd/etc/pure-ftpd.conf#######接下来该建立用户了################ /usr/local/pureftpd/bin/pure-pw useradd ftp_test -u www -d /data/wwwroot其中，-u 将虚拟用户 ftp_test 与系统用户 www 关联在一起。-d 参数使 ftp_test 只能访问其主目录。执行完上述命令后，会提示输入密码。# /usr/local/pureftpd/bin/pure-pw mkdb另外提供一篇CentOS5.5下源码的安装vsftpd作为参考：CentOS 5.5编译安装vsftpd-2.3.4配置虚拟用户

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

LNMP环境搭建
第十七章 LNMP环境搭建和LAMP不同的是LNMP中的N指的是是Nginx（类似于Apache的一种web服务软件）其他都一样。目前这种环境应用的也是非常之多。Nginx设计的初衷是提供一种快速高效多并发的web服务软件。在静态页面的处理上Nginx的确胜Apache一筹，然而在动态页面的处理上Nginx并不比Apache有多少优势。但是，目前还是有很多爱好者对Nginx比较热衷，随着Nginx的技术逐渐成熟，它在web服务软件领域的地位越来越高。【MySQL安装】1. 下载mysql到/usr/local/src/ cd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/mysql-5.0.86-linux-i686-icc-glibc23.tar.gz2. 解压tar zxvf /usr/local/src/ mysql-5.0.86-linux-i686-icc-glibc23.tar.gz3. 把解压完的数据移动到/usr/local/mysqlmv mysql-5.0.86-linux-i686-ii-glibc23 /usr/local/mysql4. 建立mysql用户useradd mysql5. 初始化数据库cd /usr/local/mysqlmkdir /data/mysql ; chown -R mysql:mysql /data/mysql./scripts/mysql_install_db --user=mysql --datadir=/data/mysql --user定义数据库的所属主，--datadir定义数据库安装到哪里，建议放到大空间的分区上，这个目录需要自行创建。6. 拷贝配置文件cp support-files/my-large.cnf /etc/my.cnf7. 拷贝启动脚本文件并修改其属性cp support-files/mysql.server  /etc/init.d/mysqldchmod 755 /etc/init.d/mysqld8. 修改启动脚本vim /etc/init.d/mysqld需要修改的地方有datadir=/data/mysql（前面初始化数据库时定义的目录）9. 把启动脚本加入系统服务项，并设定开机启动，启动mysqlchkconfig --add mysqldchkconfig mysqld onservice mysqld start如果启动不了，请到/data/mysql/ 下查看错误日志，该日志格式为主机名.err。【php的安装】这里要先声明一下，针对Nginx的php安装和针对apache的php安装是有区别的，因为Nginx中的php是以fastcgi的方式结合nginx的，可以理解为nginx代理了php的fastcgi，而apache是把php作为自己的模块来调用的。useradd wwwcd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/php-5.2.10.tar.gzwget http://syslab.comsenz.com/downloads/linux/php-5.2.10-fpm-0.5.13.diff.gz下载的第二个包php-5.2.10-fpm-0.5.13.diff.gz是用来给php打补丁的，默认情况下，php是无法编译出fastcgi的。tar zxvf php-5.2.10.tar.gzgzip -cd php-5.2.10-fpm-0.5.13.diff.gz | patch -d php-5.2.10 -p1cd php-5.2.10./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=/usr/local/mysql --with-mysql-sock=/tmp --with-libxml-dir --with-gd --with-jpeg-dir  --with-png-dir --with-freetype-dir --with-iconv-dir --with-zlib-dir  --with-mcrypt=/usr/local/libmcrypt --enable-soap --enable-gd-native-ttf  --enable-ftp --enable-mbstring --enable-exif --enable-zend-multibyte  --disable-ipv6 --enable-fastcgi --enable-fpmmake && make installmkdir /usr/local/php/etccp php.ini-dist /usr/local/php/etc/php.ini  vim /usr/local/php/etc/php-fpm.conf<value name="listen_address">/tmp/php-fcgi.sock</value> 这一行要改成这样，这里这样修改了以后，在配置nginx的时候就需要注意这个路径了。修改用户和组的名称为”www” 去掉注释，改成这样：Unix user of processes                         <value  name="user">www</value>                        Unix group of processes                         <value  name="group">www</value>/usr/local/php/sbin/php-fpm start其他关于php的扩展模块安装请参考：CentOS 5.5下安装mysql5.1.57+php5.2.17(FastCGI)+nginx1.0.1高性能Web服务器【nginx 安装以及配置】1. nginx源码安装cd /usr/local/src/wget http://syslab.comsenz.com/downloads/linux/nginx-0.9.6.tar.gztar zxvf nginx-0.9.6.tar.gzcd nginx-0.9.6./configure  --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/sbin/nginx  --conf-path=/usr/local/nginx/conf/nginx.conf  --error-log-path=/usr/local/nginx/logs/error.log  --http-log-path=/usr/local/nginx/logs/access.log  --pid-path=/usr/local/nginx/var/nginx.pid  --lock-path=/usr/local/nginx/var/nginx.lock  --http-client-body-temp-path=/dev/shm/nginx_temp/client_body  --http-proxy-temp-path=/dev/shm/nginx_temp/proxy  --http-fastcgi-temp-path=/dev/shm/nginx_temp/fastcgi --user=www  --group=www --with-cpu-opt=pentium4F --without-select_module  --without-poll_module --with-http_realip_module --with-http_sub_module  --with-http_gzip_static_module --with-http_stub_status_module  --without-http_ssi_module --without-http_userid_module  --without-http_geo_module --without-http_memcached_module  --without-http_map_module --without-mail_pop3_module  --without-mail_imap_module --without-mail_smtp_module --with-pcremake && make install mkdir /dev/shm/nginx_temp有的nginx版本编译时会因为pcre编译不过去，需要修改一下 --with-pcre=/usr/local/src/pcre-7.8，前提是已经下载了pcre源码包pcre-7.8.tar.gz，并解压到/usr/local/src/pcre-7.8，不需要编译pcre2. 编写nginx的启动脚本，并加入系统服务vi /etc/init.d/nginx 写入以下内容：#!/bin/bash# chkconfig: - 30 21# description: http service.# Source Function Library. /etc/init.d/functions# Nginx SettingsNGINX_SBIN="/usr/local/nginx/sbin/nginx"NGINX_CONF="/usr/local/nginx/conf/nginx.conf"NGINX_PID="/usr/local/nginx/var/nginx.pid"RETVAL=0prog="Nginx"start() {        echo -n $"Starting $prog: "        mkdir -p /dev/shm/nginx_temp        daemon $NGINX_SBIN -c $NGINX_CONF        RETVAL=$?        echo        return $RETVAL}stop() {        echo -n $"Stopping $prog: "        killproc -p $NGINX_PID $NGINX_SBIN -TERM        rm -rf /dev/shm/nginx_temp        RETVAL=$?        echo        return $RETVAL}reload(){        echo -n $"Reloading $prog: "        killproc -p $NGINX_PID $NGINX_SBIN -HUP        RETVAL=$?        echo        return $RETVAL}restart(){        stop        start}configtest(){    $NGINX_SBIN -c $NGINX_CONF -t    return 0}case "$1" in  start)        start        ;;  stop)        stop        ;;  reload)        reload        ;;  restart)        restart        ;;  configtest)        configtest        ;;  *)        echo $"Usage: $0 {start|stop|reload|restart|configtest}"        RETVAL=1esacexit $RETVAL保存后，更改/etc/init.d/nginx的权限chmod 755 /etc/init.d/nginxchkconfig --add nginxchkconfig nginx on3. nginx的配置vim /usr/local/nginx/conf/nginx.conf把原来的文件清空，然后粘贴如下内容：user www www;worker_processes 2;error_log /usr/local/nginx/logs/nginx_error.log crit;pid /usr/local/nginx/var/nginx.pid;#Specifies the value for maximum file descriptors that can be opened by this process.worker_rlimit_nofile 51200;events{use epoll;worker_connections 6000;}http{include mime.types;default_type application/octet-stream;server_names_hash_bucket_size 2048;server_names_hash_max_size 4096;log_format combined_realip '$remote_addr $http_x_forwarded_for [$time_local] ''$host "$request_uri" $status ''"$http_referer" "$http_user_agent"';sendfile on;tcp_nopush on;keepalive_timeout 30;client_header_timeout 3m;client_body_timeout 3m;send_timeout 3m;connection_pool_size 256;client_header_buffer_size 1k;large_client_header_buffers 8 4k;request_pool_size 4k;output_buffers 4 32k;postpone_output 1460;client_max_body_size 10m;client_body_buffer_size 256k;client_body_temp_path /usr/local/nginx/client_body_temp;proxy_temp_path /usr/local/nginx/proxy_temp;fastcgi_temp_path /usr/local/nginx/fastcgi_temp;fastcgi_intercept_errors on;tcp_nodelay on;gzip on;gzip_min_length 1k;gzip_buffers 4 8k;gzip_comp_level 5;gzip_http_version 1.1;gzip_types text/plain application/x-javascript text/css text/htm application/xml;server{listen 80;server_name www.example.com;index index.html index.htm index.php;root /data/www;location ~ \.php$ {include fastcgi_params;fastcgi_pass unix:/ php-fcgi.sock;fastcgi_index index.php;fastcgi_param SCRIPT_FILENAME /data/www$fastcgi_script_name;}}保存后就可以启动nginx了，在重启之前最好先检查一下是否有问题/usr/local/nginx/sbin/nginx  -t   如果显示 "syntax is ok  和  nginx.conf was tested  successfully"这样的信息，就说明配置没有问题了，否则就需要根据提示修改了。service nginx start 如果启动不了，请到/usr/local/nginx/logs/目录下查看nginx_error.log这个日志文件。若是没有这个日志文件，很有可能是那个目录没有写权限，请执行chmod +w /usr/local/nginx/logs/ service  nginx  restart 【测试是否解析php文件】vim /data/www/1.php 写入如下内容：<?phpphpinfo();?>然后设定hosts文件，访问 www.92csz.com/1.php 看是否能解析出这个页面。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

正则表达式
第十三章 正则表达式这部分内容可以说是学习shell脚本之前必学的内容。如果你这部分内容学的越好，那么你的shell脚本编写能力就会越强。所以不要嫌这部分内容啰嗦，也不要怕麻烦，要用心学习。一定要多加练习，练习多了就能熟练掌握了。在计算机科学中，正则表达式是这样解释的：它是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。对于系统管理员来讲，正则表达式贯穿在我们的日常运维工作中，无论是查找某个文档，抑或查询某个日志文件分析其内容，都会用到正则表达式。其实正则表达式，只是一种思想，一种表示方法。只要我们使用的工具支持表示这种思想那么这个工具就可以处理正则表达式的字符串。常用的工具有grep, sed, awk 等，下面笔者就介绍一下这三种工具的使用方法。【grep / egrep】笔者在前面的内容中多次提到并用到grep命令，可见它的重要性。所以好好学习一下这个重要的命令吧。你要知道的是grep连同下面讲的sed, awk都是针对文本的行才操作的。语法： grep  [-cinvABC]  ‘word’  filename -c ：打印符合要求的行数-i ：忽略大小写-n ：在输出符合要求的行的同时连同行号一起输出-v ：打印不符合要求的行-A ：后跟一个数字（有无空格都可以），例如 –A2则表示打印符合要求的行以及下面两行-B ：后跟一个数字，例如 –B2 则表示打印符合要求的行以及上面两行-C ：后跟一个数字，例如 –C2 则表示打印符合要求的行以及上下各两行以下，笔者举几个小例子帮助你好好掌握这个grep工具的用法。a. 过滤出带有某个关键词的行并输出行号b. 过滤不带有某个关键词的行，并输出行号c. 过滤出所有包含数字的行在前面也提到过这个”[ ]”的应用，如果是数字的话就用[0-9]这样的形式，当然有时候也可以用这样的形式[15]即只含有1或者5，注意，它不会认为是15。如果要过滤出数字以及大小写字母则要这样写[0-9a-zA-Z]。另外[ ]还有一种形式，就是[^字符] 表示除[ ]内的字符之外的字符。这就表示筛选包含oo字符串，但是不包含r字符。d. 过滤出文档中以某个字符开头或者以某个字符结尾的行在正则表达式中，”^”表示行的开始，”$”表示行的结尾，那么空行则表示”^$”,如果你只想筛选出非空行，则可以使用 “grep  -v  ‘^$’  filename”得到你想要的结果。现在想一下，如何打印出不以英文字母开头的行呢？e. 过滤任意一个字符与重复字符“.”表示任意一个字符，上例中，就是把符合r与o之间有两个任意字符的行过滤出来。“*”表示零个或多个前面的字符。‘ooo*’ 表示oo, ooo, oooo … 或者更多的’o’。现在你是否想到了’.*’ 这个组合表示什么意义？‘.*’表示零个或多个任意字符，空行也包含在内。f. 指定要过滤字符出现的次数这里用到了{ }，其内部为数字，表示前面的字符要重复的次数。上例中表示包含有两个o 即’oo’的行。注意，{ }左右都需要加上脱意字符’\’。另外，使用{ }我们还可以表示一个范围的，具体格式是 ‘\{n1,n2\}’其中n1<n2，表示重复n1到n2次前面的字符，n2还可以为空，则表示大于等于n1次。上面部分讲的grep，另外笔者常常用到egrep这个工具，简单点讲，后者是前者的扩展版本，我们可以用egrep完成grep不能完成的工作，当然了grep能完成的egrep完全可以完成。如果你嫌麻烦，egrep了解一下即可，因为grep的功能已经足够可以胜任你的日常工作了。下面笔者介绍egrep不用于grep的几个用法。为了试验方便，笔者把test.txt 编辑成如下内容：rot:x:0:0:/rot:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologinoperator:x:11:0:operator:/rooot:/sbin/nologinroooot:x:0:0:/rooooot:/bin/bash1111111111111111111111111111111aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. 筛选一个或一个以上前面的字符和grep 不同的是，egrep这里是使用’+’的。b. 筛选零个或一个前面的字符c. 筛选字符串1或者字符串2中间有一个’|’表示或者的意思，笔者用这个用的很多，所以这个你最好记一下。d.  egrep中’( )’的应用用’( )’表示一个整体，例如(oo)+就表示1个’oo’或者多个’oo’【sed 工具的使用】grep 工具的功能其实还不够强大，其实说白了，grep实现的只是查找功能，而它却不能实现把查找的内容替换掉。以前用vim的时候，可以查找也可以替换，但是只局限于在文本内部来操作，而不能输出到屏幕上。sed工具以及下面要讲的awk工具就能实现把替换的文本输出到屏幕上的功能了，而且还有其他更丰富的功能。sed和awk都是流式编辑器，是针对文档的行来操作的。a. 打印某行   sed -n ‘n’p filename 单引号内的n是一个数字，表示第几行b. 打印多行  打印整个文档用 -n ‘1,$’p  c. 打印包含某个字符串的行上面grep中使用的特殊字符，如’^’, ‘$’, ‘.’, ‘*’等同样也能在sed中使用。d. -e 可以实现多个行为e. 删除某行或者多行‘d’ 这个字符就是删除的动作了，不仅可以删除指定的单行以及多行，而且还可以删除匹配某个字符的行，另外还可以删除从某一行一直到文档末行。f. 替换字符或字符串上例中的’s’就是替换的命令，’g’为本行中全局替换，如果不加’g’，只换该行中出现的第一个。除了可以使用’/’外，还可以使用其他特殊字符例如’#’或者’@’都没有问题。现在思考一下，如何删除文档中的所有数字或者字母？有意思吧，[0-9]表示任意的数字。这里你也可以写成[a-zA-Z]甚至[0-9a-zA-Z]g. 调换两个字符串的位置这个就需要解释一下了，上例中用’()’把所想要替换的字符括起来成为一个整体，因为括号在sed中属于特殊符号，所以需要在前面加脱意字符’\’，替换时则写成’\1’, ‘\2’, ‘\3’ 的形式。除了调换两个字符串的位置外，笔者还常常用到在某一行前或者后增加指定内容。h. 直接修改文件的内容sed -i ‘s/:/#/g’  test.txt ，这样就可以直接更改test.txt文件中的内容了。由于这个命令可以直接把文件修改，所以在修改前最好先复制一下文件以免改错。sed常用到的也就上面这些了，只要你多加练习就能熟悉它了。为了能让你更加牢固的掌握sed的应用，笔者留几个练习题给你，希望你能认真完成。1. 把/etc/passwd 复制到/root/test.txt，用sed打印所有行；2. 打印test.txt的3到10行；3. 打印test.txt 中包含’root’的行；4. 删除test.txt 的15行以及以后所有行；5. 删除test.txt中包含’bash’的行；6. 替换test.txt 中’root’为’toor’；7. 替换test.txt中’/sbin/nologin’为’/bin/login’8. 删除test.txt中5到10行中所有的数字；9. 删除test.txt 中所有特殊字符（除了数字以及大小写字母）；10. 把test.txt中第一个单词和最后一个单词调换位置；11. 把test.txt中出现的第一个数字和最后一个单词替换位置；12. 把test.txt 中第一个数字移动到行末尾；13. 在test.txt  20行到末行最前面加’aaa:’；现在给出以上练习题的答案，你如果实在想不出如何操作，那你看看答案吧，请尽量多想一下。1.  /bin/cp /etc/passwd  /root/test.txt ;  sed -n '1,$'p test.txt2.  sed -n '3,10'p test.txt3.  sed -n '/root/'p test.txt4.  sed '15,$'d  test.txt5.  sed '/bash/'d test.txt6.  sed 's/root/toor/g' test.txt7.  sed 's#sbin/nologin#bin/login#g' test.txt8.  sed '5,10s/[0-9]//g' test.txt9.  sed 's/[^0-9a-zA-Z]//g' test.txt10.  sed 's/\(^[a-zA-Z][a-zA-Z]*\)\([^a-zA-Z].*\)\([^a-zA-Z]\)\([a-zA-Z][a-zA-Z]*$\)/\4\2\3\1/' test.txt11.  sed 's#\([^0-9][^0-9]*\)\([0-9][0-9]*\)\([^0-9].*\)\([^a-zA-Z]\)\([a-zA-Z][a-zA-Z]*$\)#\1\5\3\4\2#' test.txt12.  sed 's#\([^0-9][^0-9]*\)\([0-9][0-9]*\)\([^0-9].*$\)#\1\3\2#' test.txt13.  sed '20,$s/^.*$/aaa:&/' test.txt【awk工具的使用】上面也提到了awk和sed一样是流式编辑器，它也是针对文档中的行来操作的，一行一行的去执行。awk比sed更加强大，它能做到sed能做到的，同样也能做到sed不能做到的。awk工具其实是很复杂的，有专门的书籍来介绍它的应用，但是笔者认为学那么复杂没有必要，只要能处理日常管理工作中的问题即可。何必让自己的脑袋装那么东西来为难自己？毕竟用的也不多，即使现在教会了你很多，你也学会了，如果很久不用肯定就忘记了。鉴于此，笔者仅介绍比较常见的awk应用，如果你感兴趣的话，再去深入研究吧。a. 截取文档中的某个段解释一下，-F 选项的作用是指定分隔符，如果不加-F指定，则以空格或者tab为分隔符。Print为打印的动作，用来打印出某个字段。$1为第一个字段，$2为第二个字段，依次类推，有一个特殊的那就是$0，它表示整行。注意awk的格式，-F后紧跟单引号，然后里面为分隔符，print的动作要用’{ }’括起来，否则会报错。print还可以打印自定义的内容，但是自定义的内容要用双引号括起来。b. 匹配字符或字符串跟sed很类似吧，不过还有比sed更强大的匹配。可以让某个段去匹配，这里的’~’就是匹配的意思，继续往下看awk还可以多次匹配，如上例中匹配完root，再匹配test，它还可以只打印所匹配的段。不过这样没有啥意义，笔者只是为了说明awk确实比sed强大。d. 条件操作符awk中是可以用逻辑符号判断的，比如’==’就是等于，也可以理解为“精确匹配”。另外也有’>’, ‘>=’, ‘<’, ‘<=’, ‘!=’ 等等，值得注意的是，即使$3为数字，awk也不会把它当数字看待，它会认为是一个字符。所以不要妄图去拿$3当数字去和数字做比较。这样是得不到我们想要的效果的。这里只是字符与字符之间的比较，’6’是>’500’的。上例中用的是’!=’ 即不匹配。另外还可以使用”&&” 和 “||”表示“并且”和“或者”的意思。也可以是或者的关系d. awk的内置变量常用的变量有：NF ：用分隔符分隔后一共有多少段；NR ：行数上例中，打印总共的段数以及最后一段的值。可以使用NR作为条件，来打印出指定的行。e. awk中的数学运算awk比较强的地方，还在于能把某个段改成指定的字符串，下面还有更强的呢！当然还可以计算某个段的总和。这里的END要注意一下，表示所有的行都已经执行，这是awk特有的语法，其实awk连同sed都可以写成一个脚本文件，而且有他们特有的语法，在awk中使用if判断、for循环都是可以的，只是笔者认为日常管理工作中没有必要使用那么复杂的语句而已。注意这里’( )’的使用。基本上，正则表达的内容就这些了。但是笔者要提醒你一下，笔者介绍的这些仅仅是最基本的东西，并没有提啊深入的去讲sed和awk，但是完全可以满足日常工作的需要，有时候也许你会碰到比较复杂的需求，如果真遇到了就去请教一下google吧。下面出几道关于awk的练习题，希望你要认真完成。1. 用awk 打印整个test.txt （以下操作都是用awk工具实现，针对test.txt）；2. 查找所有包含’bash’的行；3. 用’:’作为分隔符，查找第三段等于0的行；4. 用’:’作为分隔符，查找第一段为’root’的行，并把该段的’root’换成’toor’(可以连同sed一起使用)；5. 用’:’作为分隔符，打印最后一段；6. 打印行数大于20的所有行；7. 用’:’作为分隔符，打印所有第三段小于第四段的行；8. 用’:’作为分隔符，打印第一段以及最后一段，并且中间用’@’连接 （例如，第一行应该是这样的形式 “root@/bin/bash”；9. 用’:’作为分隔符，把整个文档的第四段相加，求和；下面给出答案：1. awk '{print $0}' test.txt2. awk '/bash/' test.txt3. awk -F':' '$3=="0"' test.txt4. awk -F':' '$1=="root"' test.txt |sed 's/root/toor/'5. awk -F':' '{print $NF}' test.txt6. awk -F':' 'NR>20' test.txt7. awk -F':' '$3<$4' test.txt8. awk -F':' '{print $1"@"$NF}' test.txt9. awk -F':' '{(sum+=$4)}; END {print sum}' test.txt

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

安装RPM包或者安装源码包
第十一章 安装RPM包或者安装源码包在windows下安装一个软件很轻松，只要双击.exe的文件，安装提示连续“下一步”即可，然而linux系统下安装一个软件似乎并不那么轻松了，因为我们不是在图形界面下。所以你要学会如何在linux下安装一个软件。在前面的内容中多次提到的yum，这个yum是Redhat所特有的安装RPM程序包的工具，使用起来相当方便。因为使用RPM安装某一个程序包有可能会因为该程序包依赖另一个程序包而无法安装。而使用yum工具就可以连同依赖的程序包一起安装。当然CentOS同样可以使用yum工具，而且在CentOS中你可以免费使用yum，但Redhat中只有当你付费后才能使用yum，默认是无法使用yum的。在介绍yum之前先说一说RPM相关的东西。【RPM工具】RPM是”Redhat  Package  Manager”的缩写，根据名字也能猜到这是Redhat公司开发出来的。RPM 是以一种数据库记录的方式来将你所需要的套件安装到你的Linux 主机的一套管理程序。也就是说，你的linux系统中存在着一个关于RPM的数据库，它记录了安装的包以及包与包之间依赖相关性。RPM包是预先在linux机器上编译好并打包好的文件，安装起来非常快捷。但是也有一些缺点，比如安装的环境必须与编译时的环境一致或者相当；包与包之间存在着相互依赖的情况；卸载包时需要先把依赖的包卸载掉，如果依赖的包是系统所必须的，那就不能卸载这个包，否则会造成系统崩溃。如果你的光驱中还有系统安装盘的话，你可以通过”mount /dev/cdrom /mnt”命令把光驱挂载到/mnt目录下，那么你会在/mnt/CentOS目录下看到很多.rpm的文件，这就是RPM包了。每一个rpm包的名称都由”-“和”.”分成了若干部分。就拿 a2ps-4.13b-57.2.el5.i386.rpm 这个包来解释一下，a2ps 为包名；4.13b则为版本信息；57.2.el5为发布版本号；i386为运行平台。其中运行平台常见的有i386, i586, i686, x86_64 ，需要你注意的是cpu目前是分32位和64位的，i386,i586和i686都为32位平台，x86_64则代表为64位的平台。另外有些rpm包并没有写具体的平台而是noarch，这代表这个rpm包没有硬件平台限制。例如 alacarte-0.10.0-1.fc6.noarch.rpm 。下面介绍一下rpm常用的命令。1）安装一个rpm包-i ：安装的意思-v ：可视化-h ：显示安装进度另外在安装一个rpm包时常用的附带参数有：--force 强制安装，即使覆盖属于其他包的文件也要安装--nodeps 当要安装的rpm包依赖其他包时，即使其他包没有安装，也要安装这个包2）升级一个rpm包rpm -Uvh  filename    -U ：即升级的意思3）卸载一个rpm包rpm -e  filename  这里的filename是通过rpm的查询功能所查询到的，稍后会作介绍。卸载时后边跟的filename和安装时的是有区别的。上面命令提到的 “|”在linux系统中用的非常多也非常有用，它是一个管道符，用来把前面运行的结果传递给后面的命令。以后会做详细介绍，而后出现的grep命令则是用来过滤某个关键词的工具，在后续章节中会做详细介绍。4）查询一个包是否安装rpm  -q  rpm包名（这里的包名，是不带有平台信息以及后缀名的）如果加上了平台信息以及后缀名反而不能查出来。你还可以查询当前系统中所安装的所有rpm包。因为太多，所以笔者列出前十个。5）得到一个rpm包的相关信息rpm  -qi  包名 （同样不需要加平台信息与后缀名）6）列出一个rpm包安装的文件rpm -ql  包名通过上面的命令可以看出vim是通过安装vim-enhanced-7.0.109-6.el5这个rpm包得来的。那么反过来如何通过一个文件去查找是由安装哪个rpm包得来的？7）列出某一个文件属于哪个rpm包rpm  -qf  文件的绝对路径前面讲过如何查找一个文件（可执行命令）的绝对路径所以你也可以把这两条命令连起来写看到了吗，which vim 这条命令是由两个反引号引起来的，这代表引用反引号里面的命令所产生的结果。关于rpm工具的使用还有很多内容，笔者就不一一列举了，只要你掌握上面这些内容，完全够你平时工作用的了。【yum工具】介绍完rpm工具后，还需要你掌握最常用的yum工具，这个工具比rpm工具好用多了，当然前提是你使用的linux系统是支持yum的。yum最大的优势在于可以联网去下载所需要的rpm包，然后自动安装，在这个工程中如果要安装的rpm包有依赖关系，yum会帮你解决掉这些依赖关系依次安装所有rpm包。下面笔者介绍常用的yum 命令。1） 列出所有可用的rpm包  “yum list “限于篇幅，笔者只列举出来前7个包信息。从上例中可以看到有”mirrors.163.com”信息出现，这是在告诉用户，它是从mirrors.163.com这里下载到的rpm包资源。如果你使用的是CentOS则你可以从/etc/yum.repos.d/CentOS-Base.repo这个文件下看到相关的配置信息。从上面的例子中你还可以看到最左侧是rpm包名字，中间是版本信息，最右侧是安装信息，如果安装了就显示installed，未安装则显示base或者extras，如果是该rpm包已安装但需要升级则显示updates。2）搜索一个rpm包  “yum search  [相关关键词]”除了这样搜索外，笔者常用的是利用grep来过滤相信你也会喜欢用后者吧，这样看起来简明的多。3）安装一个rpm包 “yum install  [-y]  [rpm包名]”如果不加-y选项，则会以与用户交互的方式安装，首先是列出需要安装的rpm包信息，然后会问用户是否需要安装，输入y则安装，输入n则不安装。而笔者嫌这样太麻烦，所以直接加上-y选项，这样就省略掉了问用户是否安装的那一步。4）卸载一个rpm包 “yum remove  [-y]  [rpm包名]”卸载和安装一样，你也可以直接加上-y选项来省略掉和用户交互的步骤。在这里笔者要提醒你一下，卸载某个rpm包一定要看清楚了，不要连其他重要的rpm包一起卸载了，以免影响正常的业务。4）升级一个rpm包 “yum  update [-y]  [rpm包]”以上介绍了如何使用yum搜索、安装、卸载以及升级一个rpm包，如果你掌握了这些那么你就已经可以解决日常工作中遇到的与rpm包相关问题了。当然yum工具还有好多其他好用的命令，笔者不在列举出来，如果你感兴趣就去man一下吧。除此之外，笔者还会教你一些关于yum的小应用。1  使用本地的光盘来制作一个yum源有时候你的linux系统不能联网，当然就不能很便捷的使用联网的yum源了，这时候就需要你自己会利用linux系统光盘制作一个yum源。具体步骤如下：a.挂载光盘[root@fortest Server]# mount -t iso9660 -o loop /dev/cdrom /mntb.删除/etc/yum.repos.d目录所有的repo文件[root@fortest Server]# rm -rf /etc/yum.repos.d/*c.创建新文件dvd.repo[root@fortest Server]# vim /etc/yum.repos.d/dvd.repo加入以下内容：[dvd]name=install dvdbaseurl=file:///mntenabled=1gpgcheck=0d.刷新repos,生成缓存[root@fortest Server]#yum makecache然后就可以使用yum命令安装你所需要的软件包了 2 利用yum工具下载一个rpm包有时，我们需要下载一个rpm包，只是下载下来，拷贝给其他机器使用，前面也介绍过yum安装rpm包的时候，首先得下载这个rpm包然后再去安装，所以使用yum完全可以做到只下载而不安装。a. 首选要安装 yum-downloadonly # yum install -y yum-downloadonly.noarchb. 下载一个rpm包而不安装# yum install test.rpm -y --downloadonly   //这样虽然下载了，但是并没有保存到我们想要的目录下，那么如何指定目录呢？c. 下载到指定目录# yum install test.rpm -y --downloadonly   --downloaddir=/usr/local/src 【安装源码包】其实，在linux下面安装一个源码包是最常用的，笔者在日常的管理工作中，大部分软件都是通过源码安装的。安装一个源码包，是需要我们自己把源代码编译成二进制的可执行文件。如果你读得懂这些源代码，那么你就可以去修改这些源代码自定义功能，然后再去编译成你想要的。使用源码包的好处除了可以自定义修改源代码外还可以定制相关的功能，因为源码包在编译的时候是可以附加额外的选项的。源码包的编译用到了linux系统里的编译器，常见的源码包一般都是用C语言开发的，这也是因为C语言为linux上最标准的程序语言。Linux上的C语言编译器叫做gcc，利用它就可以把C语言变成可执行的二进制文件。所以如果你的机器上没有安装gcc就没有办法去编译源码。你可以使用 yum install  -y  gcc 来完成安装。安装一个源码包，通常需要三个步骤：1.  ./config  在这一步可以定制功能，加上相应的选项即可，具有有什么选项可以通过”./config  --help ”命令来查看。在这一步会自动检测你的linux系统与相关的套件是否有编译该源码包时需要的库，因为一旦缺少某个库就不能完成编译。只有检测通过后才会生成一个Makefile文件。2.  make	  使用这个命令会根据Makefile文件中预设的参数进行编译，这一步其实就是gcc在工作了。3.  make install  安装步骤，生成相关的软件存放目录和配置文件的过程。上面介绍的3步并不是所有的源码包软件都一样的，笔者以前也曾经遇到过，安装步骤并不是这样，也就是说源码包的安装并非具有一定的标准安装步骤。这就需要你拿到源码包解压后，然后进入到目录找相关的帮助文档，通常会以INSTALL或者README为文件名。所以，你一定要去看一下。下面笔者会编译安装一个源码包来帮你更深刻的去理解如何安装源码包。1. 下载一个源码包这里要提一下，建议以后你把所有下载的源码包放到/usr/local/src/目录下，这个并不是必须的，只是一个约定。方便你和你的同事将来更好的去运维这台服务器。wget即为下载的命令，后边跟源码包的下载地址。该地址为笔者从网上找的一个apache的下载地址。2. 解压源码包一般的源码包都是一个压缩包，如何解压一个.tar.gz的包上一章讲过的。3. 配置相关的选项，并生成Makefile使用./config  --help 可以查看可用的选项。一般常用的有”--prefix=PREFIX “ 这个选项的意思是定义软件包安装到哪里。到这里，笔者再提一个小小的约定，通常源码包都是安装在/usr/local/目录下的。比如，我们把apache安装在/usr/local/apache2下，那么这里就应该这样写” --prefix=/usr/local/apache2”。其他还有好多选项，如果你有耐心你可以挨个去看一看都有什么作用。笔者在这里只定义了apache的安装目录，其他都是默认。回车后，开始执行check操作。等check结束后生成了Makefile文件除了查看有没有生成Makefile文件来判定有没有完成./config 的操作外，还可以通过这个命令”echo $?”来判定，如果是0，则表示上一步操作成功完成，否则就是没有成功。4.  进行编译这一步操作，就是把源代码编译成二进制的可执行文件，这一步也是最漫长的一步，编译时间的长短取决于源代码的多少和机器配置。5.  安装  在安装前，先确认上一步操作是否成功完成。make install 会创建相应的目录以及文件。当完成安装后，会在/usr/local目录下多了一个apache2目录，这就是apache所安装的目录了。其实在日常的源码安装工作中，并不是每个都像笔者这样顺利完成安装的，遇到错误不能完成安装的情况是很多的。通常都是因为缺少某一个库文件导致的。这就需要你仔细琢磨报错信息或者查看当前目录下的config.log去得到相关的信息。另外，如果自己不能解决那就去网上google一下吧，通常你会得到你想要的答案。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

OpenVAS漏洞扫描基础教程之OpenVAS概述及安装及配置OpenVAS服务


OpenVAS漏洞扫描基础教程之OpenVAS概述及安装及配置OpenVAS服务

OpenVAS基础知识

OpenVAS（Open Vulnerability Assessment System）是开放式漏洞评估系统，其核心部分是一个服务器。该服务器包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。OpenVAS不同与传统的漏洞扫描软件。所有的OpenVAS软件都是免费的，而且还采用了Nessus（一款强大的网络扫描工具）较早版本的一些开放插件。虽然Nessus很强大，但是该工具不开源，而且免费版的功能又比较局限。所以，本章将对OpenVAS工具进行详细介绍。

OpenVAS概述

OpenVAS是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。本节将对OpenVAS的概念及架构做一个简单介绍。

什么是OpenVAS

OpenVAS是一款开放式的漏洞评估工具，主要用来检测目标网络或主机的安全性。该工具是基于C/S（客户端/服务器），B/S（浏览器/服务器）架构进行工作，用户通过浏览器或者专用客户端程序来下达扫描任务，服务器端负载授权，执行扫描操作并提供扫描结果。

OpenVAS的架构

一套完整的OpenVAS系统包括服务器端和端口端的多个组件，如图1.1所示。




图1.1  OpenVAS的架构

上图就是OpenVAS系统的一个架构。下面分别介绍服务器层和客户层，分别所需安装的组件。如下所示：

1.服务器层组件（建议都安装）


q  openvas-scanner（扫描器）：负责调用各种漏洞检测插件，完成实际的扫描操作。

q  openvas-manager（管理器）：负责分配扫描任务，并根据扫描结果生产评估报告。

q  openvas-administrator（管理者）：负责管理配置信息，用户授权等相关工作。


2.客户层组件（任选其一即可）


q  openvas-cli（命令行接口）：负责提供从命令行访问OpenVAS服务层程序。

q  greenbone-security-assistant（安装助手）：负责提供访问OpenVAS服务层的Web接口，便于通过浏览器来建立扫描任务，是使用最简便的客户层组件。

q  Greenbone-Desktop-Suite（桌面套件）：负责提供访问OpenVAS服务层的图形程序界面，主要允许在Windows客户机中。


提示：OpenVAS服务器端仅支持安装Linux操作系统中。但是，客户端安装在Windows和Linux系统均可。

安装及配置OpenVAS服务

当对OpenVAS工具了解后，就可以来使用该工具了。在使用该工具之前，首先介绍下它的安装方法。

安装OpenVAS

OpenVAS工具的安装比较简单，而且在OpenVAS官网提供了在各种操作系统中的安装方法。其下载地址为http://www.openvas.org/install-packages.html。但是，如果用户在安装时，可能会出现很多依赖包需要手动解决。如果不能够很好的解决依赖关系包，将无法成功安装OpenVAS工具。所以，为了方便用户使用，Kali
 Linux系统中已经默认安装了该工具，用户可以直接使用。

如果用户发现自己系统中安装的OpenVAS不是最新版本的话，可以通过以下方法安装最新版的OpenVAS工具。具体方法如下所示：

（1）更新软件包列表。执行命令如下所示：


root@Kali:~# apt-get update


执行以上命令后，将会获取最近的软件包列表。

（2）获取到最新的软件包，。执行命令如下所示：


root@Kali:~# apt-get dist-upgrade


执行以上命令后，将会对有更新的包进行下载并安装。

（3）重新安装OpenVAS工具。执行命令如下所示：


root@Kali:~# apt-get install openvas


执行以上命令后，如果没有报错，则说明已成功安装OpenVAS工具。如果当前系统中已经安装了最新版的OpenVAS软件，将会显示以下类似信息：


正在读取软件包列表... 完成

正在分析软件包的依赖关系树      

正在读取状态信息... 完成 
     

openvas 已经是最新的版本了。


下列软件包是自动安装的并且现在不需要了：


  firmware-mod-kit libafpclient0 libhackrf liblzma-dev libmozjs22d libnet-daemon-perl libnfc3 libplrpc-perl

  libruby libtsk3-3 libwireshark2 libwiretap2 libwsutil2 openjdk-7-jre-lib python-apsw python-utidylib

  ruby-crack ruby-diff-lcs ruby-rspec ruby-rspec-core ruby-rspec-expectations ruby-rspec-mocks ruby-simplecov

  ruby-simplecov-html unrar-free xulrunner-22.0

Use 'apt-get autoremove' to remove them.

升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 20 个软件包未被升级。


从以上输出信息中，可以看到OpenVAS已经是最新版本了。

配置OpenVAS服务

OpenVAS工具安装成功后，还需要进行一些配置才可以使用。例如，初始化服务、同步插件及启动服务等。下面将介绍在Kali Linux中配置OpenVAS服务的方法。

【示例1-1】配置OpenVAS服务。具体操作步骤如下所示：

（1）下载并更新OpenVAS库。执行命令如下所示：


root@Kali:~# openvas-setup

/var/lib/openvas/private/CA created

/var/lib/openvas/CA created                                                             
 #创建证书

[i] This script synchronizes an NVT collection with the 'OpenVAS NVT Feed'.

[i] The 'OpenVAS NVT Feed' is provided by 'The OpenVAS Project'.

[i] Online information about this feed: 'http://www.openvas.org/openvas-nvt-feed.html'.

[i] NVT dir: /var/lib/openvas/plugins

[w] Could not determine feed version.

[i] rsync is not recommended for the initial sync. Falling back on http.

[i] Will use wget

[i] Using GNU wget: /usr/bin/wget

[i] Configured NVT http feed: http://www.openvas.org/openvas-nvt-feed-current.tar.bz2

[i] Downloading to: /tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2

--2015-07-28 09:53:24--  http://www.openvas.org/openvas-nvt-feed-current.tar.bz2

正在解析主机 www.openvas.org (www.openvas.org)...
 5.9.98.186

正在连接 www.openvas.org (www.openvas.org)|5.9.98.186|:80... 已连接。

已发出 HTTP 请求，正在等待回应...
 200 OK

长度：17065793 (16M) [application/x-bzip2]

正在保存至: “/tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2”

100%[======================================================================>] 17,065,793  
 337K/s 用时 34s    

2015-07-28 09:54:09 (484 KB/s) - 已保存 “/tmp/openvas-nvt-sync.QH0Vl5ckzd/openvas-feed-2015-07-28-23736.tar.bz2” [17065793/17065793])

2008/

2008/deb_008_1.nasl                                                                       
 #同步NVT库

...... Please report synchronization problems to openvas-feed@intevation.de.

If you have any other questions, please use the OpenVAS mailing lists

or the OpenVAS IRC chat. See http://www.openvas.org/ for details.

receiving incremental file list

./

COPYING

        1493 100%    1.42MB/s    0:00:00 (xfer#1, to-check=63/65)

COPYING.asc

         198 100%  193.36kB/s    0:00:00 (xfer#2, to-check=62/65)

nvdcve-2.0-2002.xml

    19454677 100%  224.29kB/s    0:01:24 (xfer#3, to-check=61/65)

nvdcve-2.0-2002.xml.asc

         198 100%    0.44kB/s    0:00:00 (xfer#4, to-check=60/65)

nvdcve-2.0-2003.xml

     5691998 100%  266.11kB/s    0:00:20 (xfer#5, to-check=59/65)

nvdcve-2.0-2003.xml.asc

         198 100%    7.73kB/s    0:00:00 (xfer#6, to-check=58/65)

......

Country Name (2 letter code) [DE]:State or Province Name (full name) [Some-State]:Locality Name (eg, city) []:Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organizational Unit Name
 (eg, section) []:Common Name (eg, your name or your server's hostname) []:Email Address []:Using configuration from /tmp/openvas-mkcert-client.24593/stdC.cnf

Check that the request matches the signature

Signature ok

The Subject's Distinguished Name is as follows

countryName           :PRINTABLE:'DE'                                                             
 #国家名

localityName          :PRINTABLE:'Berlin'                                                           
 #本地名

commonName            :PRINTABLE:'om'                                                        
 #普通名

Certificate is to be certified until Jul 27 03:02:02 2016 GMT (365 days)

Write out database with 1 new entries

Data Base Updated

Stopping OpenVAS Manager: openvasmd.

Stopping OpenVAS Scanner: openvassd.

Starting OpenVAS Scanner: openvassd.

Starting OpenVAS Manager: openvasmd.

Restarting Greenbone Security Assistant: gsad.                                                      
 #OpenVAS服务已启动

User created with password '4b44aa5b-5535-4525-b1db-d87c9b5d81cd'.                #创建的用户密码


以上就是更新OpenVAS库的一个过程。从输出的信息中，可以看到在该过程中创建了证书、下载及更新了所有的扫描插件等。在该更新过程中，将会创建一个名为admin的用户，并且自动生成了一个密码。在本例中，生成的密码为4b44aa5b-5535-4525-b1db-d87c9b5d81cd。在该过程中输出的信息较多，由于篇幅的原因，中间部分内容使用省略号（......）取代了。由于此过程会下载大量的插件，所以该过程大概需要半个小时的时间。不过，再次进行同步时，时间就快了。

提示：在更新插件时主要是看用户的网速。如果网速好的话，可能不需要很长时间。但是，如果网速不好的话，需要的时间会很长，请用户耐心等待。而且，在该过程中用户不需要进行任何操作。

（2）在更新OpenVAS库时，自动为admin用户创建了一个密码。但是，该密码比较长，所以不容易记忆。为了方便用户记忆和输入，可以使用openvasmd命令修改该密码。其中，执行命令如下所示：


root@Kali:~# openvasmd --user=admin --new-password=123456


执行以上命令后，将不会输出任何信息。以上命令中，--user选项指定的是修改密码的用户为admin，--new-password选项指定将admin用户的密码修改为“123456”。

（3）为了确认OpenVAS是否安装完成，可以使用openvas-check-setup对该服务进行检查。如下所示：


root@Kali:~# openvas-check-setup

openvas-check-setup 2.3.0

  Test completeness and readiness of OpenVAS-8

  (add '--v6' or '--v7' or '--9'

   if you want to check for another OpenVAS version)

  Please report us any non-detected problems and

  help us to improve this check routine:

  http://lists.wald.intevation.org/mailman/listinfo/openvas-discuss

  Send us the log-file (/tmp/openvas-check-setup.log) to help analyze the problem.

  Use the parameter --server to skip checks for client tools

  like GSD and OpenVAS-CLI.

Step 1: Checking OpenVAS Scanner ...

        OK: OpenVAS Scanner is present in version 5.0.1.

        OK: OpenVAS Scanner CA Certificate is present as /var/lib/openvas/CA/cacert.pem.

        OK: OpenVAS Scanner server certificate is valid and present as /var/lib/openvas/CA/servercert.pem.

        OK: NVT collection in /var/lib/openvas/plugins contains 40087 NVTs.

        WARNING: Signature checking of NVTs is not enabled in OpenVAS Scanner.

        SUGGEST: Enable signature checking (see http://www.openvas.org/trusted-nvts.html).

        OK: The NVT cache in /var/cache/openvas contains 40087 files for 40087 NVTs.

        OK: redis-server is present in version 2.4.14.

        OK: scanner (kb_location setting) is configured properly using the redis-server socket: /var/lib/redis/redis.sock

        OK: redis-server is running and listening on socket: /var/lib/redis/redis.sock.

        OK: redis-server configuration is OK and redis-server is running.

Step 2: Checking OpenVAS Manager ...

        OK: OpenVAS Manager is present in version 6.0.1.

        OK: OpenVAS Manager client certificate is valid and present as /var/lib/openvas/CA/clientcert.pem.

        OK: OpenVAS Manager database found in /var/lib/openvas/mgr/tasks.db.

        OK: Access rights for the OpenVAS Manager database are correct.

        OK: At least one user exists.

        OK: sqlite3 found, extended checks of the OpenVAS Manager installation enabled.

        OK: OpenVAS Manager database is at revision 146.

        OK: OpenVAS Manager expects database at revision 146.

        OK: Database schema is up to date.

        OK: OpenVAS Manager database contains information about 40087 NVTs.

        OK: OpenVAS SCAP database found in /var/lib/openvas/scap-data/scap.db.

        OK: OpenVAS CERT database found in /var/lib/openvas/cert-data/cert.db.

        OK: xsltproc found.

Step 3: Checking user configuration ...

        WARNING: Your password policy is empty.

        SUGGEST: Edit the /etc/openvas/pwpolicy.conf file to set a password policy.

Step 4: Checking Greenbone Security Assistant (GSA) ...

        OK: Greenbone Security Assistant is present in version 6.0.1.

Step 5: Checking OpenVAS CLI ...

        OK: OpenVAS CLI version 1.4.0.

Step 6: Checking Greenbone Security Desktop (GSD) ...

        SKIP: Skipping check for Greenbone Security Desktop.

Step 7: Checking if OpenVAS services are up and running ...

        OK: netstat found, extended checks of the OpenVAS services enabled.

        OK: OpenVAS Scanner is running and listening only on the local interface.

        OK: OpenVAS Scanner is listening on port 9391, which is the default port.

        WARNING: OpenVAS Manager is running and listening only on the local interface.

        This means that you will not be able to access the OpenVAS Manager from the

        outside using GSD or OpenVAS CLI.

        SUGGEST: Ensure that OpenVAS Manager listens on all interfaces unless you want

        a local service only.

        OK: OpenVAS Manager is listening on port 9390, which is the default port.

        OK: Greenbone Security Assistant is listening on port 9392, which is the default port.

Step 8: Checking nmap installation ...

        WARNING: Your version of nmap is not fully supported: 6.47

        SUGGEST: You should install nmap 5.51 if you plan to use the nmap NSE NVTs.

Step 10: Checking presence of optional tools ...

        OK: pdflatex found.

        OK: PDF generation successful. The PDF report format is likely to work.

        OK: ssh-keygen found, LSC credential generation for GNU/Linux targets is likely to work.

        WARNING: Could not find rpm binary, LSC credential package generation for RPM and DEB based targets will not work.

        SUGGEST: Install rpm.

        WARNING: Could not find makensis binary, LSC credential package generation for Microsoft Windows targets will not work.

        SUGGEST: Install nsis.

It seems like your OpenVAS-8 installation is OK.

If you think it is not OK, please report your observation

and help us to improve this check routine:

http://lists.wald.intevation.org/mailman/listinfo/openvas-discuss

Please attach the log-file (/tmp/openvas-check-setup.log) to help us analyze the problem.


从以上输出信息中，可以看到以上过程进行了九步检查。检查完后，看到“It seems like your OpenVAS-7 installation is OK.”信息，则表示OpenVAS安装成功。接下来，用户就可以使用OpenVAS工具实施扫描了。

本文选自：OpenVAS漏洞扫描基础教程大学霸内部资料，转载请注明出处，尊重技术尊重IT人！




版权声明：本文为博主原创文章，未经博主允许不得转载。

SVN命令
svn从服务器导出项目：
以下命令会在执行命令的当前目录下自动生成projectFolderNameXXX的目录，里面的文件是svn://ip/folderName里导出的。
svn export svn://ip/folderName projectFolderNameXXX
还有以下写法：
svn export svn://ip:port/folderName projectFolderNameXXX
svn export http://ip:port/folderName projectFolderNameXXX
svn export https://ip:port/folderName projectFolderNameXXX
有时候，服务器的svn命令只能在sudo命令下执行，那么需要在svn命令前加上sudo：
sodu svn export svn://ip:port/folderName projectFolderNameXXX
其他svn命令： 
svn add values/strings.xml             //–添加
svn st   //–查看状态
svn ci   //–提交 svn ci -m “svn ci, permission”
1、 将文件checkout到本地目录
svn checkout   path（path是服务器上的目录） 
   例如：svn checkout svn: // 192.168 . 1.1 / pro / domain 
    简写：svn co 
2、 往版本库中添加新的文件
svn  add   file  
   例如：svn  add   test.php(添加test.php) 
   svn  add   * .php(添加当前目录下所有的php文件) 
3、 将改动的文件提交到版本库
svn commit   -m  ” LogMessage ”   [ -N ]   [ –no-unlock ]   PATH (如果选择了保持锁，就使用–no-unlock开关) 
   例如：svn commit -m  ” add test file for my test ”   test.php 
    简写：svn ci
4、 加锁/解锁
svn lock   -m  ” LockMessage ”   [ –force ]   PATH  
   例如：svn lock -m  ” lock test file ”   test.php 
svn unlock   PATH 
5、 更新到某个版本
svn update -r  m path 
   例如： 
      svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。 
     svn update -r  200   test.php(将版本库中的文件test.php还原到版本200) 
     svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件 ，然后清除svn resolved ，最后再提交commit) 
   简写：svn up 
6、 查看文件或者目录状态
1 ）svn status   path （目录下的文件和子目录的状态，正常状态不显示） 
   【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】 
   2 ）svn status -v   path (显示文件和子目录状态) 
   第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。 
   注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。 
简写：svn st 
7、 删除文件
svn delete   path -m  ” delete test fle ”  
   例如：svn delete svn:// 192.168.1.1 /pro/domain/test.php -m  ” delete test file ” 
    或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种 
简写：svn (del, remove, rm) 
8、 查看日志
svn log   path 
   例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化 
9、 查看文件详细信息
svn info   path 
   例如：svn info test.php 
10、 比较差异
svn diff   path(将修改的文件与基础版本比较) 
   例如：svn diff test.php 
svn diff   -r m:n path(对版本m和版本n比较差异) 
   例如：svn diff -r 200:201 test.php 
   简写：svn di 
11、 将两个版本之间的差异合并到当前文件
svn merge -r   m:n path 
   例如：svn merge -r  200 : 205   test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下） 
12、 SVN 帮助
svn help
svn help ci
以上是常用命令，下面写几个不经常用的
——————————————————————————  来
13、 版本库下的文件和目录列表
svn list  path 
   显示path目录下的所有属于版本库的文件和目录 
简写：svn ls 
14、 创建纳入版本控制下的新目录
svn mkdir : 创建纳入版本控制下的新目录。 
用法: 1、mkdir PATH… 
         2、mkdir URL… 
创建版本控制的目录。 
1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增 
     调度，以待下一次的提交。 
2、每个以URL指定的目录，都会透过立即提交于仓库中创建。 
在这两个情况下，所有的中间目录都必须事先存在。
15、 恢复本地修改
svn revert : 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert: 
用法: revert PATH… 
注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复 
        被删除的目录
16、 代码库URL变更
svn switch (sw):   更新工作副本至不同的URL。 
用法: 1、switch URL [PATH] 
        2、switch –relocate FROM TO [PATH…]
1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将 
     服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的 
     方法。 
2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动 
    (比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用 
    这个命令更新工作副本与仓库的对应关系。
17、 解决冲突
svn resolved:   移除工作副本的目录或文件的“冲突”状态。 
用法: resolved PATH… 
注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的 
        相关文件，然后让 PATH 可以再次提交。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：欢迎转载，转载请注明原地址，谢谢！

python 使用ioctl() 获得网卡IP 和MAC地址
自从使用了Python，便对其爱不释手。听说Python可以做任何你可以想到的事情，前些天看Linux网络的时候，看到了ioctl()这个函数的强大功能，linux下常用工具route和arp命令就是基于这个函数来完成的，只需要设定对应的option即可。那么，问题来了，python中有无类似功能的方法/函数呢，若我想获得某个接口的配置的IP和其MAC地址，使用C写的代码太多了，Python中的fcntl.ioctl()可以妥妥的完成这个任务。下面来点干货吧。

#! /usr/bin/env python

from fcntl import ioctl
import socket
import struct
import sys

sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
try:
    ip=ioctl(sock.fileno(),0x8915,struct.pack('64s','eth0'))
    ip=socket.inet_ntoa(ip[20:24])
    print ip
except:
    print sys.exc_info()

结果如下：

172.16.24.12


C语言的ioctl中使用的常量SIOCGIFADDR, 对应的值为0x8915,对应关系的定义文件在/usr/include/i386-linux-gnu/bits/ioctls.h
截个片段来看一下吧


* Socket configuration controls. */
#define SIOCGIFNAME 0x8910      /* get iface name       */
#define SIOCSIFLINK 0x8911      /* set iface channel        */
#define SIOCGIFCONF 0x8912      /* get iface list       */
#define SIOCGIFFLAGS    0x8913      /* get flags            */
#define SIOCSIFFLAGS    0x8914      /* set flags            */
#define SIOCGIFADDR 0x8915      /* get PA address       */
#define SIOCSIFADDR 0x8916      /* set PA address       */
#define SIOCGIFDSTADDR  0x8917      /* get remote PA address    */
#define SIOCSIFDSTADDR  0x8918      /* set remote PA address    */
#define SIOCGIFBRDADDR  0x8919      /* get broadcast PA address */
#define SIOCSIFBRDADDR  0x891a      /* set broadcast PA address */
#define SIOCGIFNETMASK  0x891b      /* get network PA mask      */
#define SIOCSIFNETMASK  0x891c      /* set network PA mask      */
#define SIOCGIFMETRIC   0x891d      /* get metric           */
#define SIOCSIFMETRIC   0x891e      /* set metric           */
#define SIOCGIFMEM  0x891f      /* get memory address (BSD) */
#define SIOCSIFMEM  0x8920      /* set memory address (BSD) */


若是想获得MAC地址，只需要把0x8915换成0x8927，后面的[20:24]换成[18:24]，就得到了16进制形式的MAC地址。









版权声明：本文为博主原创文章，未经博主允许不得转载。

学会使用简单的MySQL操作
第十八章 学会使用简单的MySQL操作在前面两个章节中已经介绍过MySQL的安装了，但是光会安装还不够，还需要会一些基本的相关操作。当然了，关于MySQL的内容也是非常多的，只不过对于linux系统管理员来讲，一些基本的操作已经可以应付日常的管理工作了，至于更高深的那是DBA（专门管理数据库的技术人员）的事情了。【更改mysql数据库root的密码】首次进入数据库是不用密码的/usr/local/mysql/bin/mysql -u rootWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.0.86 MySQL Community Server (GPL)Type 'help;' or '\h' for help. Type '\c' to clear the buffer.mysql>现在已经进入到了mysql 的操作界面了。退出的话，直接输入exit即可。mysql> exitBye先解释一下上面的命令的含义，-u 用来指定要登录的用户，root用户是mysql自带的管理员账户，默认没有密码的，那么如何给root用户设定密码？按如下操作：/usr/local/mysql/bin/mysqladmin -u root password ‘123456’这样就可以设定root用户的密码了。其中mysqladmin就是用来设置密码的工具，-u 指定用户，passwod 后跟要定义的密码，密码需要用单引号或者双引号括起来。另外你也许发现了，敲命令时总在前面加/usr/local/mysql/bin/ 这样很累。但是直接打mysql 又不能用，这是因为在系统变量$PATH中没有/usr/local/mysql/bin/这个目录，所以需要这样操作(如果你的linux可以直接打出mysql这个命令，则不要做这个操作)：vim /etc/profile在最后加入一行：export PATH=$PATH:/usr/local/mysql/bin/保存后运行source /etc/profile设定完密码后，再来运行最开始进入mysql数据库操作界面的命令：mysql -u rootERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)就报错了，这是因为root用户有密码。mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 5Server version: 5.0.86 MySQL Community Server (GPL)Type 'help;' or '\h' for help. Type '\c' to clear the buffer.mysql>需要加-p选项指定密码，这时就会提示你输入密码了。当设定密码后，如果要想更改密码如何操作呢？mysqladmin -u root -p password "123456789"Enter password:输入原来root的密码就可以更改密码了。【连接数据库】刚刚讲过通过使用mysql -u root -p 就可以连接数据库了，但这只是连接的本地的数据库’localhost’，然后有很多时候都是去连接网络中的某一个主机上的mysql。mysql -u user1 -p –P 3306 -h 10.0.2.69其中-P（大写）指定远程主机mysql的绑定端口，默认都是3306；-h指定远程主机的IP【一些基本的MySQL操作命令】1. 查询当前所有的库mysql> show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || test |+--------------------+2. 查询某个库的表mysql> use mysql;Database changedmysql> show tables;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db || func || help_category || help_keyword || help_relation || help_topic || host || proc || procs_priv || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+---------------------------+3. 查看某个表的字段mysql> desc func; //func 是表名+-------+------------------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+------------------------------+------+-----+---------+-------+| name | char(64) | NO | PRI | | || ret | tinyint(1) | NO | | 0 | || dl | char(128) | NO | | | || type | enum('function','aggregate') | NO | | NULL | |+-------+------------------------------+------+-----+---------+-------+4. 查看某个表的表结构（创建表时的详细结构）mysql> show create table func;|Table | CreateTable | | func | CREATE TABLE `func` (`name` char(64) collate utf8_bin NOT NULL default '',`ret` tinyint(1) NOT NULL default '0',`dl` char(128) collate utf8_bin NOT NULL default '',`type` enum('function','aggregate') character set utf8 NOT NULL,PRIMARY KEY (`name`)) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions' |+-------+----------------------------------------------------------------------------------------------------------------------5. 查看当前是哪个用户mysql> select user();+----------------+| user() |+----------------+| root@localhost |+----------------+6. 查看当前所在数据库mysql> select database();+------------+| database() |+------------+| mysql |+------------+7. 创建一个新库mysql> create database db1;Query OK, 1 row affected (0.04 sec)8. 创建一个表mysql> create table t1 ( `id` int(4), `name` char(40));Query OK, 0 rows affected (0.02 sec)mysql> desc t1;+-------+----------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+----------+------+-----+---------+-------+| id | int(4) | YES | | NULL | || name | char(40) | YES | | NULL | |+-------+----------+------+-----+---------+-------+9. 查看当前数据库版本mysql> select version();+-----------+| version() |+-----------+| 5.0.86 |+-----------+10. 查看当前系统时间mysql> select current_date, current_time;+--------------+--------------+| current_date | current_time |+--------------+--------------+| 2011-05-31 | 08:52:50 |+--------------+--------------+11. 查看当前mysql的状态mysql> show status;+-----------------------------------+----------+| Variable_name | Value |+-----------------------------------+----------+| Aborted_clients | 0 || Aborted_connects | 1 || Binlog_cache_disk_use | 0 || Binlog_cache_use | 0 || Bytes_received | 664 || Bytes_sent | 6703 |这个命令打出很多东西，显示你的mysql状态。12. 查看mysql的参数mysql> show variables;很多参数都是可以在/etc/my.cnf中定义的。13. 创建一个普通用户并授权mysql> grant all on *.* to user1 identified by '123456';Query OK, 0 rows affected (0.01 sec)all 表示所有的权限（读、写、查询、删除等等操作），*.*前面的*表示所有的数据库，后面的*表示所有的表，identified by 后面跟密码，用单引号括起来。这里的user1指的是localhost上的user1，如果是给网络上的其他机器上的某个用户授权则这样：mysql> grant all on db1.* to 'user2'@'10.0.2.100' identified by '123456';Query OK, 0 rows affected (0.00 sec)用户和主机的IP之间有一个@，另外主机IP那里可以用%替代，表示所有主机。例如：mysql> grant all on db1.* to 'user3'@'%' identified by '123456';Query OK, 0 rows affected (0.00 sec)【一些常用的sql】1. 查询语句mysql> select count(*) from mysql.user;mysql.user表示mysql库的user表；count(*)表示表中共有多少行。mysql> select * from mysql.db;查询mysql库的db表中的所有数据mysql> select db from mysql.db;查询mysql库db表的db段。mysql> select * from mysql.db where host like '10.0.%';查询mysql库db表host字段like 10.0.% 的行，这里的%表示匹配所有，类似于前面介绍的通配符。2. 插入一行mysql> insert into db1.t1 values (1, 'abc');Query OK, 1 row affected (0.00 sec)t1表在前面已经创建过。mysql> select * from db1.t1;+------+------+| id | name |+------+------+| 1 | abc |+------+------+3. 更改某一行mysql> update db1.t1 set name='aaa' where id=1;Query OK, 1 row affected (0.02 sec)Rows matched: 1 Changed: 1 Warnings: 0这样就把原来id为1的那行中的name改成’aaa’4. 删除表mysql> drop table db1.t1;Query OK, 0 rows affected (0.01 sec)5. 删除数据库mysql> drop database db1;Query OK, 0 rows affected (0.07 sec)6. 备份与恢复库mysqldump -uroot -p mysql >mysql.sql这里的mysqldump 就是备份的工具了，-p后面的mysql指的是mysql库,把备份的文件重定向到mysql.sql。如果恢复的话，只要：mysql -uroot -p mysql < mysql.sql 关于MySQL的基本操作笔者就介绍这么多，当然学会了这些还远远不够，希望你能够在你的工作中学习到更多的知识，如果你对MySQL有很大兴趣，不妨深入研究一下，毕竟多学点总没有坏处。如果想学跟多的东西请去查看MySQL官方中文参考手册（5.1）。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

NFS服务配置
第十九章 NFS服务配置【什么是NFS】     NFS会经常用到，用于在网络上共享存储。这样讲，你对NFS可能不太了解，笔者不妨举一个例子来说明一下NFS是用来做什么的。假如有三台机器A、B、C，它们需要访问同一个目录，目录中都是图片，传统的做法是把这些图片分别放到A、B、C。但是使用NFS只需要放到A上，然后A共享给B和C即可。访问的时候，B和C是通过网络的方式去访问A上的那个目录的。【配置NFS】         NFS配置起来还是蛮简单的，只需要编辑配置文件/etc/exports即可。下面笔者先创建一个简单的NFS服务器。[root@localhost ~]# cat /etc/exports/home/  10.0.2.0/24(rw,sync,all_squash,anonuid=501,anongid=501)这个配置文件就这样简单一行。共分为三部分，第一部分就是本地要共享出去的目录，第二部分为允许访问的主机（可以是一个IP也可以是一个IP段）第三部分就是小括号里面的，为一些权限选项。关于第三部分，笔者简单介绍一下：rw ：读写；ro ：只读；sync ：同步模式，内存中数据时时写入磁盘；async ：不同步，把内存中数据定期写入磁盘中；no_root_squash ：加上这个选项后，root用户就会对共享的目录拥有至高的权限控制，就像是对本机的目录操作一样。不安全，不建议使用；root_squash ：和上面的选项对应，root用户对共享目录的权限不高，只有普通用户的权限，即限制了root；all_squash ：不管使用NFS的用户是谁，他的身份都会被限定成为一个指定的普通用户身份；anonuid/anongid ：要和root_squash 以及 all_squash一同使用，用于指定使用NFS的用户限定后的uid和gid，前提是本机的/etc/passwd中存在这个uid和gid。介绍了上面的相关的权限选项后，再来分析一下笔者刚刚配置的那个/etc/exports文件。其中要共享的目录为/home，信任的主机为10.0.2.0/24这个网段，权限为读写，同步，限定所有使用者，并且限定的uid和gid都为501。【使用NFS】         当编辑完配置文件/etc/exports后，就该启动NFS服务了。启动方法为：[root@localhost ~]# service portmap start; service nfs startNFS是依托portmap的，所以首先要启动portmap，然后启动NFS才能是刚才的配置生效。启动完NFS后，就该使用NFS服务了。[root@localhost ~]# showmount -e 127.0.0.1 （用在client上）Export list for 127.0.0.1:/home 10.0.2.0/24用shoumount -e 加IP就可以查看NFS的共享情况，上例中，就可以看到127.0.0.1的共享目录为/home，信任主机为10.0.2.0/24这个网段。另外这个showmount 命令还有一个常用的选项就是-a了，它的意思是，把连接本机的NFS的client全部列出。[root@localhost ~]# mount -t nfs 10.0.2.69:/home /mnt （client上）[root@localhost ~]# showmount -a （nfs服务器上）All mount points on localhost:10.0.2.69:/home前面的mount 命令为挂载NFS共享目录，相信你能看懂这个格式。showmount -a 命令列出所有的clinet。NFS服务中还有一个常用的命令那就是exportfs，它的常用选项为[-aruv]。-a ：全部挂载或者卸载；-r ：重新挂载；-u ：卸载某一个目录；-v ：显示共享的目录；使用exportfs命令，当改变/etc/exports配置文件后，不用重启nfs服务直接用这个exportfs即可。[root@localhost ~]# cat /etc/exports/tmp/   10.0.2.0/24(rw,sync,no_root_squash)[root@localhost ~]# exportfs -arv （nfs服务器上）exporting 10.0.2.0/24:/tmp更改目录后，直接exportfs -arv即可生效。在上面使用到了mount命令来挂载nfs，其实mount这个nfs服务还是有些说法的。首先是用-t nfs 来指定挂载的类型为nfs。另外在使用nfs时，常用一个选项就是nolock了，即在挂载nfs服务时，不加锁。[root@localhost ~]# mount -t nfs -o nolock 10.0.2.69:/tmp /mnt/[root@localhost ~]# showmount -aAll mount points on localhost:10.0.2.69:/home10.0.2.69:/tmp另外我们还可以把要挂载的nfs目录写到client上的/etc/fstab文件中，挂载时只需要mount -a即可。[root@localhost ~]# cat /etc/fstabLABEL=/                 /                        ext3    defaults        1 1LABEL=/boot             /boot                   ext3    defaults        1 2tmpfs                   /dev/shm                tmpfs   defaults        0 0devpts                  /dev/pts                devpts  gid=5,mode=620  0 0sysfs                   /sys                    sysfs   defaults        0 0proc                    /proc                   proc    defaults        0 0LABEL=SWAP-hda2         swap                    swap    defaults        0 010.0.2.69:/tmp          /mnt                    nfs     nolock          0 0 写完/etc/fstab文件后，只需要mount -a即可挂载nfs服务的共享目录。[root@localhost ~]# umount /mnt/ 首先把刚才挂载的nfs卸载掉[root@localhost ~]# mount -a[root@localhost ~]# df -hFilesystem            Size  Used Avail Use% Mounted on/dev/hda3             7.3G  3.7G  3.3G  53% //dev/hda1              99M   12M   83M  12% /boottmpfs                  84M     0   84M   0% /dev/shm10.0.2.69:/tmp        7.3G  3.7G  3.3G  53% /mnt关于NFS部分就讲这么多，内容并不多，相信你很快就能掌握！

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

linux系统日常管理
笔者在前面介绍的内容都为linux系统基础类的，如果你现在把前面的内容全部很好的掌握了，那最好了。不过笔者要说的是，即使你完全掌握了，你现在还是不能作为一名合格的linux系统管理员的，毕竟系统管理员要会做的事情太多了。本章以及后面章节笔者会陆续教给你作为linux系统管理员所必备的知识。只要你熟练掌握那绝对可以胜任一个最初级的管理员职位，不过只是初级的，因为你还需要在日常的管理工作中获得成长。【监控系统的状态】1.  w  查看当前系统的负载相信所有的linux管理员最常用的命令就是这个’w’ 了，该命令显示的信息还是蛮丰富的。第一行从左面开始显示的信息依次为：时间，系统运行时间，登录用户数，平均负载。第二行开始以及下面所有的行，告诉我们的信息是，当前登录的都有哪些用户，以及他们是从哪里登录的等等。其实，在这些信息当中，笔者认为我们最应该关注的应该是第一行中的’load average:’后面的三个数值。第一个数值表示1分钟内系统的平均负载值；第二个数值表示5分钟内系统的平均负载值；第三个数值表示15分钟系统的平均负载值。这个值的意义是，单位时间段内CPU活动进程数。当然这个值越大就说明你的服务器压力越大。一般情况下这个值只要不超过你服务器的cpu数量就没有关系，如果你的服务器cpu数量为8，那么这个值若小于8，就说明你的服务器没有压力，否则就要关注一下了。到这里你肯定会问，如何查看服务器有几个cpu？就是用这个命令了。’/proc/cpuinfo’这个文件记录了cpu的详细信息。目前市面上的服务器通常都是2颗4核cpu，在linux看来，它就是8个cpu。查看这个文件时则会显示8段类似的信息，而最后一段信息中processor :  后面跟的是’7’。所以查看当前系统有几个cpu，你可以使用这个命令：’ grep -c 'processor' /proc/cpuinfo’ 。2. vmstat  监控系统的状态上面讲的w查看的是系统整体上的负载，通过看那个数值可以知道当前系统有没有压力，但是具体是哪里（CPU, 内存，磁盘等）有压力就无法判断了。通过vmstat就可以知道具体是哪里有压力。vmstat命令打印的结果共分为6部分：procs, memory, swap, io, system, cpu.请重点关注一下红色标出的项。1）procs  显示进程相关信息r ：表示运行和等待cpu时间片的进程数，如果长期大于服务器cpu的个数，则说明cpu不够用了；b ：表示等待资源的进程数，比如等待I/O, 内存等，这列的值如果长时间大于1，则需要你关注一下了；2）memory  内存相关信息swpd ：表示切换到交换分区中的内存数量 ；free ：当前空闲的内存数量；buff ：缓冲大小，（即将写入磁盘的）；cache ：缓存大小，（从磁盘中读取的）；3）swap  内存交换情况si ：由内存进入交换区的数量；so ：由交换区进入内存的数量；4）io 磁盘使用情况bi ：从块设备读取数据的量（读磁盘）；bo： 从块设备写入数据的量（写磁盘）；5）system  显示采集间隔内发生的中断次数in ：表示在某一时间间隔中观测到的每秒设备中断数；cs ：表示每秒产生的上下文切换次数；6）CPU 显示cpu的使用状态us ：显示了用户下所花费 cpu 时间的百分比；sy ：显示系统花费cpu时间百分比；id ：表示cpu处于空闲状态的时间百分比；wa ：表示I/O等待所占用cpu时间百分比；st ：表示被偷走的cpu所占百分比（一般都为0，不用关注）；以上所介绍的各个参数中，笔者经常会关注r列，b列，和wa列，三列代表的含义在上边说得已经很清楚。IO部分的bi以及bo也是我要经常参考的对象。如果磁盘io压力很大时，这两列的数值会比较高。另外当si, so两列的数值比较高，并且在不断变化时，说明内存不够了，内存中的数据频繁交换到交换分区中，这往往对系统性能影响极大。笔者用vmstat时，经常用这样的形式，’vmstat  1  5’ 表示每隔1秒钟打印一次系统状态，连续打印5次。当然你也可以 ‘vmstat  1 ‘ 表示每隔1秒钟打印一次系统状态，一直打印，除非你按ctrl + c强制结束。3. top  显示进程所占系统资源这个命令用于动态监控进程所占系统资源，每隔3秒变一次。这个命令的特点是把占用系统资源（CPU，内存，磁盘IO等）最高的进程放到最前面。top命令打印出了很多信息，包括系统负载（load average）、进程数（Tasks）、cpu使用情况、内存使用情况以及交换分区使用情况。其实上面这些内容可以通过其他命令来查看，所以用top重点查看的还是下面的进程使用系统资源详细状况。这部分东西反映的东西还是比较多的，不过需要你关注的也就是几项：%CPU, %MEM, COMMAND 这些项目所代表的意义，不用笔者介绍相信你也能看懂吧。另外笔者使用top命令时还常常使用-bn1 这个组合选项，它表示非动态打印系统资源使用情况，可以用在脚本中，你不妨记一下，以后也许你会用得到。4. sar 监控系统状态sar 命令很强大，它可以监控系统所有资源状态，比如平均负载、网卡流量、磁盘状态、内存使用等等。它不同于其他系统状态监控工具的地方在于，它可以打印历史信息，可以显示当天从零点开始到当前时刻的系统状态信息。如果你系统没有安装这个命令，请使用”yum install  -y  sysstat”命令安装。初次使用sar命令会报错，那是因为sar工具还没有生成相应的数据库文件（时时监控就不会了，因为不用去查询那个库文件）。它的数据库文件在” /var/log/sa/”目录下，默认保存9天。因为这个命令太过复杂，所以笔者只介绍几个。1）查看网卡流量  ‘sar   -n  DEV ‘IFACE这列表示设备名称，rxpck/s 表示每秒进入收取的包的数量，txpck/s 表示每秒发送出去的包的数量，rxbyt/s 表示每秒收取的数据量（单位Byte），txbyt/s表示每秒发送的数据量。后面几列不需要关注。如果有一天你所管理的服务器丢包非常严重，那么你就应该看一看这个网卡流量是否异常了，如果rxpck/s 那一列的数值大于4000，或者rxbyt/s那列大于5,000,000则很有可能是被攻击了，正常的服务器网卡流量不会高于这么多，除非是你自己在拷贝数据。上面的命令是查看网卡流量历史的，如何时时查看网卡流量呢？另外也可以查看某一天的网卡流量历史，使用-f选项，后面跟文件名，如果你的系统格式Redhat或者CentOS那么sar的库文件一定是在/var/log/sa/目录下的。2）查看历史负载  ‘sar -q’这个命令有助于我们查看服务器在过去的某个时间的负载状况。关于sar的介绍笔者不愿写太多，毕竟介绍太多会给你带来更多的压力，其实笔者介绍这个命令的目的只是让你学会查看网卡流量（这是非常有用的）。如果你很感兴趣那就man一下吧，它的用法太多了。5. free查看内存使用状况只要你敲一个free然后回车就可以当前系统的总内存大小以及使用内存的情况。从上图中可看到当前系统内存总大小为235128（单位是k）已经使用120368，剩余94760。其实真正剩余并不是这个94760，而是第二行的213388，真正使用的也是第二行的21740。这是因为系统初始化时，就已经分配出很大一部分内存给缓存，这部分缓存用来随时提供给程序使用，如果程序不用，那这部分内存就空闲。所以，查看内存使用多少，剩余多少请看第二行的数据。另外你还可以加-m 或者-g选项分别以M或G为单位打印内存使用状况。6.  ps 查看系统进程作为系统管理员，一定要知道你所管理的系统都有那些进程在运行，在windows下只要打开任务管理器即可查看。在linux下呢？其实在上面介绍的top命令就可以，但是不够专业，当然还有专门显示系统进程的命令。对了，就是这个’ps  aux’。笔者也经常看到有的人喜欢用’ps  -elf’ 大同小异，显示的信息基本上是一样的。 ps命令还有更多的用法，笔者不再做介绍，因为你只要会用这个命令就足够了，请man一下。下面介绍上图上出现的几个参数的意义。PID ：进程的id，这个id很有用，在linux中内核管理进程就得靠pid来识别和管理某一个程，比如我想终止某一个进程，则用 ‘kill  进程的pid’，有时并不能杀掉，则需要加一个-9选项了’kill  -9  进程pid’STAT ：表示进程的状态，进程状态分为以下几种（不要求记住，但要了解）D  不能中断的进程（通常为IO）R  正在运行中的进程S  已经中断的进程，通常情况下，系统中大部分进程都是这个状态T  已经停止或者暂停的进程，如果我们正在运行一个命令，比如说sleep 10，如果我们按一下ctrl -z 让他暂停，那么我们用ps查看就会显示T这个状态W 这个好像是说，从内核2.6xx 以后，表示为没有足够的内存页分配X  已经死掉的进程（这个好像从来不会出现）Z  僵尸进程，杀不掉，打不死的垃圾进程，占系统一小点资源，不过没有关系。如果太多，就有问题了。一般不会出现。<  高优先级进程N  低优先级进程L   在内存中被锁了内存分页s   主进程l   多线程进程+  代表在前台运行的进程这个ps命令是笔者在工作中用的非常多的命令之一，所以请记住它吧。关于ps命令的使用，笔者经常会连同管道符一起使用，用来查看某个进程或者它的数量。上面的6不对，需要减掉1，因为使用grep命令时，grep命令本身也算作了一个。7. netstat 查看网络状况netstat命令用来打印网络连接状况、系统所开放端口、路由表等信息。笔者最常用的关于netstat的命令就是这个netstat  -lnp （打印当前系统启动哪些端口）以及netstat  -an （打印网络连接状况）这两个命令非常有用，请一定要记住。如果你所管理的服务器是一台提供web服务（80端口）的服务器，那么你就可以使用netstat -an |grep 80开查看当前连接web服务的有哪些IP了。8. 抓包工具tcpdump有时候，也许你会有这样的需求，想看一下某个网卡上都有哪些数据包，尤其是当你初步判定你的服务器上有流量攻击。这时，使用抓包工具来抓一下数据包，就可以知道有哪些IP在攻击你了。如果你没有tcpdump 这个命令，需要用’yum install -y tcpdump ’命令去安装一下。上图中第三列和第四列显示的信息为哪一个IP+port在连接哪一个IP+port，后面的信息是该数据包的相关信息，如果不懂也没有关系，毕竟你不是专门搞网络的，而这里需要你关注的只是第三列以及第四列。-i 选项后面跟设备名称，如果你想抓eth1网卡的包，后面则要跟eth1.至于-nn选项的作用是让第三列和第四列显示成IP+端口号的形式，如果不加-nn则显示的是主机名+服务名称。【linux网络相关】1. ifconfig 查看网卡IPifconfig类似与windows的ipconfig，不加任何选项和参数只打印当前网卡的IP相关信息（子网掩码、网关等）当然ifconfig后面可以跟设备名，只打印指定设备的IP信息。在windows下设置IP非常简单，然而在命令窗口下如何设置？这就需要去修改配置文件/etc/sysconfig/network-scripts/ifcfg-eth0了，如果是eth1那么配置文件是/etc/sysconfig/network-scripts/ifcfg-eth1.如果想修改IP的话，则只需要修改IPADDR , NETMASK以及GATEWAY即可。如果你的linux是通过dhcp服务器自动获得的IP，那么配置文件肯定和上图中的不一样，BOOTPROTO那里会是’dhcp’，如果你要配置成静态IP的话，这里就需要写成’none’。关于如何设置IP以及子网掩码的这些知识属于网络相关的基础知识了，如果你对这方面比较陌生的话，建议你去看看网络相关的资料。当修改完IP后需要重启网络服务新IP才能生效，重启命令为’ service network restart’另外如果你有多个网卡的情况时，只想重启某一个网卡的话，还可以使用这个命令。ifdown 即停掉网卡，ifup即启动网卡。有一点要提醒你的是，如果你远程登录你的服务器，当你使用ifdown eth0这个命令的时候，很有可能后面的命令ifup eth0不会被运行，这样导致你断网而无法连接服务器，所以请尽量使用service  network restart 这个命令来重启网卡。2. 给一个网卡设定多个IP在linux系统中，网卡是可以设定多重IP的，笔者曾经管理的一台服务器的eth1就设定了5个IP，实在是够变态的。把ifcfg-eth0复制成ifcfg-eth0:1 然后编辑ifcfg-eth0:1修改DEVICE以及IPADDR保存后重启网卡。再次查看eth0上就有两个IP了。这里你要注意一下，文件名（ifcft-eth0:1）写成什么都无所谓，但是文件内的DEVICE=eth0:1一定要按照这样的格式写，否则你启动不起来网卡。3. 查看网卡连接状态mii-tool这个命令用来查看网卡是否连接，如图显示link ok等字样说明连接正常，否则会显示’no link’字样，下图是笔者所管理的一台服务器，eth1网卡没有连接。如果你的机器是虚拟机，那么你使用该命令时应该显示成如下：这是因为使用的是虚拟网卡，不支持这个工具查看。不用多关注此，你记住这个mii-tool命令即可，它可是会经常用到的。4. 更改主机名当装完系统后，默认主机名为localhost，使用hostname就可以知道你的linux的主机名是什么。同样使用hostname可以更改你的主机名。下次登录时就会把命令提示符中的’localhost’更改成’Aming’。不过这样修改只是保存在内存中，下次重启还会变成未改之前的主机名，所以需要你还要去更改相关的配置文件’/etc/sysconfig/network’。把HOSTNAME=localhost.localdomain 修改成你想要的主机名，这样再重启就会读取这个配置文件中的HOSTNAME.5. 设置DNSDNS是用来解析域名用的，平时我们访问网站都是直接输入一个网址，而dns把这个网址解析到一个IP。关于dns的概念，如果你很陌生的话，那就去网上查一下吧。在linux下面设置dns非常简单，只要把dns地址写到一个配置文件中即可。这个配置文件就是/etc/resolv.confresolv.conf有它固有的格式，一定要写成’nameserver  IP’的格式，上面那行以’;’为开头的行是一行注释，没有实际意义，建议写两个或多个namserver ，默认会用第一个namserver去解析域名，当第一个解析不到时会使用第二个。在linux下面有一个特殊的文件/etc/hosts也能解析域名，不过是需要我们手动在里面添加IP+域名这些内容，它的作用是临时解析某个域名，非常有用。它的格式如上图，每一行作为一条记录，分成两部分，第一部分是IP，第二部分是域名。关于hosts文件，有几点需要你注意：1）一个IP后面可以跟多个域名，可以是几十个甚至上百个；2）每行只能有一个IP，也就是说一个域名不能对应多个IP；3）如果有多行中出现相同的域名（前面IP不一样），会按最前面出现的记录来解析。【linux的防火墙】1. selinux Selinux是Redhat/CentOS系统特有的安全机制。不过因为这个东西限制太多，配置也特别繁琐所以几乎没有人去真正应用它。所以装完系统，我们一般都要把selinux关闭，以免引起不必要的麻烦。关闭selinux的方法为：把’SELINUX=enforcing’改成’SELINUX=disabled’，然后重启机器。临时关闭selinux的命令为getenforce命令可以得到selinux的状态，其中有两种（Enforcing|Permissive），前者表示开放，后者表示关闭，但是会发出警告。setenforce用来设置selinux的状态，后面跟0则设置成Permissive后面跟1设置成Enforcing。关闭selinux的命令为setenforce 0，但是这只是临时关闭，重启后恢复，想要永久生效，请更改配置文件/etc/selinux/config。2. iptablesIptables是linux上特有的防火墙机制，其功能非常强大，然而笔者在日常的管理工作中仅仅用到了一两个应用，这并不代表iptables不重要。作为一个网络管理员，iptables是必要要熟练掌握的。但是作为系统管理员，我们也应该会最基本的iptables操作，认识iptables的基本规则。1）iptalbes的三个表filter ：这个表主要用于过滤包的，是系统预设的表，这个表也是笔者用的最多的。内建三个链INPUT、OUTPUT以及FORWARD。INPUT作用于进入本机的包；OUTPUT作用于本机送出的包；FORWARD作用于那些跟本机无关的包。nat ：主要用处是网络地址转换，也有三个链。PREROUTING 链的作用是在包刚刚到达防火墙时改变它的目的地址，如果需要的话。OUTPUT链改变本地产生的包的目的地址。POSTROUTING链在包就要离开防火墙之前改变其源地址。该表笔者用的不多，但有时候会用到。mangle ：这个表主要是用于给数据包打标记，然后根据标记去操作哪些包。这个表几乎不怎么用。除非你想成为一个高级网络工程师，否则你就没有必要花费很多心思在它上面。2）iptables 基本语法A. 查看规则以及清除规则如上图，-t 后面跟表名，-nvL 即查看该表的规则，其中-n表示不针对IP反解析主机名；-L表示列出的意思；而-v表示列出的信息更加详细。如果不加-t ，则打印filter表的相关信息。这个和-t filter 打印的信息是一样的。关于清除规则的命令中，笔者用的最多就是不加-t默认是针对表filter来操作的，-F 表示把所有规则全部删除；-Z表示把包以及流量计数器置零（这个笔者认为很有用）。B. 增加/删除一条规则这就是增加了一条规则，省略-t所以针对的是filter表。-A 表示增加一条规则，另外还有-I 表示插入一条规则，-D删除一条规则；后面的INPUT即链名称，还可以是OUTPUT或者FORWORD；-s 后跟源地址；-p 协议（tcp, udp, icmp）； --sport/--dport 后跟源端口/目标端口；-d 后跟目的IP（主要针对内网或者外网）；-j 后跟动作（DROP即把包丢掉，REJECT即包拒绝；ACCEPT即允许包）。这样讲可能很乱，那笔者多举几个例子来帮你理解：上例表示：插入一条规则，把来自10.0.2.36的所有数据包丢掉。删除刚刚插入的规则。注意要删除一条规则时，必须和插入的规则一致，也就是说，两条iptables命令，除了-I 和-D不一样外，其他地方都一样。上例表示把来自10.0.2.36 并且是tcp协议到本机的80端口的数据包丢掉。这里要说的是，--dport/--sport 必须要和-p选项一起使用，否则会出错。把发送到10.0.2.34的22端口的数据包丢掉。下面做一个小试验：一开始用本机ping  10.0.2.34是通的，然后使用iptables增加一条规则，使到10.0.2.34的icmp包丢掉，再ping 10.0.2.34则不通了。此时用’iptables –nvL’查看iptalbes规则。会有一条这样的记录，看pkts那列显示4个数据包，因为我们ping 的时候给10.0.2.34发送了4个数据包，第二列表示这4个数据包一共有多大（336bytes）。此时使用’iptables -Z' 清零。现在你明白’iptables -Z’的意义了吧。至于FORWORD链的应用笔者几乎没有用到过，所以不再举例。再总结一下各个选项的作用：-A/-D ：增加删除一条规则；-I ：插入一条规则，其实跟-A的效果一样；-p ：指定协议，可以是tcp，udp或者icmp；--dport ：跟-p一起使用，指定目标端口；--sport ：跟-p一起使用，指定源端口；-s ：指定源IP（可以是一个ip段）；-d ：指定目的IP（可以是一个ip段）；-j ：后跟动作，其中ACCEPT表示允许包，DROP表示丢掉包，REJECT表示拒绝包；-i ：指定网卡（不常用，但有时候能用到）；上例中表示，把来自10.0.2.0/24这个网段的并且作用在eth0上的包放行。有时候你的服务器上iptables过多了，想删除某一条规则时，又不容易掌握当时创建时的规则。其实有一种比较简单的方法：查看结果如下：删除某一个规则的方法是：-D 后跟链名，然后是规则num，这个num就是查看iptables规则时第一列的值。iptables还有一个选项经常用到，-P（大写）选项，表示预设策略。用法如下：-P后面跟链名，策略内容或者为DROP或者为ACCEPT，默认是ACCEPT。注意：如果你在连接远程服务器，千万不要随便敲这个命令，因为一旦你敲完回车你就会断掉。看到上图中红框标出的部分了吧，现在所有进来的数据包全部DROP了。这个策略一旦设定后，只能使用iptables -P ACCEPT才能恢复成原始状态，而不能使用-F参数。下面笔者针对一个小需求讲述一下这个iptables规则如何设定。需求：只针对filter表，预设策略INPUT链DROP，其他两个链ACCEPT，然后针对10.0.2.0/24开通22端口，对所有网段开放80端口，对所有网段开放21端口。这个需求不算复杂，但是因为有多条规则，所以最好写成脚本的形式。完成脚本的编写后，直接运行 ‘sh  /usr/local/sbin/iptables.sh ’ 即可。如果想开机启动时初始化防火墙规则，则需要在/etc/rc.d/rc.local 中添加一行 ‘sh  /usr/local/sbin/iptables.sh’ 。关于icmp的包有一个比较常见的应用。--icmp-type 这个选项是要跟-p icmp 一起使用的，后面指定类型编号。这个8指的是能在本机ping通其他机器，而其他机器不能ping通本机。这个有必要记一下。C. nat表的应用其实，linux的iptables功能是十分强大的，笔者曾经的一个老师这样形容linux的网络功能：只有想不到没有做不到！也就是说只要你能够想到的关于网络的应用，linux都能帮你实现。在日常生活中相信你接触过路由器吧，它的功能就是分享上网。本来一根网线过来（其实只有一个公网IP），通过路由器后，路由器分配了一个网段（私网IP），这样连接路由器的多台pc都能连接intnet而远端的设备认为你的IP就是那个连接路由器的公网IP。这个路由器的功能其实就是由linux的iptables实现的，而iptables又是通过nat表作用而实现的这个功能。至于具体的原理以及过程，笔者不想阐述，请查看相关资料。笔者在这里只举一个例子来说明iptables如何实现的这个功能。假设你的机器上有两块网卡eth0和eth1，其中eth0的IP为10.0.2.68 ，eth1的IP为192.168.1.1 。eth0连接了intnet 但eth1没有连接，现在有另一台机器（192.168.1.2）和eth1是互通的，那么如何设置也能够让连接eth1的这台机器能够连接intnet（即能和10.0.2.68互通）?其实就是这样简单的两个命令就能实现上面的需求。第一个命令涉及到了内核参数相关的配置文件，它的目的是为了打开路由转发功能，否则无法实现我们的应用。第二个命令则是iptables对nat表做了一个IP转发的操作，-o 选项后跟设备名，表示出口的网卡，MASQUERADE表示伪装的意思。关于nat表，笔者不想讲太多内容，你只要学会这个路由转发即可。其他的东西交给网络工程师去学习吧，毕竟你将来可是要做linux系统工程师的。D. 保存以及备份iptalbes规则也许你不知道，咱们设定的防火墙规则只是保存在内存中，并没有保存到某一个文件中，也就说当系统重启后以前设定的规则就没有了，所以设定好规则后要先保存一下。它会提示你把规则保存在了/etc/sysconfig/iptables文件内。其实，这个文件就是iptables的配置文件了，你不妨查看一下它。红线部分就是咱们刚才设定那条规则！有时可能因为我们设置防火墙规则有误导致服务器出问题，这时候不妨先备份一下这个配置文件，然后停止防火墙服务。这样防火墙就失效了，但是一旦你重新设定规则后（哪怕只有一条），防火墙又开始工作了。我还可以使用iptables-save >filename 这条命令来保存一个防火墙规则，这样就可以起到备份的作用了。要想恢复这个规则使用下面这个命令即可。【linux系统的任务计划】这部分内容太重要了，其实大部分系统管理工作都是通过定期自动执行某一个脚本来完成的，那么如何定期执行某一个脚本呢？这就要借助linux的cron功能了。关于cron任务计划功能的操作都是通过crontab这个命令来完成的。其中常用的选项有：-u ：指定某个用户，不加-u选项则为当前用户；-e ：制定计划任务；-l ：列出计划任务；-r ：删除计划任务。使用crontab -e 来制定计划任务，上面的例子表示在05月26日（这天必须是周四）的10点01分执行’ echo "ok" >/root/cron.log’这样的任务。Cron的格式是这样的，每一行代表一个任务计划，总共分成两部分，前面部分为时间，后面部分要执行的命令。后面的命令不用多讲，至于前面的时间是有讲究的，这个时间共分为5段，用空格隔开（可以是多个空格），第一段表示分钟(0-59)，第二段表示小时(0-23)，第三段表示日(1-31)，第四段表示月(1-12)，第五段表示周(0-7,0或者7都可以表示为周日)。从左至右依次是：分，时，日，月，周（一定要牢记）！crontab -e 实际上是打开了/var/spool/cron/username （如果是root则打开的是/var/spool/cron/root）这个文件。使用的是vim编辑器，所以要保存的话则在命令模式下输入:wq即可。但是，你千万不要直接去编辑那个文件，因为可能会出错，所以一定要使用crontab -e来编辑。查看已经设定的任务计划使用crontab  -l删除计划任务要用crontab -r下面笔者给你出一些练习题，帮助你熟悉这个cron的应用。1. 每天凌晨1点20分清除/var/log/slow.log这个文件；2. 每周日3点执行’/bin/sh  /usr/local/sbin/backup.sh’；3. 每月14号4点10分执行’/bin/sh /usr/local/sbin/backup_month.sh’；4. 每隔8小时执行’ntpdate  time.windows.com’；5. 每天的1点，12点，18点执行’/bin/sh  /usr/local/sbin/test.sh’；6. 每天的9点到18点执行’/bin/sh  /usr/local/sbin/test2.sh’；答案：1.  20 1 * * *  echo “”>/var/log/slow.log2.  0 30 * * 0  /bin/sh /usr/local/sbin/backup.sh3.  10 04 14 * *  /bin/sh /usr/local/sbin/backup_month.sh4.  0 */8 * * *  ntpdate time.windows.com5.  0 1,12,18 * *  /bin/sh /usr/local/sbin/test.sh6.  0 9-18 * * *  /bin/sh /usr/local/sbin/test2.shCron的这部分内容并不难，你只要会了这6道练习题，你就算掌握它了。这里要简单说一下，每隔8小时，就是用全部小时（0-23）去除以8，你仔细想一下结果，其实算出来应该是0,8,16三个数。当遇到多个数（分钟、小时、月、周）例如第5题，则需要用逗号隔开。而时间段是可以用’-‘的方式表示的。等设置好了所有的计划任务后需要查看一下crond服务是否启动，如果没有启动，需要启动它。如何启动稍后会做介绍。除了用户自定义的计划任务外，其实系统本身也有计划任务的。系统会安装这个配置文件中的计划去执行内定的任务。【linux的系统服务管理】如果你对windows非常熟悉的话，相信你肯定配置过开机启动的服务，有些服务我们日常用不到则要把它停掉，一来可以节省资源，二来可以减少安全隐患。在linux上同样也有相关的工具来管理系统的服务。1. ntsysv  用来配置哪些服务开启或者关闭，有点想图形界面，不过是使用键盘来控制的。如果没有这个命令请使用 yum  install  -y  ntsysv 安装它。敲完这个命令后则显示出如上图中的画面。在屏幕的最上面有’Red Hat’等字样，这是在告诉我们这个工具是由Red Hat公司开发的。按键盘的上下方向键可以调节红色光标，按空格可以选择开启或者不开启，如果前面的中括号内显示有’*’ 则表示开启否则不开启。通过这个工具也可以看到目前系统中所有的服务。建议除’crond, iptables, network, sshd, syslog, irqbalance, sendmail, microcode_ctl’ 外其他服务全部停掉。选择好后，按’tab’键选择ok然后回车。需要重启机器才能生效。2. chkconfig Linux系统所有的预设服务可以查看/etc/init.d/目录得到其实这就是系统所有的预设服务了。为什么这样讲，因为系统预设服务都是可以通过这样的命令实现  ‘service  服务名  start|stop|restart’ ，这里的服务名就是/etc/init.d/目录下的这些文件了。除了可以使用’service  crond start ‘启动crond外，还可以使用/etc/init.d/crond start 来启动。如上图，这两个命令出来的结果是一样的。再看看这个chkconfig命令，它不仅可以列出来所有的服务，还可以详细到每个级别。这里的级别（0,1,2,3,4,5,6）就是inittab里面介绍的那几个启动级别了。这样还可以查看某一个服务的启动情况。用--level 指定级别，后面是服务名，然后是off或者on，--level后还可以跟多个级别。另外还可以省略级别，默认是针对2,3,4,5级别操作。另外这个chkconfig 还有一个功能就是可以把某个服务加入到系统服务，即可以使用service 服务名 start 这样的形式，并且可以在chkconfig --list 中查找到。当然也能删除掉。这个功能常用在把自定义的启动脚本加入到系统服务当中。关于系统服务就讲这些内容，其实还有很多内容笔者没有介绍，道理很简单，一来讲多了你不能消化二来讲多了你也用不上。【linux中的数据备份】数据备份，不用说太多吧，毫无疑问很重要。笔者就曾经有过一次非常痛苦的经历，备份策略没有做好，结果磁盘坏掉数据丢失，简直是撕心裂肺的痛呀。还好数据重要性不是特别高，即使是不高也是丢失了数据，这是作为系统管理员最不应该出现的事故。所以，在你以后的系统维护工作中，一定要把数据备份当回事，认真对待。在linux上作为数据备份的工具很多，但笔者就只用一种那就是rsync 从字面上的意思你可以理解为remote sync （远程同步）这样可以让你理解的更深刻一些。Rsync不仅可以远程同步数据（类似于scp），当然还可以本地同步数据（类似于cp），但不同于cp或scp的一点是，rsync不像cp/scp一样会覆盖以前的数据（如果数据已经存在），它会先判断已经存在的数据和新数据有什么不同，只有不同时才会把不同的部分覆盖掉。如果你的linux上下面看例子吧。（如果没有rsync命令请使用yum install -y rsync安装）上面例子表示把当前目录下的123同步到/tmp/目录下，并且同样也命名为123。如果是远程拷贝的话就是这样的形式了 IP:path （如：10.0.2.34:/root/）当建立连接后，是需要输入密码的。如果手动去执行这些操作还好，但是如果是写在脚本中怎么办？这就涉及到添加信任关系了，该部分内容稍后会详细介绍。1. rsync的命令格式rsync [OPTION]... SRC DEST rsync [OPTION]... SRC [USER@]HOST:DEST rsync [OPTION]... [USER@]HOST:SRC DEST rsync [OPTION]... [USER@]HOST::SRC DEST rsync [OPTION]... SRC [USER@]HOST::DEST 笔者在一开始举的两个例子，第一个例子即为第一种格式，第二个例子即为第二种格式，但不同的是，笔者并没有加user@host 如果不加默认指的是root 。第三种格式是从远程目录同步数据到本地。第四种以及第五种格式使用了两个冒号，这种方式和前面的方式的不同在于验证方式不同，稍后详细介绍。2. rsync常用选项-a ：归档模式，表示以递归方式传输文件，并保持所有属性，等同于-rlptgoD ，-a选项后面可以跟一个 --no-OPTION 这个表示关闭-rlptgoD中的某一个例如 -a --no-l 等同于-rptgoD-r ：对子目录以递归模式处理，主要是针对目录来说的，如果单独传一个文件不需要加-r，但是传输的是目录必须加-r选项-v ：打印一些信息出来，比如速率，文件数量等-l ：保留软链结-L ：向对待常规文件一样处理软链结，如果是SRC中有软连接文件，则加上该选项后将会把软连接指向的目标文件拷贝到DST-p ：保持文件权限-o ：保持文件属主信息-g ：保持文件属组信息-D ：保持设备文件信息-t ：保持文件时间信息--delete ：删除那些DST中SRC没有的文件--exclude=PATTERN ：指定排除不需要传输的文件，等号后面跟文件名，可以是万用字符模式（如*.txt）-u ：加上这个选项后将会把DST中比SRC还新的文件排除掉，不会覆盖下面笔者将会针对这些选项做一些列小实验：1） 建立目录以及文件笔者建立这些文件的目的就是为做试验做一些准备工作。2）使用-a选项这里有一个问题，就是本来想把test1目录直接拷贝成test2目录，可结果rsync却新建了test2目录然后把test1放到test2当中。为了避免这样的情况发生，可以这样做：加一个斜杠就好了，所以笔者建议你在使用rsync备份目录时要养成加斜杠的习惯。在上面讲了-a选项等同于- rlptgoD，而且-a还可以和--no-OPTION一并使用。笔者加上-v选项来获得更多的信息，上例中因为没有使用-r选项导致只能拷贝目录但不能拷贝目录下面的内容（英文翻译过来就是“忽略了目录test1/.”，其中test1/.指的就是test1目录内部的所有文件），所以虽然创建了test2目录，但是test2目录为空。下面再看看那个-l选项的作用。使用-v选项看来就是方便呀，上例告诉我们跳过了非普通文件1.sh，其实1.sh是一个软连接文件，如果不使用-l选项则不会理会软连接文件的。果真test2目录当中没有那个1.sh的影子。当然加上-l选项则会把软连接文件给拷贝过去，但是软连接的目标文件却没有拷贝过去，有时候咱们指向拷贝软连接文件所指向的目标文件，那这时候该怎么办呢？3）使用-L选项一个-L就可以把SRC中软连接的目标文件给拷贝到DST4） 使用-u选项首先查看一下test1/1 和 test2/1的访问时间（肯定是一样的），然后使用touch修改一下test2/1的访问时间（此时test2/1要比test1/1的访问时间晚了一些），如果不加-u选项的话，会把test2/1的访问时间变成和test1/1的访问时间一样。这样讲也许你会迷糊，不妨看一看。看到了吧，本来test2/1的访问时间已经不同于test1/1的访问时间了，但是同步后访问时间又一致了。现在你明白-u选项的妙用了吧。5）使用--delete选项如果不使用--delete选项当SRC有文件删除时，DST是不会删除的，只有加上--delete选项后才能删除掉。还有一种情况就是如果在DST增加文件了，而SRC当中没有这些文件，同步时加上--delete选项后同样会删除新增的文件。6）使用--exclude 选项另外还可以使用万用字符*匹配最后简单总结一下，平时你使用rsync同步数据的时候，使用-a选项基本上就可以达到我们想要的效果了，只是有时候会有个别的需求，会用到-a --no-OPTION, -u, -L, --delete, --exclude这些选项，但是笔者要求你把上面这些全部掌握，毕竟这才几个而已，大部分选项笔者都没有介绍。如果在以后的工作中遇到特殊需求了，就去查一下rsync的man文档吧。3. rsync 应用实例1）通过ssh的方式最上面介绍的5种方式当中，第二、第三（1个冒号）就属于通过ssh的方式，这种方式其实就是让用户去登录到远程机器，然后执行rsync的任务。这种方式就是前面介绍的第二种方式了，是通过ssh拷贝的数据，是要输入10.0.2.69那台机器root的密码的。这个则为第三种方式。这两种方式如果写到脚本里，备份起来就有麻烦了，因为要输入密码，脚本本来就是自动的，不可能做到的。但是不代表没有解决办法。那就是通过密钥验证，密钥不设立密码就ok了。还记得在前面笔者曾经介绍过通过密钥登录远程主机吗，下面要讲的内容就是那些东西了。先提前说一下基本的主机信息： 10.0.2.68 （主机名Aming-1）和10.0.2.69（主机名Aming）需要从Aming-1上拷贝数据到Aming上。A. 首先确认一下Aming-1上是否有这个文件 /root/.ssh/id_rsa.pub如果没有安装以下的方法生成：在这个过程中会有一些交互的过程，因为笔者的/root/.ssh/id_rsa已经存在，所以会问是否覆盖，笔者选择覆盖，然后会提示要输入这个密钥的密码，出于安全考虑应该定义个密码，但是我们的目的就是为了自动化同步数据，所以这里不输入任何密码，直接按回车，即密码为空。最后则生成了私钥(/root/.ssh/id_rsa)和公钥文件(/root/.ssh/id_rsa.pub)B. 把公钥文件的内容拷贝到目标机器上复制主机Aming-1的/root/.ssh/id_rsa.pub文件内容，并粘贴到主机Aming的/root/.ssh/authorized_keys中在这一步也许你会遇到/root/.ssh目录不存在的问题，可以手动创建，并修改目录权限为700也可以执行ssh-keygen命令生成这个目录。保存/root/.ssh/authorized_keys文件后，再到主机Aming-1上执行你会发现，现在不用输入密码也可以登录主机Aming了。下面再从主机Aming-1上执行一下rsync命令试试吧。2）通过后台服务的方式这种方式可以理解成这样，在远程主机上建立一个rsync的服务器，在服务器上配置好rsync的各种应用，然后本机作为rsync的一个客户端去连接远程的rsync服务器。下面笔者就介绍一下，如何去配置一台rsync服务器。A. 建立并配置rsync的配置文件 /etc/rsyncd.conf其中配置文件分为两部分全部配置部分和模块配置部分，全局部分就是几个参数而已，就像笔者的rsyncd.conf中port, log file, pid file, address这些都属于全局配置，而[test] 以下部分就是模块配置部分了。一个配置文件中可以有多个模块，模块名自定义，格式就像笔者的rsyncd.conf中的这样。其实模块中的一些参数例如use chroot, max connections, udi, gid, auth users, secrets file以及hosts allow都可以配置成全局的参数。当然笔者给出的参数并不是所有的，你可以通过man rsyncd.conf 获得更多信息。下面就简单解释一下这些参数的意义：小议：SharePoint 2013配置Office Web Application时，无法打开文件的解决方案
最近在配置Office Web Application的时候出现了下面这种文件无法打开，或者是无法Preview的情况，如下图所示
 
 
以下是对我所遇到的问题的解决办法，希望能够对大家有所帮助，如果有其他更新也会更新给大家的。
 
1.       确认打开SharePoint站点的是IE10（IE8和IE9都会出现截图的情况，暂时没有找到是否有解决办法）
2.       检查AllowOAuthOverHttp setting的值是否为True，
可以使用命令：(Get-SPSecurityTokenServiceConfig).AllowOAuthOverHttp
如果为False，需要运行如下命令将其更新为True
$config = (Get-SPSecurityTokenServiceConfig)
$config.AllowOAuthOverHttp = $true
$config.Update()
 

版权声明：本文为博主原创文章，未经博主允许不得转载。

win10 bcdedit添加vhdx启动
第一步，先用hyper-v，imagex或者其它vhd安装器，将win10 系统安装到一个vhd文件中（vhdx更好，动态扩展等诸多优良特性），比如d:\win10tp.vhdx
第二步，执行如下代码

C:\>bcdedit /copy {current} /d “Windows 10 Technical Preview”

该命令执行完毕后获得到一个guid，诸如：{xxx-xxx-xxx-xx-xx}之类的，将这个花括号连同之间的字符串复制上，把下面的命令里的<guid>全部替换掉，然后执行就可以了。

C:\>bcdedit /set <guid> device vhd=[d:]\win10tp.vhdx
C:\>bcdedit /set <guid> osdevice vhd=[d:]\win10tp.vhdx
C:\>bcdedit /set <guid> detecthal on

版权声明：本文为博主原创文章，未经博主允许不得转载。

Win10开始菜单打不开
一、前言

自从用Win10之后（附上《我的Win10之旅》），用清理软件，总是深度清理，导致rt问题； 
  每次百度都是无用的解决方法； 
  今天，再一次清理（Wise Care 365 注册表深度清理且全选），出现了问题（Build 10525）。百度一下，终于有正解了！

二、正文
1、打开Powershell

· 在cmd中（Win + X，再A），输入powershell
· 或者，Win + R，在运行中输入powershell
CMD： 

运行： 


2、复制输入命令

Get-AppxPackage | % { Add-AppxPackage -DisableDevelopmentMode -Register “((_.InstallLocation)\AppxManifest.xml” -verbose }



CMD： 

Powershell： 


3、等待完成

Done！ 


附

通过Administrator管理员账户登录，也可以解决问题；如果想用微软账号或其他本地账户登录，需要删除原本的账号，重新创建。 
  大致方法：在CMD中输入如下代码
net user administrator /active:yes
注销，即可看见Administrator账户。



1、通过gpedit.msc策略组改用户权限什么的，不行！ 
  2、重启资源管理器什么的，不行！ 
  3、很多都不行！


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

文本编辑工具vim
第九章 文本编辑工具vim前面多次提到过vim这个东西，它是linux中必不可少的一个工具。没有它很多工作都无法完成。早期的Unix都是使用的vi作为系统默认的编辑器的。你也许会有疑问，vi与vim有什么区别？可以这样简单理解，vim是vi的升级版。很多linux系统管理员都习惯用vi，那是因为他们接触linux的时候用的就是vi，vim后来才比较流行。所以，无所谓用vi和vim，只要你能达到你想要的目的即可。在笔者看来vi 和vim最大的区别就是编辑一个文本时，vi不会显示颜色，而vim会显示颜色。显示颜色更易于用户进行编辑。其他功能没有什么区别。所以在linux系统下，使用vi还是vim完全取决你的个人爱好而已。笔者从一开始学linux就一直使用vim，所以也会一直以vim的角色来教授给你。vim的三种模式：一般模式、编辑模式、命令模式。这需要你牢记的，因为以前笔者刚刚从事linux工作的时候去面试，很多单位的笔试题就有这个知识点。* 一般模式： 当你vim  filename  编辑一个文件时，一进入该文件就是一般模式了。在这个模式下，你可以做的操作有，上下移动光标；删除某个字符；删除某行；复制、粘贴一行或者多行。* 编辑模式：一般模式下，是不可以修改某一个字符的，只能到编辑模式了。从一般模式进入编辑模式，只需你按一个键即可（i,I,a,A,o,O,r,R）。当进入编辑模式时，会在屏幕的最下一行出现“INSERT或REPLACE”的字样。从编辑模式回到一般模式只需要按一下键盘左上方的ESC键即可。* 命令模式：在一般模式下，输入”:”或者”/”即可进入命令模式。在该模式下，你可以搜索某个字符或者字符串，也可以保存、替换、退出、显示行号等等。下面笔者教你如何在一个空白文档中写入一段文字，然后保存。输入vim  test.txt直接回车进入一般模式。然后按"i" 字母进入编辑模式会看到窗口的左下方出现”INSERT”字样，说明已经进入了编辑模式，此时就可以写入内容了。等编辑完内容后，按ESC退出编辑模式，进入一般模式。此时在左下方的”INSERT”字样消失，然后按”:”进入命令模式，最后输入wq保存并退出vim。这时，看一下test.txt文档的内容吧。其实vim为全键盘操作的编辑器，所以在各个模式下都有很多功能键盘的。下面笔者列举一下，其中笔者认为常用的会用红色标出，需要你多加练习，另外不常用的你也要知道的。一般模式下移动光标h或向左方向键光标向左移动一个字符j或者向下方向键光标向下移动一个字符K或者向上方向键光标向上移动一个字符l或者向右方向键光标向右移动一个字符Ctrl + f 或者pageUP键屏幕向前移动一页Ctrl + b 或者pageDOWN键屏幕向后移动一页Ctrl + d屏幕向前移动半页Ctrl + u屏幕向后移动半页+光标移动到非空格符的下一列-光标移动到非空格符的上一列n空格（n是数字）按下数字n然后按空格，则光标向右移动n个字符，如果该行字符数小于n，则光标继续从下行开始向右移动，一直到n0（数字0）或者Shift+6移动到本行行首Shift+4即’$’移动到本行行尾H光标移动到当前屏幕的最顶行M光标移动到当前屏幕的中央那一行L光标移动到当前屏幕的最底行G光标移动到文本的最末行nG（n是数字）移动到该文本的第n行gg移动带该文本的首行n回车（n是数字）光标向下移动n行一般模式下查找与替换/word向光标之后寻找一个字符串名为word的字符串，当找到第一个word后，按”n”继续搜后一个?word想光标之前寻找一个字符串名为word的字符串，当找到第一个word后，按”n”继续搜前一个:n1,n2s/word1/word2/g在n1和n2行间查找word1这个字符串并替换为word2，你也可以把”/”换成”#”:1,$s/word1/word2/g从第一行到最末行，查找word1并替换成word2:1,$s/word1/word2/gc加上c的作用是，在替换前需要用户确认一般模式下删除、复制粘贴x,Xx为向后删除一个字符，X为向前删除一个字符nx（n为数字）向后删除n个字符dd删除光标所在的那一行ndd（n为数字）删除光标所在的向下n行d1G删除光标所在行到第一行的所有数据dG删除光标所在行到末行的所有数据yy复制光标所在的那行nyy复制从光标所在行起向下n行p,Pp复制的数据从光标下一行粘贴，P则从光标上一行粘贴y1G复制光标所在行到第一行的所有数据yG复制光标所在行到末行的所有数据J讲光标所在行与下一行的数据结合成同一行u还原过去的操作进入编辑模式i在当前字符前插入字符I在当前行行首插入字符a在当前字符后插入字符A在当前行行末插入字符o在当前行下插入新的一行O在当前行上插入新的一行r替换光标所在的字符，只替换一次R一直替换光标所在的字符，一直到按下ESC命令模式:w将编辑过的文本保存:w!若文本属性为只读时，强制保存:q退出vim:q!不管编辑或未编辑都不保存退出:wq保存，退出:e!将文档还原成最原始状态ZZ若文档没有改动，则不储存离开，若文档改动过，则储存后离开，等同于:wq:w  [filename]编辑后的文档另存为filename:r  [filename]在当前光标所在行的下面读入filename文档的内容:set  nu在每行的行首显示行号:set  nonu取消行号n1,n2 w [filename]将n1到n2的内容另存为filename这个文档:!  command暂时离开vim运行某个linux命令，例如 :!  ls /home 暂时列出/home目录下的文件，然后会提示按回车回到vim暂时就讲这么多了。如果你全部掌握，你就是vim高手啦。如果你觉得太多，只要记住笔者标红部分即可，其他的用时再过来查就ok啦。下面笔者给你留一个小作业，希望你要认真完成！1. 请把/etc/init.d/iptables  复制到/root/目录下，并重命名为test.txt2. 用vim打开test.txt并设置行号3. 分别向下、向右、向左、向右移动5个字符4. 分别向下、向上翻两页5. 把光标移动到第49行6. 让光标移动到行末，再移动到行首7. 移动到test.txt文件的最后一行8. 移动到文件的首行9. 搜索文件中出现的 iptables 并数一下一共出现多少个10. 把从第一行到第三行出现的iptables 替换成iptable11. 还原上一步操作12. 把整个文件中所有的iptables替换成iptable13. 把光标移动到50行，删除字符”$”14. 还原上一步操作15. 删除第50行16. 还原上一步操作17. 删除从37行到42行的所有内容18. 还原上一步操作19. 复制48行并粘贴到52行下面20. 还原上一步操作（按两次u）21. 复制从37行到42行的内容并粘贴到44行上面23. 还原上一步操作（按两次u）24. 把37行到42行的内容移动到19行下面25. 还原上一步操作（按两次u）26. 光标移动到首行，把/bin/sh  改成 /bin/bash27. 在第一行下面插入新的一行，并输入”# Hello!”28. 保存文档并退出

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

用VBS创建Excel后，打开时却提示“您尝试打开的文件 的格式与文件扩展名指定的格式不一致”
使用此VBS代码创建Excel：

Set oexcel=CreateObject("excel.application")
oexcel.Workbooks.Add()
oexcel.ActiveWorkbook.SaveAs("d:\xx.xls")
'
oexcel.Quit
Set oexcel=Nothing但创建出的Excel打开时会提示“您尝试打开的文件 的格式与文件扩展名指定的格式不一致”。



虽然点确定后也可以使用。
但是..用户体验感太差..
解决方法：把xls改为xlsx即可..
即：

Set oexcel=CreateObject("excel.application")
oexcel.Workbooks.Add()
oexcel.ActiveWorkbook.SaveAs("d:\xx.xlsx")
'
oexcel.Quit
Set oexcel=Nothing

由VBS群自称“有人”的好心先生提供。



....他觉得这是常识，不值得一提。

版权声明：本文为博主原创文章，未经博主允许不得转载。

Jetty服务器jmx监控
Jetty服务器jmx监控
Jetty 服务器增加jmx，jmx-remote模块
修改对应jetty服务器的配置文件start.ini追加如下两行 
–module=jmx 
–module=jmx-remote
如果需要可以自己看下etc/jetty-jmx.xml和 jetty-jmx-remote.xml中的对应属性配置 
比如： 
jetty.jmxrmiport 
jetty.jmxrmihost
启动jetty 
加上jvm参数-Djava.rmi.server.hostname=10.128.31.5
查看下启动的进程 
[root@10.128.31.5 logs]# jps -vml |grep webapp 
13165 ../jetty-man/start.jar -server -Xms2g -Xmx2g -XX:PermSize=64m -XX:MaxPermSize=128m -Djava.rmi.server.hostname=10.128.31.5
在visualVm中 
插入一个jmx监控



另一种方式就是我们可以在服务器上单独启动jstatd命令启动rmi服务来做监控 
可以参考下这位大师写的jstatd介绍：http://blog.csdn.net/fenglibing/article/details/17323515 
写这么个策略文件 
[root@10.128.31.5 logs]# more jstatd.all.policy  
grant codebase “file:${java.home}/../lib/tools.jar” { 
    permission java.security.AllPermission; 
};
执行：
[root@10.128.31.5 logs]# jstatd -J-Djava.rmi.server.hostname=10.128.31.5 -J-Djava.security.policy=jstatd.all.policy -p 1100
启动后然后在自己的机器上可以用visualVm来新建一个remoteHost来试试 
修改属性如下，因为上边开启的port是1100，（默认的是1099，因为被刚刚的webapp启动占用）

接下来发现整个服务器上的jvm进程都能显示出来了


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

SSH客户端执行SQL命令时不能一次全部执行
SSH客户端执行SQL命令时对sql命令的长度由限制，过长则会报一些无缘无故的错误，搞得你二丈和尚摸不着头脑，对于一个项目的全部sql语句最好分几次执行，每次不超过100行格式良好的sql。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：欢迎转载，转载请注明原地址，谢谢！

SVN冲突解决方法
说明

在ubuntu中，使用svn控制代码版本（其实个人喜欢GIT的，但是技术团队使用的svn，好吧，没什么大不了，虽然以前用的是win的svn），出现冲突问题，做程序员就得上刀山下火海，不怕问题来找你，所以，本着职业的精神，好吧，解决吧。
第一次使用markdown写博客，写的时间有点旧，语法不熟悉，看着语法手册一步一步创建的，大家凑合着看吧。

写在前面的话
不管是使用git还是svn，都会用到diff，查看版本之间的不同，个人不喜欢git、svn的代码比较风格，所以，配置的是BCompare4.0.7版本。在Beyond Compare官网下载LINUX版本的BCompare。
BCompare具体安装步骤

下载**BCompare**，在其官网 http://www.scootersoftware.com/download.php; 
 

下载的是.deb扩展的文件，双击安装即可; 
 （这个是官网下载的） 
（这个破解版的，里面有破解程序）
安装过程中可能会要使用注册码key，一般选择试用30天，但是一般帝国大都喜欢破解版，网上有很多破解的方法，文后会附上4.0.7的破解地址;
运行，CTRL+ALT+T快捷打开命令窗口，输入bcompare回车即可运行。

SVN具体安装步骤

建议国内朋友把apt资源镜像库修改为国内的镜像
阿里云镜像服务器  http://mirrors.aliyun.com
163镜像服务器  http://mirrors.163.com/
清华大学镜像服务器  http://mirrors.tuna.tsinghua.edu.cn
其他，诸如豆瓣、华中理工大学、山东理工大学、中国科技大学

修改方法：
~$ sudo vim /etc/apt/sources.list
在vim编辑器中使用全局替换，将系统的镜像地址替换为上述所说的国内镜像，一般选择阿里云的，vim替换命令： :%s/mirrors.ubuntu.com/mirrors.aliyun.com/g
参数说明：s是替换，g是全局
%s相当于1,$s，即从头到尾替换
/a/b/中参数为替换参数，意思是把a替换为b 

vim中输入命令:wq回车退出vim编辑器

~$ sudo apt-get upgrade  更新apt库
～$ sudo apt-get update 
～$ sudo apt-get install svn 安装svn
SVN安装结束！！！

svn配置BCompare
这里使用了csdn上zzqhost的文章《用beyondcompare来diff SVN中的代码》，请见谅，此文不值钱，所以没有任何商业用途，只为方便大家，如果有侵权，告知笔者，自会删除。

新建一个mydiff.sh文件
在目录~/.﻿﻿subversions/下，新建脚本文件 mydiff.sh, 内容如下： 
~$ sudo vim mydiff.sh
打开编辑器，写入下面的shell代码：

#!/bin/sh

# Configure your favorite diff program here.
DIFF="/usr/bin/bcompare"
# DIFF="/usr/bin/meld"
# DIFF="/usr/bin/kompare"
# DIFF=env LANG=zh_CN.UTF-8 WINEPREFIX="/home/borqs/.wine" wine "C:\\Program Files\\Beyond Compare 2\\BC2.exe"

# Subversion provides the paths we need as the sixth and seventh 
# parameters.
LEFT=${6}
RIGHT=${7}

# Call the diff command (change the following line to make sense for
# your merge program).
$DIFF $LEFT $RIGHT 

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
return 0
并给其添加可执行权限.


修改config文件.
修改目录~/.subversions/下的文件config, 加入如下一行： 

diff-cmd = /home/zzq/.subversion/mydiff.sh
现在说说如何解决冲突问题
当使用svn up更新代码的时候，出现了冲突（具体显示什么信息已忘记）：
<!-- 忘记了错误信息，以后会补上-->
 
如果你也向我一样，忘记有哪些冲突，请使用命令svn resolve查看：

joyven@joyven-ThinkPad-E450:/var/www/weimob/2.0/trunk$ svn resolve 
在文件“app/modules/merchant/views/replys/subscribereply.php”中发现冲突。
选择: (p) 推迟, (df) 显示差异, (e) 编辑文件, (m) 合并, (mc) 我这边的冲突, 
        (tc) 他们的冲突, (s) 显示全部选项: 

当我输入e进行编辑的时候，搜索>>>>的字符串，即可定位冲突的信息，然后看看冲突的是我这边的，还是他们的，然后进行编辑，删掉冲突的行，以及冲突标记。
修改完后，根据提示信息写入修改，然后离开，退出编辑器。
接下来，又回到了选择的那一块了，输入：df，回车看看什么情况：

— app/modules/merchant/views/replys/subscribereply.php.r27619   - 别人的 
  +++ app/modules/merchant/views/replys/subscribereply.php  - 已合并 
  @@ -725,7 +725,7 @@ 
</div> 
<div class="form-actions"> 
<!--     <input type="hidden" name="reply_id" id="reply_id" value="140841">--> 
-        <input type="hidden" name="news_reply_type" id="news_reply_type" value="<?php echo empty($newsmaterial['news_reply_type']) ? '' : $newsmaterial['news_reply_type'];?>"> 
+         <input type="hidden" name="news_reply_type" id="news_reply_type" value="<?php if(isset($newsmaterial['news_reply_type'])){echo $newsmaterial['news_reply_type'];}?>">                                <input type="hidden" name="news_reply_type" >id="news_reply_type" value="<?php echo empty($newsmaterial['news_reply_type']) ? '' : $newsmaterial['news_reply_type'];?>">
<button type="submit" class="btn btn-primary"  id ="bsubmit">保存</button> 
<!--  <button type="button" class="btn" onclick="window.location='/insidepage/reply/by-repaly.html'"> 切换到图文模式 </button>--> 
  选择: (p) 推迟, (df) 显示差异, (e) 编辑文件, (m) 合并, (r) mark resolved, 
       (mc) 我这边的冲突, (tc) 他们的冲突, (s) 显示全部选项: 

这时候，代码已经合并成功了，如果不相信，请继续输入df或者m看看，由于前面输入过df，现在输入m尝试一下吧：

正在合并“app/modules/merchant/views/replys/subscribereply.php”。 
  Conflicting section found during merge: 
  (1) 他们的版本 (第 728 行)            |(2) 你的版本 (第 728 行) 
  ————————————–+————————————– 
<input|                                <input 
  ————————————–+————————————– 
  Select: (1) use their version, (2) use your version, 
(12) their version first, then yours, 
(21) your version first, then theirs, 
(e1) edit their version and use the result, 
(e2) edit your version and use the result, 
(eb) edit both versions and use the result, 
(p) postpone this conflicting section leaving conflict markers, 
(a) abort file merge and return to main menu: *1* 
  “app/modules/merchant/views/replys/subscribereply.php”的合并完成。 
  选择: (p) 推迟, (df) 显示差异, (e) 编辑文件, (m) 合并, (r) mark resolved, 
        (mc) 我这边的冲突, (tc) 他们的冲突, (s) 显示全部选项: *r* 
  “app/modules/merchant/views/replys/subscribereply.php”的冲突状态已解决

输入m看到的信息如上（除了最后一行），然后我们输入1,告诉svn使用他们的版本，然后svn告诉我们合并完成。最后输入r，显示冲突已解决。当我们回到命令窗口，输入svn resolove的时候，发现什么都没有输出，这说明冲突确实解决了，并且告诉了svn。
附加信息

BCompare4.0.7破解方法及破解版下载 
vim的全局替换



            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

linux系统用户以及用户组管理
第七章	linux系统用户以及用户组管理关于这部分内容，笔者在日常的linux系统管理工作中用到的并不多，但这并不代表该内容不重要。毕竟linux系统是一个多用户的系统，每个账号都干什么用，你必须了如指掌。因为这涉及到一个安全的问题。【认识/etc/passwd和/etc/shadow】这两个文件可以说是linux系统中最重要的文件之一。如果没有这两个文件或者这两个文件出问题，则你是无法正常登录linux系统的。/etc/passwd由’:’分割成7个字段，每个字段的具体含义是：1）用户名（如第一行中的root就是用户名），代表用户账号的字符串。用户名字符可以是大小写字母、数字、减号（不能出现在首位）、点以及下划线，其他字符不合法。虽然用户名中可以出现点，但不建议使用，尤其是首位为点时，另外减号也不建议使用，因为容易造成混淆。2）存放的就是该账号的口令，为什么是’x’呢？早期的unix系统口令确实是存放在这里，但基于安全因素，后来就将其存放到/etc/shadow中了，在这里只用一个’x’代替。3）这个数字代表用户标识号，也叫做uid。系统识别用户身份就是通过这个数字来的，0就是root，也就是说你可以修改test用户的uid为0，那么系统会认为root和test为同一个账户。通常uid的取值范围是0~65535，0是超级用户（root）的标识号，1~499由系统保留，作为管理账号，普通用户的标识号从500开始，如果我们自定义建立一个普通用户，你会看到该账户的标识号是大于或等于500的。4）表示组标识号，也叫做gid。这个字段对应着/etc/group 中的一条记录，其实/etc/group和/etc/passwd基本上类似。5）注释说明，该字段没有实际意义，通常记录该用户的一些属性，例如姓名、电话、地址等等。不过，当你使用finger的功能时就会显示这些信息的（稍后做介绍）。6）用户的家目录，当用户登录时就处在这个目录下。root的家目录是/root，普通用户的家目录则为/home/username，这个字段是可以自定义的，比如你建立一个普通用户test1，要想让test1的家目录在/data目录下，只要修改/etc/passwd文件中test1那行中的该字段为/data即可。7）shell，用户登录后要启动一个进程，用来将用户下达的指令传给内核，这就是shell。Linux的shell有很多种sh, csh, ksh, tcsh, bash等，而Redhat/CentOS的shell就是bash。查看/etc/passwd文件，该字段中除了/bin/bash外还有/sbin/nologin比较多，它表示不允许该账号登录。如果你想建立一个账号不让他登录，那么就可以把该字段改成/sbin/nologin，默认是/bin/bash。再来看看/etc/shadow这个文件，和/etc/passwd类似，用”:”分割成9个字段。1）用户名，跟/etc/passwd对应。2）用户密码，这个才是该账号的真正的密码，不过这个密码已经加密过了，但是有些黑客还是能够解密的。所以为了安全，该文件属性设置为600，只允许root读写。3）上次更改密码的日期，这个数字是这样计算得来的，距离1970年1月1日到上次更改密码的日期，例如上次更改密码的日期为2012年1月1日，则这个值就是365*（2012-1970）+1=15331。4）要过多少天才可以更改密码，默认是0，即不限制。5）密码多少天后到期。即在多少天内必须更改密码，例如这里设置成30，则30天内必须更改一次密码，否则将不能登录系统，默认是99999，可以理解为永远不需要改。6）密码到期前的警告期限，若这个值设置成7，则表示当7天后密码过期时，系统就发出警告告诉用户，提醒用户他的密码将在7天后到期。7）账号失效期限。你可以这样理解，如果设置这个值为3，则表示：密码已经到期，然而用户并没有在到期前修改密码，那么再过3天，则这个账号就失效了，即锁定了。8）账号的生命周期，跟第三段一样，是按距离1970年1月1日多少天算的。它表示的含义是，账号在这个日期前可以使用，到期后账号作废。9）作为保留用的，没有什么意义。【新增/删除用户和用户组】a. 新增一个组  groupadd  [-g GID]  groupname不加-g 则按照系统默认的gid创建组，跟用户一样，gid也是从500开始的-g选项可以自定义gidb. 删除组  gropudel  groupname 没有特殊选项。c. 增加用户  useradd [-u UID] [-g GID]  [-d HOME] [-M] [-s]-u  自定义UID-g  使其属于已经存在的某个GID-d  自定义用户的家目录-M	不建立家目录-s	自定义shell你会发现，创建test11时，加上了-M选项后，在/etc/passwd文件中test11那行的第六字段依然有/home/test11，可是ls查看该目录时，会提示该目录不存在。-M选项的作用就是不创建用户的家目录。-d. 删除用户  userdel  [-r]  username-r 选项的作用是删除用户时，连同用户的家目录一起删除。【chfn  更改用户的finger （不常用）】前面内容中提到了findger，即在/etc/passwd文件中的第5个字段中所显示的信息，那么如何去设定这个信息呢？就是chfn这个命令了。修改完后，就会在/etc/passwd文件中的test的那一行第五个字段中看到相关信息了，默认是空的。【创建/修改一个用户的密码   “passwd  [username]”】等创建完账户后，默认是没有设置密码的，虽然没有密码，但该账户同样登录不了系统。只有设置好密码后方可登录系统。为用户创建密码时，为了安全起见，请尽量设置复杂一些。你可以按照这样的规则来设置密码：a. 长度大于10个字符；b. 密码中包含大小写字母数字以及特殊字符（*&等）；c. 不规则性（不要出现root, happy, love, linux, 123456, 111111等等单词或者数字）；d. 不要带有自己名字、公司名字、自己电话、自己生日等。passwd 后面不跟用户名则是更改当前用户的密码，当前用户为root，所以此时修改的是root的密码，后面跟test则修改的是test的密码。【用户身份切换】Linux系统中，有时候普通用户有些事情是不能做的，除非是root用户才能做到。这时就需要临时切换到root身份来做事了。用test账号登录linux系统，然后使用su - 就可以切换成root身份，前提是知道root的密码。你可以使用echo  $LOGNAME来查看当前登录的用户名su 的语法为： su [-] username 后面可以跟”-”也可以不跟，普通用户su不加username时就是切换到root用户，当然root用户同样可以su到普通用户。加”-“后会连同用户的环境变量一起切换过来。su test 后虽然切换到了test用户，但是当前目录还是切换前的/root目录，然后当用su - test时切换用户后则到了test的家目录/home/test。当用root切换普通用户时，是不需要输入密码的。这也体现了root用户至高无上的权利。用su是可以切换用户身份，如果每个普通用户都能切换到root身份，如果某个用户不小心泄漏了root的密码，那岂不是系统非常的不安全？没有错，为了改进这个问题，产生了sudo这个命令。使用sudo执行一个root才能执行的命令是可以办到的，但是需要输入密码，这个密码并不是root的密码而是用户自己的密码。默认只有root用户能使用sudo命令，普通用户想要使用sudo，是需要root预先设定的，即，使用visudo命令去编辑相关的配置文件/etc/sudoers。如果没有visudo这个命令，请使用” yum install -y sudo”安装。默认root能够sudo是因为这个文件中有一行” root   ALL=(ALL)  ALL” 在该行下面加入” test    ALL=(ALL)    ALL”就可以让test用户拥有了sudo的权利。如果每增加一用户就设置一行，这样太麻烦了。所以你可以这样设置。把这一行前面的”#”去掉，让这一行生效。它的意思是，wheel这个组的所有用户都拥有了sudo的权利。接下来就需要你把想让有sudo权利的所有用户加入到wheel这个组中即可。你不妨跟笔者试一下，非常有意思。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

Servlet 中，out.print()与out.write()的区别
out.write()是字节输出流的方法  
out.print()是字符输出流的方法  
一、区别 
 1. print方法是子类JspWriter，write是Writer类中定义的方法； 
 2. 重载的print方法可将各种类型的数据转换成字符串的形式输出，而重载的write方法只能输出字符、字符数组和字符串等与字符相关的数据； 
 3. JspWriter类型的out对象使用print方法和write方法都可以输出字符串，但是，如果字符串对象的值为null时，print方法将输出内容为“null”的字符串，而write方法则是抛出NullPointerException异常。
例如：
下面的test.jsp文件：
<% String str=null;

out.print(str);     //输出null

//out.write(str);  //抛出异常

%>
二、JSP中元素转译成Servlet时的规则

HTML代码：成为Servlet中的service()方法的out.write语句；
JSP表达式：在service()方法中用out.print语句输出该变量、表达式、方法的值


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

开发笔记-Linux-MySQL
mysql字段自增
mysql中每张表只能设置一个字段为自增长字段，这个字段可以是主键，也可以不是主键，如果不是主键，则必须设置为一种“键(key)”，
linux命令ps aux
到进程使用什么账户运行的，在linux里是可以通过ps 和grep来查询到的。如ps aux|grep httpd来查询httpd进程使用什么账户运行的。
linux为指定用户指定文件夹赋权
linux中如果想为一个用户指定文件夹赋权可以使用chown命令实现： 
chown -R apache.apache /data/www/project/即可将目录/data/www/project/下的所有文件和目录的拥有者拥有组都修改为apache账户。
MySQL编码设置
今天被MySQL编码搞死了，浪费了一个下午的工作时间在找中文乱码问题， 
先描叙一下我遇到的问题： 
使用ssh客户端工具在windows这边使用sql命令插入数据， 
ssh工具使用的是SecureCRT 7.1，Session Options选择已经设置为UTF8编码了， 
然后我使用sql命令查询数据库，能看到正常的中文数据（这个操作让我误以为我插入的数据是没有乱码的UTF8），然后在PHP查询数据库时，php页面显示的数据是乱码，初步判断是mysql编码配置有问题， 
于是根据网上的解决办法： 
先查数据库编码配置：
SHOW VARIABLES LIKE 'character_set_%';
查完之后发现确实不是utf8。 
那就改呗： 
找到my.cnf文件， 
在my.cnf文件中找到[mysqld] 添加：
default-character-set=utf8
init_connect='SET NAMES utf8'
然后重启mysql服务。 
如果default-character-set=utf8导致mysql无法启动，那么你的mysql版本只能支持
character-set-server=utf8
这时候我再用ssh客户端的sql命令查询数据，发现我原来插入的数据是乱码，坑啊。
另外还有其他设置编码的地方： 
修改配置文件“my.ini”中的
default-character-set=utf8
修改配置文件“/var/lib/mysql/mydb/db.opt”中的
default-character-set=utf8
default-collation=utf8_general_ci

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：欢迎转载，转载请注明原地址，谢谢！

Docker安全--将用户添加到Docker组中进行启动容器与未添加到Docker组中的sudo执行的研究
/*************************************** 
* Author : Samson 
* Date : 08/25/2015 
* Test platform: 
* gcc 4.8.2 
* GNU bash, 4.3.11(1)-release (x86_64-pc-linux-gnu) 
* Docker version 1.7.1 
* Debian GNU/Linux 7 
* *************************************/
结论：
对于将host下的普通用户添加到docker组中后不使用sudo即可执行docker程序，会给大
家造成一种启动docker是以非root权限进行启动的假象，其实这样只是减少了每次使用
sudo时输入密码的过程罢了，其实docker本身还是以sudo的权限在运行的。

以下是实际的验证过程:
还是以shadowsocks的Dockerfile来进行验证。 
rootyygy是build所得。
docker build -rm -t rootyygy .

1、将host中的普通用户添加到doker组后应用程序的运行状态：
查看当前用户及所属组：
ufo@ufo:~/$ id
uid=1000(ufo) gid=1000(ufo) 组=1000(ufo),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),104(scanner),109(bluetooth),111(netdev),999(docker)

启动rootyygy
ufo@ufo:~/$ docker start rootyygy
rootyygy
ufo@ufo:~/$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
4d3813cacaab        rootyygy            "/bin/tini -- /usr/l   53 minutes ago      Up 5 seconds        443/tcp, 8388/tcp   rootyygy            

在host中查看docker进程的状态，是以root进行启动的：
ufo@ufo:~/$ ps aux | grep docker
root       3449  0.0  0.4 923432 19328 ?        Sl   12:20   0:18 /usr/bin/docker -d -p /var/run/docker.pid --insecure-registry hub.lianshinet.com:5000
ufo       11626  0.0  0.0  10156  2016 pts/3    R+   17:32   0:00 grep docker

在host中查看应用程序的状态，是以root进行启动的：
ufo@ufo:~/$ ps aux | grep shad
root      11253  0.0  0.0   1104     4 ?        Ss   17:06   0:00 /bin/tini -- /usr/local/bin/shadowsocks.sh
root      11258  0.0  0.0  20032  2808 ?        S    17:06   0:00 /bin/bash /usr/local/bin/shadowsocks.sh
root      11259  0.4  0.3  45764 14288 ?        S    17:06   0:00 /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks.json
ufo       11278  0.0  0.0  10152  1960 pts/3    S+   17:07   0:00 grep shad

进行容器中进行进程的查看，是以root进行启动的：
ufo@ufo:~/$ docker inspect -f {{.State.Pid}} rootyygy
11253

ufo@ufo:~/$ sudo nsenter --target 11253 --mount --uts --ipc --net --pid
[sudo] password for ufo: 
root@4d3813cacaab:/# ps aux
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root          1  0.0  0.0   1104     4 ?        Ss   09:06   0:00 /bin/tini -- /usr/local/bin/shadowsocks.sh
root          6  0.0  0.0  20032  2808 ?        S    09:06   0:00 /bin/bash /usr/local/bin/shadowsocks.sh
root          7  0.0  0.3  45764 14288 ?        S    09:06   0:00 /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks.json
root         19  0.0  0.0  20256  3240 ?        S    09:13   0:00 -bash
root         23  0.0  0.0  17488  2056 ?        R+   09:13   0:00 ps aux

2、host中的用户没有添加到docker组的用户使用sudo启动容器后的运行状态：
查看当前用户及所属组：
dj@ufo:~/$ id
uid=1002(dj) gid=1002(dj) 组=1002(dj)

启动rootyygy
dj@ufo:~/$ sudo docker start rootyygy
rootyygy

dj@ufo:~/$ docker ps
Get http:///var/run/docker.sock/v1.19/containers/json: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?
dj@ufo:~/$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
4d3813cacaab        rootyygy            "/bin/tini -- /usr/l   About an hour ago   Up 53 seconds       443/tcp, 8388/tcp   rootyygy

在host中查看docker进程的状态，是以root进行启动的：
dj@ufo:$ ps aux | grep docker
root       3449  0.0  0.4 923432 18784 ?        Sl   12:20   0:18 /usr/bin/docker -d -p /var/run/docker.pid --insecure-registry hub.lianshinet.com:5000
dj        11532  0.0  0.0  10156  2112 pts/1    S+   17:29   0:00 grep docker

在host中查看应用程序的状态，是以root进行启动的：
dj@ufo:$ ps aux | grep nginx
dj        11172  0.0  0.0  10152  1944 pts/1    S+   17:02   0:00 grep nginx
dj@ufo:~/$ ps aux | grep shad
root      11152  0.1  0.0   1104     4 ?        Ss   17:02   0:00 /bin/tini -- /usr/local/bin/shadowsocks.sh    
root      11158  0.0  0.0  20032  2740 ?        S    17:02   0:00 /bin/bash /usr/local/bin/shadowsocks.sh
root      11159  0.8  0.3  45764 14400 ?        S    17:02   0:00 /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks.json
dj        11174  0.0  0.0  10152  1956 pts/1    S+   17:02   0:00 grep shad

进行容器中进行进程的查看，是以root进行启动的：
dj@ufo:~/$ sudo docker inspect -f {{.State.Pid}} rootyygy
11419

dj@ufo:~/$ sudo nsenter --target 11419 --mount --uts --ipc --net --pid
root@4d3813cacaab:/# ps aux
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root          1  0.0  0.0   1104     4 ?        Ss   09:17   0:00 /bin/tini -- /usr/local/bin/shadowsocks.sh
root          6  0.0  0.0  20032  2788 ?        S    09:17   0:00 /bin/bash /usr/local/bin/shadowsocks.sh
root          7  0.0  0.3  45764 14392 ?        S    09:17   0:00 /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks.json
root         19  0.0  0.0  20256  3244 ?        S    09:19   0:00 -bash
root         23  0.0  0.0  17488  2048 ?        R+   09:19   0:00 ps aux


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

小议：忘记SharePoint 2013 PassPhrase 怎么办？
前段时间同事在新加坡给一个客户做Service，需求是：客户想为SharePoint
 Farm扩展一个Server，但不幸的是，他们忘记了SharePoint的PassPhrase，大家都很着急，也尝试了到SharePoint
 Config DB查看，无果，后来我们给客户提供了一个Solution：用PowerShell来Reset
 PassPhrase解决问题，客户很开心的接受了。
 
具体步骤如下：
 

用管理员身份的用户打开SharePoint PowerShell，输入命令：$Passphrase=ConvertTo-SecureString
 -String "1qaz2wsxE" -asPlainText -Force，如下图所示：

 



 

输入命令：Set-SPPassPhrase -PassPhrase $Passphrase -confirm，如下图所示：

 



 

再次输入你要重置的Passphrase进行confirm，如下图所示：

 



 

若Confirm成功后，还需输入“Y”来确认设置情况，已结束Reset过程，如下图所示：

 
 
 
相信很多客户随着企业数据日趋增大的情况下，扩展SharePoint Server是必经之路，但最初的PassPhrase可能由于疏忽忘记的情况下，这边文章能给大家带来帮助。

版权声明：本文为博主原创文章，未经博主允许不得转载。

图形界面还是命令窗口
第二章 图形界面还是命令窗口 对于linux的应用，我想大多数都是用在服务器领域，对于服务器来讲真的没有必要跑一个图形界面。所以我们平时安装linux操作系统时往往是不安装图形界面的。说到这里也许你会有疑问，图形界面还能选择装或者不装？是的，虽然linux和微软的windows一样同位操作系统，但是它们有一个很大的区别就是windows操作系统的图形界面是和内核一体的，俗称微内核，而linux操作系统图形界面就像一个软件一样，和内核并不是一体的。所以linux你可以选择不安装图形界面，这样不仅不影响服务器的正常使用还可以节省系统资源的开销，何乐而不为呢？如果你对linux超级感兴趣，想使用linux就像使用windows一样，那你可以安装图形界面，可以像windows一样来体验linux也是蛮不错的。但是如果你想成为一个专业的linux系统工程师，那我建议你从第一天开始就不要去安装图形界面，从命令窗口开始熟悉它。另外一点值得说的是，日常应用中，我们都是远程管理服务器的，不可能开着图形界面来让你去操作，虽然目前也有相应的工具支持远程图形连接服务器，可是那样太消耗网络带宽资源，所以从这方面来考虑还是建议你不要使用图形界面

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

关于linux的历史
 LINUX发展史 "Hello everybody out there using minix——I'm doing a (free) operating system" 在1991年的八月，网络上出现了一篇以此为开篇话语的帖子——这是一个芬兰的名为Linus Torvalds的大学生为自己开始写作一个类似minix，可运行在386上的操作系统寻找志同道合的合作伙伴。1991年10月5日，Linus Torvalds在新闻组comp.os.minix发布了大约有一万行代码的Linux v0.01版本。 到了1992年，大约有1000人在使用Linux，值得一提的是，他们基本上都属于真正意义上的hacker。1993年，大约有100余名程序员参与了Linux内核代码编写/修改工作，其中核心组由5人组成，此时Linux 0.99的代码有大约有十万行，用户大约有10万左右。1994年3月，Linux1.0发布，代码量17万行，当时是按照完全自由免费的协议发布，随后正式采用GPL协议。至此， Linux的代码开发进入良性循环。很多系统管理员开始在自己的操作系统环境中尝试linux，并将修改的代码提交给核心小组。由于拥有了丰富的操作系统 平台，因而 Linux的代码中也充实了对不同硬件系统的支持，大大的提高了跨平台移植性。1995年，此时的Linux 可在Intel、Digital 以及Sun SPARC处理器上运行了，用户量也超过了50万，相关介绍Linux的Linux Journal杂志也发行了超过10万册之多。1996年6月，Linux 2.0内核发布，此内核有大约40万行代码，并可以支持多个处理器。此时的Linux 已经进入了实用阶段，全球大约有350万人使用。1997年夏，大片《泰坦尼克号》在制作特效中使用的160台Alpha图形工作站中，有105台采用了Linux操作系统。1998年是Linux迅猛发展的一年。1月，小红帽高级研发实验室成立，同年RedHat 5.0获得了InfoWorld的操作系统奖项。4月Mozilla 代码发布，成为linux图形界面上的王牌浏览器。Redhat 宣布商业支持计划，网络了多名优秀技术人员开始商业运作。王牌搜索引擎"Google"现身，采用的也是Linux服务器。值得一提的是， Oracle 和Informix 两家数据库厂商明确表示不支持Linux，这个决定给予了Mysql数据库充分的发展机会。同年10月，Intel和Netscape宣布小额投资红帽软 件，这被业界视作Linux获得商业认同的信号。同月，微软在法国发布了反Linux公开信，这表明微软公司开始将Linux视作了一个对手来对待。十二 月，IBM发布了适用于Linux的文件系统AFS 3.5以及Jikes Java 编辑器和Secure Mailer及DB2测试版，IBM的此番行为，可以看作是与Linux羞答答地第一次亲密接触。迫于Windows和Linux的压力，Sun逐渐开放 了Java协议，并且在UltraSparc上支持Linux操作系统。1998年可说是Linux与商业接触的一年。1999年，IBM宣布与Redhat公司建立伙伴关系，以确保Redhat在IBM机器上正确运行。三月，第一届 LinuxWorld 大会的召开，象征Linux时代的来临。IBM、Compaq和Novell宣布投资Redhat公司，以前一直对Linux持否定态度的Oracle公 司也宣布投资。五月，SGI公司宣布向Linux移植其先进的XFS文件系统。对于服务器来说，高效可靠的文件系统是不可或缺的，SGI的慷慨移植再一次 帮助了Linux确立在服务器市场的专业性。7月IBM启动对Linux的支持服务和发布了Linux DB2，从此结束了Linux得不到支持服务的历史，这可以视作Linux真正成为服务器操作系统一员的重要里程碑。2000年初始，Sun公司在Linux的压力下宣布Solaris8降低售价。事实上Linux对Sun造成的冲击远比对 Windows来得更大。 2月Red Hat发布了嵌入式Linux的开发环境，Linux在嵌入式行业的潜力逐渐被发掘出来。在4月，拓林思公司宣布了推出中国首家Linux工程师认证考 试，从此使Linux操作系统管理员的水准可以得到权威机构的资格认证，此举大大增加了国内Linux爱好者学习的热情。伴随着国际上的Linux热潮， 国内的联想和联邦推出了"幸福Linux家用版"，同年7月中科院与新华科技合作发展红旗Linux, 此举让更多的国内个人用户认识到了存在着Linux这个操作系统。11月，Intel 与 Xteam合作，推出基于Linux的网络专用服务器，此举结束了在Linux单向顺应硬件商硬件开发驱动的历史。2001月新年依使就爆出新闻，Oracle宣布在OTN上的所有会员都可免费索取Oracle 9i的Linux版本，从几年前的"绝不涉足Linux系统"到如今的主动献媚，足以体现Linux的发展迅猛。IBM则决定投入10亿美元扩大 Linux系统的运用，此举犹如一针强心剂，令华尔街的投资者们闻风而动。到了5月这个初夏的时节，微软公开反对"GPL"引起了一场大规模的论战。8月 红色代码爆发，引得许多站点纷纷从windows操作系统转向linux操作系统，虽然是一次被动的转变，不过也算是一次应用普及吧。12月Red Hat 为IBM s/390大型计算机提供了Linux解决方案，从此结束了AIX孤单独行无人伴的历史。2002年是Linux企业化的一年。2月，微软公司迫于各洲政府的压力，宣布扩大公开代码行动，这可是Linux开源带来的深刻影响的结果。3月，内核开发者宣布新的Linux系统支持64位的计算机。2003年1月，NEC宣布将在其手机中使用Linux操作系统，代表着Linux成功进军手机领域。5月之中SCO表示就 Linux使用的涉嫌未授权代码等问题对IBM进行起诉，此时人们才留意到，原本由SCO垄断的银行/金融领域，份额已经被Linux抢占了不少，也难怪 SCO如此气急败坏了。9 月中科红旗发布Red Flag Server4版本，性能改进良多。11月IBM注资Novell以2.1亿收购SuSE，同期Redhat计划停止免费的Linux，顿时业内骂声四 起。Linux在商业化的路上渐行渐远。2004年的第1月，本着"天下事分久必合，合久必分"之天理，SuSE嫁到了Novell，SCO继续顶着骂名四处强行"化缘 "， Asianux， MandrakeSoft也在五年中首次宣布季度赢利。3月SGI宣布成功实现了Linux操作系统支持256个Itanium 2处理器。4月里美国斯坦福大学Linux大型机系统被黑客攻陷，再次证明了没有绝对安全的OS。六月的统计报告显示在世界500强超级计算机系统中，使 用Linux操作系统的已经占到了280席，抢占了原本属于各种Unix的份额。9月HP开始网罗Linux内核代码人员，以影响新版本的内核朝对HP有 利的方式发展，而IBM则准备推出OpenPower服务器，仅运行Linux系统。"谁会牵你的手，走过风风雨雨"这句歌词曾经代表着千万Linuxer的心，如今，这只可爱的小企鹅终于能独挡一面，在IBM、HP、Novell、Oracle等诸多厂商的支持下，迎着风雪傲然前行。   从 Unix 到 Linux 这一段历史 为什么大家常常会说， Linux 是很稳定的一套操作系统呢？这是因为， Linux 他有个老前辈，那就是 Unix 家族啰！有这个前辈的提携，让 Linux 这个小老弟很快的就成为一套稳定而优良的操作系统啦！所以，底下我们来谈一谈 Unix 到 Linux 的这一段历史吧！早在 Linux 出现之前的二十年 ( 大约在 1970 年代 ， 就有一个相当稳定而成熟的操作系统存在了！那就是 Linux 的老大哥『 Unix 』是也！怎么这么说呢？！他们这两个家伙有什么关系呀？这里就给他说一说啰！众所皆知的， Linux 的核心是由 Linus Torvalds 在 1991 年的时候给他开发出来的，并且丢到网络上提供大家下载，后来大家觉得这个小东西 ( Linux Kernel 相当的小而精巧，所以慢慢的就有相当多的朋友投入这个小东西的研究领域里面去了！但是为什么这的东西这么棒呢？！  一个没有完成的梦想 Bell, MIT 与 GE 的『 Multics 』系统 早期的计算机并不像现在的个人计算机一般，他可不是一般人碰的到的玩意儿，除非是军事或者是高科技用途才有可能接触到这类的 Computer ！而如前面所言，有计算机硬件还需要操作系统的配合才能够发挥计算机的效能，不过，在那个年代，由于计算机算是『奢侈品』，喔～应该说是『贵重物品』，所以，可能一间学校就只有一部大型主机当然，那个年代所谓的大型主机仍然无法提供适度的运算能力的。不过，既然只有一部大型主机，然而有许许多多的教师、学生要想要来使用，怎么办呢？为了解决这个问题，在 1960 年代初期，麻省理工学院 ( MIT 发展了所谓的『兼容分时系统 ( Compatible Time-Sharing System, CTSS 』，就字面上的意义来看，他主要让大型主机可以提供多个终端机联机进入主机使用主机的资源， ( 附带一提，当时的终端机 ( Terminal 本身并没有软件或者可供使用的资源，这些终端机要能使用，一定必需要联机登入主机之后，才能够使用主机的资源来工作！) 当时可以让约 30 位使用者联机使用主机。而为了让这个分时系统更加的强大，所以，在 1965 年前后由贝尔研究室 ( Bell 、 麻省理工学院 ( MIT 及奇异电器公司 ( GE 开始来共同开发一个名为 Multics 的大型计画，目标是想让大型主机可以联机 300 位以上的使用者。不过，在奋斗了四年之后，该计画仍然宣告不治...喔！是失败啦！(注： Multics 有复杂、多数的意思。)一个小型档案系统的产生 1969 年 Ken Thompson 的小型 file server system 在复杂的 Multics 系统的计画失败后，贝尔研究室当然就退出该计画。就在这个计画解散之后，曾经参与 Muitics 的贝尔研究室的成员 Ken Thompson 由于自己工作上的需求，需要一套档案存取的小型操作系统，便在 1969 年的时候以 DEC 公司 ( Digital Equipment Corporation 的计算机 PDP-7 为硬件基准，设计了一个适合自己工作环境的小型档案系统，其中也含有他自行开发的一些小工具。那个系统就是最早期的 Unix 的源头！当初 Ken 设计这个档案系统时，主要是为了自己的存取方便所设计的简单 OS ，因此将原有的 Multics 系统大幅度的简化，不过，在当时还并没有 Unix 这个名词的出现！Unix 的正式诞生 1973 年 Ritchie 等人以 C 语言写出第一个正式 Unix 核心 由于 Thompson 写的那个操作系统实在太好用了，所以在 Bell 研究室内部广为流传，并且数度经过改版。到了 1973 年， Bell 研究室的 Dennis Ritchie 等人为了让这个系统的执行效能更佳化，所以使用编译效能更好的 C 语言将原有的 1969 年的那个系统之核心大幅度的改写过，并且确定该操作系统名称为 Unix，呵呵！那就是最早的 Unix 操作系统啰！不过，由于这个操作系统是由这一群工程师所开发完成的，而且使用者也大多是这方面的工程师，因此造成了后来 Unix 系统接口较难被一般使用者接受的情况 @_@ (注： 相对于 Multics ，Unix 具有单一的意思！)重要的 Unix 分支： 1977 年 BSD 的诞生 在 Unix 早期的发展中，有一件相当重要的事情，那就是 BSD 的诞生！由于 C 语言是一种高级语言，他可以被应用在不同的硬件架构上面，而 Unix 本身就是 C 语言写成的！在 Unix 发表之后， 柏克莱大学 ( Berkeley 的教授对于这个操作系统相当的有兴趣，在经过取得 Unix 的原始码，并且几经修改之后，终于在 1977 年发表了第一代的 Berkeley Software Distribution ( BSD 。这个 BSD 是 Unix 的一个分支，他的发展对于 Unix 有相当大的影响，例如后来的 Sun 公司就是使用 BSD 发展的核心进行自己商业的 Unix 版本的发展的！  百家齐鸣的 Unix 版本 由于 C 语言是一个相当高阶的程序语言，他与硬件没有很直接的相关性，例如你的 Windows 也可以执行 C 程序语言！而由于 Unix 是由 C 语言写成的，因此，也就是说，你只要经过稍微的原始码修改程序，就可以在不同的硬件架构上面执行这个操作系统！后来，由于 Unix 的方便性，因此很多的商业公司及学术机构就加入这个操作系统的研发啰。不过，也由于 Unix 的便利性与改写容易，因此就造成了很多的不同版本的 Unix 啰，例如 ATT 的 System V 、 加州大学的 BSD 版、 IBM 的 AIX 等等。由于『操作系统的核心 ( Kernel 必须要跟硬件配合，以提供及控制硬件的资源进行良好的工作！』，而在早期每一家生产计算机硬件的公司还没有所谓的『协议』的概念，所以每一个计算机公司出产的硬件自然就不相同啰！因此他们必须要为自己的计算机硬件开发合适的 Unix 系统，所以，他们自行开发的 Unix 当然只能配合本身的硬件配备啰！例如在学术机构相当有名的 Sun 、 Cray 与 HP 就是这一种情况，他们开发出来的 Unix 并没有办法在其它的硬件架构下工作的！ ( 我们都称呼这种系统与配备为『超级计算机』 ！由于没有厂商针对个人计算机设计 Unix 系统，因此，在早期并没有支持个人计算机的 Unix 操作系统的出现 ( 当然，这是由于早期的个人计算机并没有现在这样风行就是了！ ，每一家公司自己出的 Unix 虽然在架构上面大同小异，但是却真的仅能支持自身的硬件，所以啰，早先的 Unix 只能与服务器 ( Server 或者是大型工作站 ( Workstation 划上等号！此外，由于版本太多了，而大家都是同样来自于 Unix 这个老祖宗，当然也都称自己是 Unix。1984 年的 GNU 与 Free Software Foundation Unix 在商业上面的问题让许多对于 Unix 喜好者感到相当的忧心，其中一个就是有名的 Richard M. Stallman 先生。他认为， Unix 是一个相当好的操作系统，在这个系统上面，如果大家能够将自己所学的贡献出来，那么这个系统将会更加的优异！Stallman 先生认为最大的快乐就是让自己发展的良好的软件让大家来使用了！而且，由于每个人的工作环境 ( 指软硬件平台 可能都不太相同，所以，他也强调应该要有 Open Source 的概念，让大家都能够分享这一份的心得！他认为，有了 Open Source 之后，你的程序将有很多的人可以帮忙检验，将使得 Unix 社群更佳的茁壮。为了自己的理想， Stallman 在 1984 年实际创立了 GNU 与 自由软件基金会 ( Free Software Foundation, FSF ，并创作了许多『自由软件』供大众来使用，此外，对于其作品以自由 ( free 的 GNU General Public License ( GPL 的授权模式提供大众使用。这个 FSF 的核心观念是『版权制度是促进社会进步的手段，版权本身不是自然权力。』对于 FSF 有兴趣或者对于 GNU 想要更深入的了解时，请参考朝阳大学的洪朝贵教授的网站，里面有更为深入的解说！而且，Stallman 的 GNU General Public License 一直强调 Free 这个字眼！他是这样说的：『"Free software" is a matter of liberty, not price. To understand the concept, you should thik of "free speech", not "free beer". "Free software" refers to the users freedom to run, copy, distribute, study, change, and improve the software』大意是说，自由软件并不是指『免费』的，而是指具有『自由度, freedom』的软件，什么是自由度呢？也就是你在取得这个软件之后，可以进行修改、进一步发表与复制在不同的计算机平台上面。这无疑是个好消息！因为如此一来，你所拿到的软件可能原先只能在 Unix 上面跑，但是经过原始码的修改之后，你将可以拿他在 Linux 或者是 Windows 上面来跑！Stallman 先生更直接对自由度下了这样的说明： 你可以根据任何你想要的提议 ( purpose 来跑这个 Free 的程序； 你可以在理解了这支 Free 的程序的运作之后，将他修改成你所想要的样式与功能；你可以将你自己修改过的 Free 的程序再次的发表，以帮助你的朋友们； 你可以将这支 Free 的程序进行改良，并将改良过的程序公开发表，以造福社群！ 简单的来说， GPL 授权具有几个特点：任何软件挂上 GPL 授权之后，即为自由的软件，任何人均可取得，同时，亦可取得其原始码 ( Source Code ； 取得 GPL 授权之软件后，任何人均可进行修改原始码，以符合自己的喜好；除此之外，经过修改的 Source Code 应回报给网络社会，提供大家来参考！ 但请特别留意，并非挂上 GPL 之后的软件就不可贩卖，这个是不同的两回事呦！举个例子来说，在 Red Hat 的官方网站上面提供 Red Hat 释出的 Linux 安装光盘提供大众下载，但是 Red Hat 本身依然有在卖 Linux 的套件，而且还卖的『很不便宜！』为何可以如此呢？呵呵！因为 Red Hat 他们卖的资料当中，含有相当大量经过整了的文件资料，这些资料虽然在网络上面可以下载，然而花了这么多的时间来整理这些资料，当然应该要给予相当程度的报酬啰！您说是吧！所以，请留意喔！并非 GPL 不可用来营利！这个 GNU 对于后来的 Linux 有相当深远的影响，由于 Stallman 先生发展了 GNU 这个计画中，主力在推出各种方便而优异的工具软件，例如广为大家所知的 Emacs 文书编辑器、GCC, BASH..然而没有作业平台怎么使用这些软件呢？然而，由于他倡导的自由软件，让后来的心血能很快的接触原始码来发展软件，这就是后来的 Linux 的故事 1988 年的图形接口 X-Free86 project 有鉴于图形使用者接口 ( Graphical User Interface, GUI 的需求日益加重，在 1984 年由 MIT 与其它协力厂商首次发表了 X Window System ，并且更在 1988 年成立了非营利性质的 XFree86 这个组织。所谓的 XFree86 其实是 X window system 与 Free 及 x86 系统架构的整合名称呢！而这个 XFree86 的 GUI 接口更在 Linux 的核心 1.0 版于 1994 年释出时，整合于 Linux 操作系统当中！1991 年 芬兰大学生 Linus Torvalds 的一则简讯 在后来的几年内，由于计算机硬件工业的强力运作，以 intel 主导的 x86 系统架构的个人计算机大行其道，所以个人计算机算是相当流行的一个机器了！但在此时，人们使用的大多还是旧旧而且需要吃很多系统资源的 DOS 系列或其它的操作系统。 此时，有个芬兰的郝尔辛基大学 (Helsinki Linus Torvalds 学生做了件不寻常的事情！ Linus 手边有个 Minix 系统 ( 这也是 Unix 的分支 ，他对这个操作系统相当的有兴趣！此外，由于当时他正好买了一部 386 的计算机，所以他就想说，咦！这个 Unix 这么棒！这么稳定，那我可不可以将他移植到个人计算机 ( X86 架构 来使用呢？！好在由于 Stallman 提倡的 Open Source 风气，他得以接触到一些 source code ，而就经由这样的一个想法，呵呵！他就很有心的读取 Unix 的核心，并且去除较为繁复的核心程序，将他改写成可以适用于一般个人计算机的 x86 系统上面，到了 1991 年，他终于将 0.02 版的 hobby 放到网络上面供大家下载，并且由于 hobby 受到大家的肯定，相当多的朋友一起投入这个工作中！终于到了 1994 年将第一个完整的核心 Version 1.0 释出！并且造成目前的大流行.....由于 Linux kernel 的发展是由『虚拟团队』所达成的，大家都是透过网络取得 Linux 的核心原始码，经由自己精心改造后再回传给 Linux 社群，进而一步一步的发展完成完整的 Linux 系统，至于 Torvalds 先生是这个集团中的发起者。由于这个群策群力的缘故， Torvalds 先生将 Linux 定为同样造福大家的 GNU 授权模式！ 企鹅的来源 1994年发表 Linux 正式核心 1.0 的时候，大家要 Linus Torvalds 想一只吉祥物，怪怪的 Torvalds 突然想到小时候去动物园被一只企鹅追着满地打滚～还被咬了一口！既然想不到其它的吉祥物了，干脆就以这支企鹅来当吉祥物算了！所以，目前我们常常看到这一只企鹅就是这么来的！ 什么是 distribution 好了，经由上面的说明，我们知道 Linux 是个『操作系统』，而且他是 GNU 的授权模式，并且有个老大哥是 Unix 。不过，毕竟由 Torvalds 先生负责维护的 Linux 提供的仅是『核心』与『核心工具』的集合，对于需要更完整功能的操作系统来说，毕竟还不够完备，例如如果你要桌面程序，还得要加入 X-Window 系统对吧！？如果你要架设 WWW 还得加入服务器软件对吧？所以，虽然 Linux 的核心已经提供了相当多的支持与工具程序，但毕竟还不足以构成一个很完整的操作系统。好在，由于 Linux 的稳定性良好，并且可以在便宜的 x86 架构下的计算机平台运作，所以吸引了很多的套件商与自由软件的开发团队在这个 Linux 的核心上面开发相关的软件，例如有名的 sendmail, wu-ftp, apache 等等。此外，亦有一些商业公司发现这个商机，因此，这些商业公司或者是非营利性的工作团队，便将 Linux 核心、核心工具与相关的软件集合起来，并加入自己公司或团队的创意的系统管理模块与工具，而释出一套可以完整安装的操作系统，这个完整的 Linux 操作系统，我们就称呼他为 distribution，或者是中文所谓的『安装套件』啰！当然啰，由于是基于 GNU 的架构下，因此各家公司所发行的光盘套件是可以在网络上面自由下载的。不过，如果想要有较佳的服务，《个人认为》购买该公司发行的光盘！不过，由于发展的 Linux 公司实在太多了，例如有名的 Red Hat, OpenLinux, Mandrake, Debian, SuSE 等等，所以很多人都很担心，如此一来每个 distribution 是否都不相同呢？这就不需要担心了，由于各个 distribution 都是架构在 Linux Kernel 下来发展属于自己公司风格的 distribution，因此大家都遵守 Linux Standard Base ( LSB 的规范，也就是说，各个 distribution 其实都是差不多的！反正用到的都是 Linux Kernel 啊！只是各个 distribution 里面所使用的各套件可能并不完全相同而已。所以啰，大家可以按照自己的喜好来选择 Linux 的 distribution 光盘啰！底下列出几个主要的 Linux 发行者网址： Red Hat: http://www.redhat.com Mandrake: http://www.linux-mandrake.com/en/ Slackware: http://www.slackware.com/ SuSE: http://www.suse.com/index_us.html OpenLinux: http://www.caldera.com/ Debian: http://www.debian.org/ Linpus: http://www.linpus.com.tw/  UniteLinux:http://www.sco.com/unitedlinux/  当然发行套件者不仅于此，您可以查阅其它的 Linux 新闻来发现喔！而其中中文化较为有名的就属 CLE 这个套件发行者了！有兴趣的话也可以到底下的网页上看看！   CLE：http://cle.linux.org.tw/  好了，那么哪一个安装套件比较好呢？！就如同 VBird 前面提到的，每一个发行者所使用的 Linux 核心其实是一样的，都是由 www.kernel.org 开发出来的核心呀！所以其架构，甚至包括其档案放置的目录，都是大同小异的，基本上除了某些内容套件不太一样之外 ( 例如有人使用 wu-ftpd 有人使用 proftpd 等等 ，其它的档案架构与指令系统其实几乎都是相同的，因此我们不去探讨哪一个套件比较棒！而是要来介绍如何学习与使用一个套件！至于下载的地点，网友提供了一个相当棒的多种 Linux distributions 的下载网站： www.linuxiso.org   

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

Linux shell 内部变量
1 TMOUT
来自bash的解释: 
If set to a value greater than zero, TMOUT is treated as  the 
              default  timeout  for  the  read builtin.  The select command 
              terminates if input does not arrive after TMOUT seconds  when 
              input  is  coming  from a terminal.  In an interactive shell, 
              the value is interpreted as the number of seconds to wait for 
              input  after  issuing  the  primary  prompt.  Bash terminates 
              after waiting for that number of seconds if  input  does  not 
              arrive. 
 
可以了解TMOUT可以很好的read命令结合,在用户长时间没有输入时,可以通过TMOUT指定的时间来结束read的执行. 
实例:
#!/bin/bash

TMOUT=4

echo -e "plesae input your name:"

read name

if [ -z $name ]
then
    name="(no name provide)"
fi

echo "Your name is : $name"


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

【Linux】-利用scp命令远程上传下载文件
1）从服务器下载文件 
scp username@servername:remote_file_path    local_file_path 
2）上传本地文件到服务器 
scp local_file_path  username@servername:remote_file_path  
3）从服务器下载整个目录 
scp -r username@servername:remote_dir/    local_dir 
4）上传目录到服务器 
scp  -r  local_dir username@servername:remote_dir

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

配置虚拟域名
开启apache的mod_rewrite功能模块




引入http-vhosts.conf文件



添加VirtualHost配置







配置hosts文件




重启apache
新建php文件


访问www.phpexcel.com/index.php







版权声明：本文为博主原创文章，未经博主允许不得转载。

realtek high definition audio声卡耳机无声
某天看视频想带耳机，发现插上耳机后电脑依然外放，本人用的是dell realtek high definition audio驱动，下面是解决方案：






然后就嗨起来吧！

版权声明：本文为博主原创文章，未经博主允许不得转载。

centos7无线网络连接
1.查看无线设备
iw dev
找到Interface
2.开启Interface
ifconfig wlp9s0 up
3.扫描可连接的无线网络
iw wlp9s0 scan|grep SSID

4.连接无线网络
wpa_supplicant -B -i wlp9s0 -c <(wpa_passphrase "SSID" "PASSWORD")
5.使用dhclient分配ip地址
dhclient wlp9s0
6.ping 8.8.8.8成功


版权声明：本文为博主原创文章，未经博主允许不得转载。

惠普superdome2 小机故障灯清除方式
消除黄色告警，先登录telnet/ssh到oa（oa地址和MP卡地址一样）然后：
用户密码Admin/Admin   #Admin非默认密码
步骤一、Show hr
步骤二、Show indict
然后结果会显示有告警的部件位置，其中的部件位置如下：   
    0x0100FFFFFFFFFF61
    0x0100FF01FF00FF51
    0x0100FF02FF00FF51
    0x0100FF03FF00FF51
    0x0100FF04FF00FF51
    0x0900FFFFFFFFFF61
    0x0A00FFFFFFFFFF61
步骤三、清楚相应位置部件的黄色告警，用命令acquit
Acquit 0x0100FFFFFFFFFF61
Acquit 0x0100FF01FF00FF51
Acquit 0x0100FF02FF00FF51
Acquit 0x0100FF03FF00FF51
Acquit 0x0100FF04FF00FF51
Acquit 0x0900FFFFFFFFFF61
Acquit 0x0A00FFFFFFFFFF61
 
最后再执行一下show indict看有没有条目假如没有的话就没问题了。
 
刀片上红色告警的清楚方法：
先登录telnet/ssh到oa（oa地址和MP卡地址一样），需要用Administrator用户，密码标记在superdome服务器后面靠着交换机模块下面的然标签上。

步骤一、执行diag命令，登录。
         OA> ++diag--
          Lockword is: xxxxxxxx
          Enter Password:
          
          Contact HP 800 hotline for lockword password  #联系惠普800或者400获得lockword密码，每重新登陆一次账户都会变化，所以密码也要重新获得
步骤二、登录成功后，执行重置刀片操作        
          diag> reset_ilo 7     #数字对应要重置的刀片
          diag> exit
 

版权声明：本文为博主原创文章，未经博主允许不得转载。

初步进入linux世界
第四章 初步进入linux世界【Linux 系统启动过程】Linux的启动其实和windows的启动过程很类似，不过windows我们是无法看到启动信息的，而linux启动时我们会看到许多启动信息，例如某个服务是否启动。Linux系统的启动过程大体上可分为五部分：内核的引导；运行init；系统初始化；建立终端 ；用户登录系统。A 内核引导当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。紧接着由启动设备上的grub程序开始引导linux，当引导程序成功完成引导任务后，Linux从它们手中接管了CPU的控制权，然后CPU就开始执行Linux的核心映象代码，开始了Linux启动过程。也就是所谓的内核引导开始了，在内核引导过程中其实是很复杂的，我们就当它是一个黑匣子，反正是linux内核做了一些列工作，最后内核调用加载了init程序，至此内核引导的工作就完成了。交给了下一个主角init。B 运行initinit 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。init 程序首先是需要读取配置文件 /etc/inittab。inittab是一个不可执行的文本文件，它有若干行指令所组成。具体内容如下：（你可以在你的linux上执行命令 cat /etc/inittab 这样获得）　　# inittab       This file describes how the INIT process should set up　　#               the system in a certain run-level.　　#　　# Author:       Miquel van Smoorenburg,　　#               Modified for RHS Linux by Marc Ewing and Donnie Barnes　　#　　# Default runlevel. The runlevels used by RHS are:　　#   0 - halt (Do NOT set initdefault to this)　　#   1 - Single user mode　　#   2 - Multiuser, without NFS (The same as 3, if you do not havenetworking)　　#   3 - Full multiuser mode　　#   4 - unused　　#   5 - X11　　#   6 - reboot (Do NOT set initdefault to this)　　#　　###表示当前缺省运行级别为5(initdefault)；　　id:5:initdefault:　　###启动时自动执行/etc/rc.d/rc.sysinit脚本(sysinit)　　# System initialization.　　si::sysinit:/etc/rc.d/rc.sysinit　　l0:0:wait:/etc/rc.d/rc 0　　l1:1:wait:/etc/rc.d/rc 1　　l2:2:wait:/etc/rc.d/rc 2　　l3:3:wait:/etc/rc.d/rc 3　　l4:4:wait:/etc/rc.d/rc 4　　###当运行级别为5时，以5为参数运行/etc/rc.d/rc脚本，init将等待其返回(wait)　　l5:5:wait:/etc/rc.d/rc 5　　l6:6:wait:/etc/rc.d/rc 6　　###在启动过程中允许按CTRL-ALT-DELETE重启系统　　# Trap CTRL-ALT-DELETE　　ca::ctrlaltdel:/sbin/shutdown -t3 -r now　　# When our UPS tells us power has failed, assume we have a few minutes　　# of power left.  Schedule a shutdown for 2 minutes from now.　　# This does, of course, assume you have powerd installed and your　　# UPS connected and working correctly.　　pf::powerfail:/sbin/shutdown -f -h +2 "Power Failure; System Shutting Down"　　# If power was restored before the shutdown kicked in, cancel it.　　pr:12345:powerokwait:/sbin/shutdown -c "Power Restored; Shutdown Cancelled"　　###在2、3、4、5级别上以ttyX为参数执行/sbin/mingetty程序，打开ttyX终端用于用户登录，　　###如果进程退出则再次运行mingetty程序(respawn)　　# Run gettys in standard runlevels　　1:2345:respawn:/sbin/mingetty tty1　　2:2345:respawn:/sbin/mingetty tty2　　3:2345:respawn:/sbin/mingetty tty3　　4:2345:respawn:/sbin/mingetty tty4　　5:2345:respawn:/sbin/mingetty tty5　　6:2345:respawn:/sbin/mingetty tty6　　###在5级别上运行xdm程序，提供xdm图形方式登录界面，并在退出时重新执行(respawn)　　# Run xdm in runlevel 5　　x:5:respawn:/etc/X11/prefdm -nodaemon以上面的inittab文件为例，来说明一下inittab的格式。其中以#开始的行是注释行，除了注释行之外，每一行都有以下格式： 　　id:runlevel:action:process　　对上面各项的详细解释如下：1. id　　id是指入口标识符，它是一个字符串，对于getty或mingetty等其他login程序项，要求id与tty的编号相同，否则getty程序将不能正常工作。2. Runlevelrunlevel是init所处于的运行级别的标识，一般使用0－6以及S或s。0、1、6运行级别被系统保留：其中0作为shutdown动作，1作为重启至单用户模式，6为重启；S和s意义相同，表示单用户模式，且无需inittab文件，因此也不在inittab中出现，实际上，进入单用户模式时，init直接在控制台（/dev/console）上运行/sbin/sulogin。在一般的系统实现中，都使用了2、3、4、5几个级别，在CentOS系统中，2表示无NFS支持的多用户模式，3表示完全多用户模式（也是最常用的级别），4保留给用户自定义，5表示XDM图形登录方式。7－9级别也是可以使用的，传统的Unix系统没有定义这几个级别。runlevel可以是并列的多个值，以匹配多个运行级别，对大多数action来说，仅当runlevel与当前运行级别匹配成功才会执行。3. action　　action是描述其后的process的运行方式的。action可取的值包括：initdefault、sysinit、boot、bootwait等：　initdefault是一个特殊的action值，用于标识缺省的启动级别；当init由核心激活以后，它将读取inittab中的initdefault项，取得其中的runlevel，并作为当前的运行级别。如果没有inittab文件，或者其中没有initdefault项，init将在控制台上请求输入runlevel。　　sysinit、boot、bootwait等action将在系统启动时无条件运行，而忽略其中的runlevel。其余的action（不含initdefault）都与某个runlevel相关。各个action的定义在inittab的man手册中有详细的描述。4. process　　process为具体的执行程序。程序后面可以带参数。 Tips: 如果你看不懂这个文件，没有关系，随着你对linux的深入了解，你再回过头看这个文件你就会豁然开朗的。但是你现在必须要明白runlevel的各个级别的含义。C 系统初始化在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit　它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。rc.sysinit约有850多行，但是每个单一的功能还是比较简单，而且带有注释，建议有兴趣的用户可以自行阅读自己机器上的该文件，以了解系统初始化所详细情况。由于此文件较长，所以不在本文中列出来，也不做具体的介绍。当rc.sysinit程序执行完毕后，将返回init继续下一步。通常接下来会执行到/etc/rc.d/rc程序。以运行级别3为例，init将执行配置文件inittab中的以下这行：　　l5:5:wait:/etc/rc.d/rc 5　这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。/etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件，对于以以S开头的启动脚本，将以start参数来运行。而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的"System Services"来自行设定。D 建立终端rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：　　1:2345:respawn:/sbin/mingetty tty1　　2:2345:respawn:/sbin/mingetty tty2　　3:2345:respawn:/sbin/mingetty tty3　　4:2345:respawn:/sbin/mingetty tty4　　5:2345:respawn:/sbin/mingetty tty5　　6:2345:respawn:/sbin/mingetty tty6　　从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。E 用户登录系统对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入KDE、Gnome等窗口管理器。而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。Linux的账号验证程序是login，login会接收mingetty传来的用户名作为用户名参数。然后login会对用户名进行分析：如果用户名不是root，且存在/etc/nologin文件，login将输出nologin文件的内容，然后退出。这通常用来系统维护时防止非root用户登录。只有/etc/securetty中登记了的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录。/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。在分析完用户名后，login将搜索/etc/passwd以及/etc/shadow来验证密码以及设置账户的其它信息，比如：主目录是什么、使用何种shell。如果没有指定主目录，将默认为根目录；如果没有指定shell，将默认为/bin/bash。login程序成功后，会向对应的终端在输出最近一次登录的信息(在/var/log/lastlog中有记录)，并检查用户是否有新邮件(在/usr/spool/mail/的对应用户名目录下)。然后开始设置各种环境变量：对于bash来说，系统首先寻找/etc/profile脚本文件，并执行它；然后如果用户的主目录中存在.bash_profile文件，就执行它，在这些文件中又可能调用了其它配置文件，所有的配置文件执行后后，各种环境变量也设好了，这时会出现大家熟悉的命令行提示符，到此整个启动过程就结束了。 【图形模式与文字模式的切换方式】Linux预设提供了六个命令窗口终端机让我们来登录。默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口。 【学会使用快捷键】Ctrl + C：这个是用来终止当前命令的快捷键，当然你也可以输入一大串字符，不想让它运行直接Ctrl + C，光标就会跳入下一行。 Tab： 这个键是最有用的键了，也是笔者敲击概率最高的一个键。因为当你打一个命令打一半时，它会帮你补全的。不光是命令，当你打一个目录时，同样可以补全，不信你试试。 Ctrl + D： 退出当前终端，同样你也可以输入exit。Ctrl + Z： 暂停当前进程，比如你正运行一个命令，突然觉得有点问题想暂停一下，就可以使用这个快捷键。暂停后，可以使用fg 恢复它。Ctrl + L： 清屏，使光标移动到第一行。 【学会查询帮助文档 — man】这个man 通常是用来看一个命令的帮助文档的。例如：输入 man ls 其实格式为 man + 命令你就会看到相关的帮助文档了。从命令的介绍到命令的参数以及用法介绍的都非常详细的。不错吧。 【Linux系统目录结构】登录系统后，在当前命令窗口下输入 ls / 你会看到以下是对这些目录的解释：/bin bin是Binary的缩写。这个目录存放着最经常使用的命令。 /boot这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev dev是Device(设备)的缩写。该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 /etc这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。/lib这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。/mnt系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。/opt 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。/proc这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器： echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all。 /root该目录为系统管理员，也称作超级权限者的用户主目录。/sbin s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 /selinux 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。/srv 该目录存放一些服务启动之后需要提取的数据。/sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs ，sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。/tmp这个目录是用来存放一些临时文件的。 /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。/usr/bin：系统用户使用的应用程序。/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。/usr/src：内核源代码默认的放置目录。/var这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。 【如何正确关机】其实，在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。linux和windows不同，在 Linux 底下，由于每个程序（或者说是服务）都是在在背景下执行的，因此，在你看不到的屏幕背后其实可能有相当多人同时在你的主机上面工作，例如浏览网页啦、传送信件啦以 FTP 传送档案啦等等的，如果你直接按下电源开关来关机时，则其它人的数据可能就此中断！那可就伤脑筋了！此外，最大的问题是，若不正常关机，则可能造成文件系统的毁损（因为来不及将数据回写到档案中，所以有些服务的档案会有问题！）。如果你要关机，必须要保证当前系统中没有其他用户在线。可以下达 who 这个指令，而如果要看网络的联机状态，可以下达 netstat -a 这个指令，而要看背景执行的程序可以执行 ps -aux 这个指令。使用这些指令可以让你稍微了解主机目前的使用状态！（这些命令在以后的章节中会提及，现在只要了解即可！）正确的关机流程为：sysnc ? shutdown ? reboot ? haltsync 将数据由内存同步到硬盘中。shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。Shutdown –h now 立马关机Shutdown –h 20:25 系统会在今天20:25关机Shutdown –h +10 十分钟后关机Shutdown –r now 系统立马重启Shutdown –r +10 系统十分钟后重启reboot 就是重启，等同于 shutdown –r now halt 关闭系统，等同于shutdown –h now 和 poweroff  最后总结一下，不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中。关机的命令有 shutdown –h now halt poweroff 和 init 0 , 重启系统的命令有 shutdown –r now reboot init 6. 【忘记root密码如何做】以前笔者忘记windows的管理员密码，由于不会用光盘清除密码最后只能重新安装系统。现在想想那是多么愚笨的一件事情。同样linux系统你也会遇到忘记root密码的情况，如果遇到这样的情况怎么办呢？重新安装系统吗？当然不用！进入单用户模式更改一下root密码即可。如何进入呢。1 重启linux系统3 秒之内要按一下回车，出现如下界面然后输入e在 第二行最后边输入 single，有一个空格。具体方法为按向下尖头移动到第二行，按“e”进入编辑模式在后边加上single 回车最后按“b”启动，启动后就进入了单用户模式了此时已经进入到单用户模式了，你可以更改root密码了。更密码的命令为 passwd 【使用系统安装光盘的救援模式】救援模式即rescue ，这个模式主要是应用于，系统无法进入的情况。如，grub损坏或者某一个配置文件修改出错。如何使用rescue模式呢？光盘启动，按F5 进入rescue模式输入linux rescue 回车选择语言，笔者建议你选择英语选择us 键盘这里问你是否启动网络，有时候可能会联网调试。我们选no这里告诉我们，接下来会把系统挂载在/mnt/sysimage 中。其中有三个选项，Continue 就是挂载后继续下一步； Read-Only 挂载成只读，这样更安全，有时文件系统损坏时，只读模式会防止文件系统近一步损坏；Skip就是不挂载，进入一个命令窗口模式。这里我们选择Continue。至此，系统已经挂载到了/mnt/sysimage中。接下来回车，输入chroot /mnt/sysimage 进入管理员环境。Tips： 其实也可以到rescue模式下更改root的密码的。这个rescue模式和windows PE系统很相近。当运行了chroot /mnt/sysimage/ 后，再ls 看到目录结构和原来系统中的目录结构是一样的。没错！现在的环境和原来系统的环境是一模一样的。你可以输入exit 或者按Ctrl + D退出这个环境。然后你再ls 看一下这个目录其实就是rescue模式下的目录结构，而我们的系统文件全部在 /mnt/sysimage目录下。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

基于虚拟linux+docker搭建hadoop完全分布式集群
本文假设用户基本了解docker,掌握linux的基本使用命令，了解hadoop的常规安装及简单配置
实验环境：windows10+Vmware
 WorkStation 11+Linux.14.04 server+docker 1.7
windows 10作为实体机操作系统，网段为：10.41.0.0/24，虚拟机使用NAT网络，子网为192.168.92.0/24，网关为192.168.92.2，linux
 14.04为虚拟系统，充当容器的宿主机，IP为192.168.92.129。本文将基于以上环境在linux系统中搭建一个hadoop完全分布式集群，节点组成为master+slave1+slave2
一、虚拟系统安装
windows10上安装vmware
 workstation，并创建一个linux虚拟机，根据机器的性能分配磁盘空间、CPU和内存，网络类型为NAT(根据实际网络环境选择，此处网络上教程丰富，不再赘述)，安装linux时选择安装类型为SSH服务器。
安装完Linux虚拟系统后，在vmware workstation的网络编辑器中可看到虚拟机分配的子网为192.168.92.0/24@192.168.92.2，在虚拟机终端执行ifconfig可看到linux自动获取到的IP为192.168.92.129编辑/etc/network/interfaces文件，配置静态IP地址：


执行命令使网络配置生效：

sudo /etc/init.d/networking restart #有时候该命令没什么效果，重启一下吧

使用linux远程管理工具（如xshell、putty）登录linux系统



二、安装docker
参考该链接安装docker: http://dockerpool.com/static/books/docker_practice/install/ubuntu.html

三、获取镜像
从docker仓库下载ubuntu14.04的镜像（文件不大，不到200MB）

sudo docker pull ubuntu:14.04 #下载镜像
sudo docker images #查看本地仓库中的镜像


最下面的14.04是下载的镜像，其他均为在此镜像基础上commit得到的新镜像



四、定制容器
执行如下命令创建并启动一个容器：

sudo docker run -ti ubuntu:14.04

此时会切换到容器的临时终端，默认直接进入root用户环境，接着做如下工作：

1、修改安装源，因为docker pull得到的镜像使用的是国外的安装源，在使用该安装源下执行apt-get install 操作时下载阶段会特别慢甚至下载不成功，建议替换成国内的源，如cn99、网易等，也可参考宿主机的源配置（它访问的是ubuntu部署在国内的服务器），找到新源后替换 /etc/apt/sources.list 文件即可。
2、安装ssh

sudo apt-get update
sudo apt-get install openssh-server

3、配置ssh免密登录

在用户目录下创建.ssh文件夹，执行命令：

ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

接着修改ssh的配置文件（/etc/ssh/sshd_config），将PermitRootLogin without-password 改成PermitRootLogin yes，之后修改root密码。
如果不想允许root直接登录，则需要自己创建一个用户，所有操作都在该用户环境下进行。
4、下载安装JDK

sudo apt-get install oracle-java8-installer #也可使用wget直接从oracle官网下载

下载后配置JDK环境变量，执行java、javac命令进行测试。

5、配置hosts
按照上文实验环境的描述，hadoop集群由一个master节点和两个slave节点组成，需要在hosts文件中添加IP到主机名的映射，执行ifconfig命令可以看到docker给容器分配的eth0网卡的IP为172.17.0.x网段（不同的环境该私有IP段可能不同），且重启容器后该IP会变动，而hadoop集群最好配置静态的地址，在后续步骤中，将会用到一个工具给容器虚拟一个新的网卡，同时分配一个固定的地址，该地址和docker服务在宿主机中创建的网桥docker0的地址为同一网段。

重新开启一个远程管理终端程序登录linux宿主机，执行ifconfig命令可以到docker0网桥的IP（本文的实验环境为172.17.42.1），且每次重启系统，该IP均不变化，因而可以在该网段给容器分配IP，这里做如下分配：

172.17.42.2 master
172.17.42.3 slave1
172.17.42.4 slave2

需要注意的是，容器在启动后会初始化hosts文件，且会自行添加一条eth0网卡地址到主机名的映射，这会导致hadoop集群启动后监听的网卡为eth0，所以需要重新生成该文件，这里提供一个简单的脚本做这项工作：

#!/bin/bash
echo "#ip and hostname information" > /etc/hosts
echo "127.0.0.1 localhost" >> /etc/hosts
echo "172.17.42.2 master" >> /etc/hosts
echo "172.17.42.3 slave1" >> /etc/hosts
echo "172.17.42.4 slave2" >> /etc/hosts

将脚本添加到开机启动即可。


6、下载配置hadoop
使用wget下载hadoop2.6（可根据实际情况选择想要安装的版本）：

wget http://mirrors.sonic.net/apache/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz

将压缩包解压到某个目录，然后编辑hadoop-2.6.0/etc/hadoop目录下的配置文件，修改相应配置。



五、保存镜像
执行exit命令退出容器终端，然后执行命令保存对容器的更改到一个新的镜像：

sudo docker commit -m "description information about the images" <容器ID> ubuntu:hadoop

六、创建并启动新容器

执行命令创建并启动新的hadoop集群容器：

sudo docker run -d -h master --name=hadoop_master ubuntu:hadoop /usr/sbin/sshd -D #启动hadoop主节点
sudo docker run -d -h slave1 --name=hadoop_slave1 ubuntu:hadoop /usr/sbin/sshd -D #启动hadoop从节点
sudo docker run -d -h slave2 --name=hadoop_slave2 ubuntu:hadoop /usr/sbin/sshd -D #启动hadoop从节点
sudo docker ps -a #查看所有创建的容器





七、安装pipework工具并创建虚拟网卡
1、从gitub上下载一个名叫pipework的工具，地址为：https://github.com/jpetazzo/pipework
该工具主要是给容器虚拟一张新的网卡，给网卡配置静态地址，同时把新网卡和docker在宿主机中创建的网桥桥接起来，使得容器和宿主机能通过该网卡互通。
下载并解压该工具，然后拷贝解压目录下的pipework文件至/usr/local/bin目录，至此，工具安装完毕。
2、创建虚拟网卡
执行如下命令给三个容器创建指定地址的虚拟网卡：

sudo pipework docker0 hadoop_master 172.17.42.2/24@172.17.42.1
sudo pipework docker0 hadoop_slave1 172.17.42.3/24@172.17.42.1
sudo pipework docker0 hadoop_slave2 172.17.42.4/24@172.17.42.1

该命令参数为：<网桥名称> <容器名称> <新网卡地址/网络号@网关地址>，网关就是网桥的地址，默认创建的网卡名称为eth1，可通过<-i name>参数指定网卡名称。执行该命令时可能会有警告信息，目前没发现有什么影响。


八、访问测试
在宿主机中ping容器的新网卡地址，发现三个节点均测试通过，在宿主机中使用ssh命令也可正确登录容器。




九、启动hadoop集群
登录容器的master节点后，执行命令格式化namenode节点，然后启动集群：

bin/hadoop namenode -format
sbin/start-dfs.sh && sbin/start-yarn.sh

结果如下：




至此，已经可以从宿主机访问容器了，但是宿主机是没有桌面环境，只能通过实体机在浏览器中访问集群提供的web UI，但现在实体机无法ping通容器地址，也无法访问容器，原因在于，宿主机是实体机的子网，容器是宿主机的子网，而实体机不知道容器所在子网的存在，所以需要在实体机中添加一条从实体机到容器子网的路由。
用管理员模式运行cmd，执行如下命令：

route add -p 172.17.42.0 mask 255.255.255.0 192.168.92.129

三个地址分别为：<目的子网地址> <掩码地址> <网关/宿主机地址>，之后，在实体机中可以正常ping通容器，web控制台也能正常打开了。




说明：docker容器每次重启后，pipework工具创建的虚拟网卡会消失，需要重新分配，可写个脚本管理之。

版权声明：本文为博主原创文章，未经博主允许不得转载。

Linux操作系统的安装
第三章 Linux操作系统的安装因为笔者一直都是使用CentOS，所以这次安装系统也是基于CentOS的安装。把光盘插入光驱，设置bios光驱启动。进入光盘的欢迎界面。其中有两个选项，可以直接按回车，也可以在当前界面下输入 linux text 按回车。前者是图形下安装，可以动鼠标的，后者是纯文字形式的。建议初学者用前者安装。直接回车后，出现一下界面：<img src="http://www.92csz.com/study/linux/images/3_27.png" border="0" "alt="[image]">这一步是要提示你是否要校验光盘，目的是看看光盘中的安装包是否完整或者是否被人改动过，一般情况下，如果是正规的光盘不需要做这一步操作，因为太费时间。接下来是：这一步没有什么可说明的，直接点“Next”这里是选择安装系统时所用语言，笔者习惯用English，当然你也可以选择Chinese(Simplified)（简体中文），选择好后点“Next”这里是选择合适的键盘，我们平时使用的都是英文键盘，所以这里不用动，默认即可，直接“Next”到这里就会提示你，下面会分区，会初始化磁盘，磁盘上的数据会丢失，问你是否要初始化设备并清除磁盘上的数据。因为是空盘，所以选择“Yes” 到这一步，就该分区了。其中一共有四种方式可以供你选择 第一种，在所选磁盘上把所有分区移除，然后按照默认的方式分区；第二种，在所选磁盘上把所有linux分区移除（如果磁盘上有windows格式的分区，并不会移除），然后按照默认方式分区；第三种，在所选磁盘上只使用空闲部分，并且按照默认方式分区；第四种，用户自定义。这里我们选第四种。然后“Next”  接下来该分区了，分区的很灵活，但大体上按照这个规则来（这是服务器上这样分，如果你是虚拟机，请看后边部分）：/boot 分区 100MSwap 分区 内存的2倍，如果大于等于4G，则只需给4G即可  / 分区给20G   剩余空间给/data 说明：/boot 分区是系统启动所需要的文件，就跟windows的C盘中的windows 目录类似，这个分区中的文件并不大，只需要100M足够。Swap分区是交换分区，当内存不够时，系统会把这部分空间当内存使用。/ 分区，其实就是一个根目录，在以后的章节中会介绍到。现在不懂并没有关系，只要知道有这么一个东西即可。/data 这个分区是我们自定义的，就是专门放数据的分区。如果你安装的是虚拟机，并且你只有8G的磁盘空间，那么我建议你这样分区：1  /boot  100M2  swap 内存的2倍3  /  全部剩余空间分区完后，点“Next”可以在Use a boot loader password 前面打勾，这个选项的作用是，给boot loader 加一个密码，为了防止有人通过光盘进入单用户模式修改root密码。下面的选项同样可以打勾，笔者从来没有用过该功能，如果你有兴趣，可以研究一下。然后下一步这一步是配置网卡信息，可以现在自定义网卡的IP，和配置主机名，默认是通过DHCP获得，你也可以点manually 自定义一个主机名，如 mail.example.com 。如果这两种方式都没有配置，那么linux会给你配置一个万能的主机名，即localhost.localdomain 剩下的几个就不用配置了，默认留空。接着下一步，选择时区，在这里当然要选择我们所处的时区Asia/Chongqing 如果没有Chongqing那就选择Asia/Shanghai。继续下一步在这里自己定义一个root的密码，继续下一步  这里要我们选择要安装的包，笔者习惯自定义安装，需要点下面的“customize now”然后下一步“Desktop Environments” 看右侧，把GNOME 前面的勾去掉，这个其实就是图形界面的安装包，如果不去掉这个勾，就会安装图形界面。“Applications” 除了Editors 前面的勾去掉外，其他均不要“Development”全部都要勾上“Servers”以及以下所有项都不要勾任何，然后下一步点Next 后，系统就开始安装了。等过会后，会出现至此，linux系统已经安装完成了。接下来点“Reboot”重启一下，进入linux系统看看吧。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

OpensGalaxy
亲爱的网友们，我新建了自己的个人站点，将来将更多的内容更新到此站点，欢迎大家访问，谢谢！

开放的银河系
http://opensgalaxy.com

版权声明：本文为博主原创文章，未经博主允许不得转载。

django form
django form
1. 继承form类
from django import forms
class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    email = forms.EmailField(required=False)
    message = forms.CharField()
主要是继承forms.Form ,写法跟models 里面的差不多。 
完了之后你可以构造出一个实例。 
f = ContactForm() 
form类有很多实用的方法，比如说

Form.has_changed() 判断是否变化了
Form.cleaned_data 
Form.is_valid() 判断是否valid
Form.as_p()  html 里面的p来隔开每个field
Form.as_ul()

form api详细可见官网 : 
https://docs.djangoproject.com/en/1.8/ref/forms/api/
2. view
步骤是

绑定POST
判断是否有效，用is_valid()
取数据，用cleaned_data ，他是一个字典类型数据。
然后再调用函数，这里是发邮件。

def contact(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            send_mail(
                cd['subject'],
                cd['message'],
                cd.get('email', 'noreply@example.com'),
                ['siteowner@example.com'],
            )
            return HttpResponseRedirect('/contact/thanks/')
    else:
        form = ContactForm()
    return render(request,'contact_form.html', {'form': form})
如果是get请求，则重新创建一个form对象，然后渲染。
3.模板
<html>
<head>
    <title>Contact us</title>
</head>
<body>
    <h1>Contact us</h1>

    {% if form.errors %}
        <p style="color: red;">
            Please correct the error{{ form.errors|pluralize }} below.
        </p>
    {% endif %}

    <form action="" method="post">
        <table>
            {{ form.as_table }}
        </table>
        <input type="submit" value="Submit">
    </form>
</body>
</html>
这里调用了form.as_table生成 表格形式的表单，默认他是全部在一行上面的。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

实模式切换到保护模式，为什么要开启A20地址线（系统升级产生的兼容性问题）
【-1】写在前面：
以下部分内容总结于 http://blog.csdn.net/ruyanhai/article/details/7181842
complementary: 兼容性是指运行在前期CPU，如8086/8088上的的程序，也可以运行在其以后的处理器，如80286上；

【0】看看intel处理器的发展历程


【1】8086/8088的寻址和问题
1.1）寻址：在8086/8088中，只有20根地址总线，所以可以访问的地址是2^20=1M，但由于8086/8088是16位地址模式，能够表示的地址范围是0-64K，所以为了在8086/8088下能够访问1M内存，Intel采取了分段的模式：16位段基地址:16位偏移。其绝对地址计算方法为：16位基地址左移4位+16位偏移=20位地址；（这个比较简单）
1.2）问题： 但这种方式引起了新的问题，通过上述分段模式，能够表示的最大内存为：FFFFh:FFFFh=FFFF0h+FFFFh=10FFEFh=1M+64K-16Bytes（1M多余出来的部分被称做高端内存区HMA）。但8086/8088只有20位地址线，如果访问100000h~10FFEFh之间的内存，则必须有第21根地址线。所以当程序员给出超过1M（100000H-10FFEFH）的地址时，系统并不认为其访问越界而产生异常，而是自动从重新0开始计算，也就是说系统计算实际地址的时候是按照对1M求模的方式进行的，这种技术被称为wrap-around。

【2】80286的寻址和问题
2.0）寻址： 到了80286，系统的地址总线发展为24根，这样能够访问的内存可以达到2^24=16M。Intel在设计80286时提出的目标是，在实模式下，系统所表现的行为应该和8086/8088所表现的完全一样，也就是说，在实模式下，80286以及后续系列，应该和8086/8088完全兼容；
2.1）问题：如果程序员访问100000H-10FFEFH之间的内存，80286将实际访问这块内存，而不是像过去一样重新从0开始，因为80286有这个寻址能力，但是这就不能满足和8086/8088的系统兼容性，因为8086/8088不能访问到100000H-10FFEFH之间的内存的真实地址而是按照对1M求模的内存寻址方式；

【3】再浅谈80286 和 8086/8088 间的兼容性问题：（实模式下，80286的系统表现要同8086/8088的一致）
3.1）当A20被禁止时：程序员给出100000H~10FFEFH间的地址，80286和8086/8088 的系统表现是一致的，即按照对1M求模的方式进行寻址，满足系统升级的兼容性问题；
3.2）当A20被开启时：程序员给出的100000H~10FFEFH间的地址，80286是访问的真实地址，而8086/8088是始终是按照对1M求模的方式进行的（这里注意，是始终）；

【4】解决方法：
为了解决上述问题，IBM使用键盘控制器上剩余的一些输出线来管理第21根地址线（从0开始数是第20根），被称为A20Gate：如果A20 Gate被打开，则当程序员给出100000H-10FFEFH之间的地址的时候，系统将真正访问这块内存区域；如果A20Gate被禁止，则当程序员给出100000H-10FFEFH之间的地址的时候，系统仍然使用8086/8088的方式。

【5】有请实模式+保护模式闪亮登场（干货）
5.1）实模式：实模式就是， 为了实现系统升级的兼容性，如80286的系统表现（包括80286以后的CPU）要与8086/8088 的系统表现一致，就需要80286 CPU访问100000H-10FFEFH之间的地址的时候， 按照对1M求模的方式进行， 无论A20地址线开启关闭与否， 这种内存访问情况 称为实模式；
5.2）保护模式：保护模式就是， 以A20地址线开启为前提，80286 CPU访问100000H-10FFEFH之间的地址的时候， 是访问真实的内存地址，不是求模访问，如访问100001H，就是真真切切地 访问 0x 100001H，而不是求模的 0x000001H 地址， 这种内存访问情况称为保护模式；
5.3）诞生日： 实模式是从8088/8086 就开始存在了， 而保护模式从 80286 才开始存在；

【6】为什么需要保护模式？（因为实模式与生俱来，是伴随着8088/8086 从天而降的，它仅仅是访问内存的一种方式而已； 还有对于8086/8088而言，它只有实模式这一种内存寻址方式，而对于80286包括其以后的CPU，有实模式和保护模式两种寻址方式，因为要兼顾系统兼容性）
显然随着CPU的升级，8088/8086的内存寻址方式已经无法满足需要，也可以说，为了能够访问10FFEFH以上的内存，则必须进入保护模式；

【7】A20被禁止+被开启的不同结果
7.1）如果A20Gate被禁止：对于80286来说，其地址为24bit，其地址表示为EFFFFF；对于80386极其随后的32-bit芯片来说，其地址表示为FFEFFFFF。这种表示的意思是如果A20Gate被禁止，则其第20-bit在CPU做地址访问的时候是无效的，永远只能被作为0；
7.2）如果A20 Gate被打开：则其第20-bit是有效的，其值既可以是0，又可以是1；
7.3）所以：在保护模式下，如果A20 Gate被打开，则可以访问的内存则是连续的；如果A20Gate被禁止，则可以访问的内存只能是偶数段，
因为是20位（从0始）总为零，所23~20位只能是0000、0010、0100、0110、1000、1010、1100、1110对应十六进制为0、2、4、6、8、A、C、E。对应的十六进制地址段是000000-0FFFFF,200000-2FFFFF,400000-4FFFFF…

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

msstdfmt.dll缺失报错


msstdfmt.dll是微软标准数据格式对象相关动态链接库文件。

msstdfmt.dll里面包含了定义好函数，如果系统中没有它，包含相关函数的VB工程不能用。包括其生成的exe文件会出错。

一般提示：class not registered. You need the following file to be installed on your machine.msstdfmt.dll.
================
下载地址：
http://download.csdn.net/detail/corpse2010/9043037



注册方法：
解压文件到系统目录一般为：C:\WINNT\System32   或  64位系统为C:\Windows\SysWOW64
开始-->运行--> 执行    regsvr32 C:\WINDOWS\system32\msstdfmt.dll

版权声明：本文为博主原创文章，未经博主允许不得转载。

系统目录下CSC目录的占用疑问
用第三方软件扫描发现C:\Windows\CSC目录下面，有类似这样的超大文件
C:\Windows\CSC\v2.0.6\namespace\PANDIAN29\ngld_ghost\wxp20140725shb.gho
资源管理器中无法查看，更无法删除。
提示拒绝访问，需要通过安全选项卡提权。
百度了一下，有人问这问题，
http://zhidao.baidu.com/question/201658897.html?fr=iks&word=csc%C4%BF%C2%BC+win7&ie=gbk

答案是系统的脱机文件缓存，禁用缓存文件仍占用空间
这是微软的解答，再研究吧

http://support.microsoft.com/kb/q230738


版权声明：本文为博主原创文章，未经博主允许不得转载。

