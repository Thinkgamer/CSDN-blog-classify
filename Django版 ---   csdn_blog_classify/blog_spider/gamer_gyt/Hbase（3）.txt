浅谈zookeeper的在hbase集群中的作用

一，什么是zookeeper？
ZooKeeper 顾名思义 动物园管理员，他是拿来管大象(Hadoop) 、 蜜蜂(Hive) 、 小猪(Pig)  的管理员， Apache Hbase和 Apache Solr 以及LinkedIn sensei  等项目中都采用到了 Zookeeper。ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，ZooKeeper是以Fast Paxos算法为基础，实现同步服务，配置维护和命名服务等分布式应用。
上面的解释感觉还不够，太官方了。Zookeeper 从程序员的角度来讲可以理解为Hadoop的整体监控系统。如果namenode,HMaster宕机后，这时候Zookeeper 的重新选出leader。这是它最大的作用所在。

二、zookeeper的作用
 
1.Zookeeper加强集群稳定性
Zookeeper通过一种和文件系统很像的层级命名空间来让分布式进程互相协同工作。这些命名空间由一系列数据寄存器组 成，我们也叫这些数据寄存器为znodes。这些znodes就有点像是文件系统中的文件和文件夹。和文件系统不一样的是，文件系统的文件是存储在存储区 上的，而zookeeper的数据是存储在内存上的。同时，这就意味着zookeeper有着高吞吐和低延迟。

Zookeeper实现了高性能，高可靠性，和有序的访问。高性能保证了zookeeper能应用在大型的分布式系统上。高可靠性保证它不会由于单一节点的故障而造成任何问题。有序的访问能保证客户端可以实现较为复杂的同步操作。

2.Zookeeper加强集群持续性
ZooKeeper Service

组成Zookeeper的各个服务器必须要能相互通信。他们在内存中保存了服务器状态，也保存了操作的日志，并且持久化快照。只要大多数的服务器是可用的，那么Zookeeper就是可用的。

客户端连接到一个Zookeeper服务器，并且维持TCP连接。并且发送请求，获取回复，获取事件，并且发送连接信号。如果这个TCP连接断掉了，那么客户端可以连接另外一个服务器。

Zookeeper保证集群有序性
Zookeeper使用数字来对每一个更新进行标记。这样能保证Zookeeper交互的有序。后续的操作可以根据这个顺序实现诸如同步操作这样更高更抽象的服务。

Zookeeper保证集群高效
Zookeeper的高效更表现在以读为主的系统上。Zookeeper可以在千台服务器组成的读写比例大约为10:1的分布系统上表现优异。

数据结构和分等级的命名空间
Zookeeper的命名空间的结构和文件系统很像。一个名字和文件一样使用/的路径表现，zookeeper的每个节点都是被路径唯一标识

三、zookeeper在Hadoop及hbase中具体作用
1，Hadoop有NameNode，HBase有HMaster，为什么还需要zookeeper，下面给大家通过例子给大家介绍。
一个Zookeeper的集群中,3个Zookeeper节点.一个leader,两个follower的情况下,停掉leader,然后两个follower选举出一个leader.获取的数据不变.我想Zookeeper能够帮助Hadoop做到:
Hadoop,使用Zookeeper的事件处理确保整个集群只有一个NameNode,存储配置信息等.
HBase,使用Zookeeper的事件处理确保整个集群只有一个HMaster,察觉HRegionServer联机和宕机,存储访问控制列表等.



2，hbase regionserver 向zookeeper注册，提供hbase regionserver状态信息（是否在线）

3，hmaster启动时候会将hbase 系统表-ROOT- 加载到 zookeeper cluster，通过zookeeper cluster可以获取当前系统表.META.的存储所对应的regionserver信息。

HMaster主要作用在于，通过HMaster维护系统表-ROOT-,.META.，记录regionserver所对应region变化信息。此外还负责监控处理当前hbase cluster中regionserver状态变化信息。
        hbase regionserver则用于多个/单个维护region。
        region则对应为hbase数据表的表分区数据维护。



HBase的JAVA API操作详解


hbase 伪 分 布 安 装参考：http://blog.csdn.net/gamer_gyt/article/details/47126961
hbase shell操作命令参考：http://blog.csdn.net/gamer_gyt/article/details/47131857
数 据 挖 掘 资源链接汇总：http://blog.csdn.net/gamer_gyt/article/details/47747857


其中用到的eclipse快捷键：

Alt+/   代码助手完成一些代码的插入，自动显示提示信息 

Alt+↓   当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)
Alt+↑   当前行和上面一行交互位置(同上)
Alt+←   前一个编辑的页面 
Alt+→   下一个编辑的页面(当然是针对上面那条来说了)
Alt+Shift+M   抽取方法
Alt+Shift+L   抽取本地变量 

Ctrl+1        快速修复 

一：API介绍


几个相关类与HBase数据模型之间的对应关系




java类

HBase数据模型



HBaseAdmin

数据库（DataBase)



HBaseConfiguration



HTable

表（Table)



HTableDescriptor

列族（Column Family)



Put

列修饰符（Column Qualifier）



Get



Scanner




一、HBaseConfiguration

关系：org.apache.hadoop.hbase.HBaseConfiguration

作用：对HBase进行配置




返回值

函数

描述



void

addResource(Path file)

通过给定的路径所指的文件来添加资源



void

clear()

清空所有已设置的属性



string

get(String name)

获取属性名对应的值



String

getBoolean(String name, boolean defaultValue)

获取为boolean类型的属性值，如果其属性值类型部位boolean,则返回默认属性值



void

set(String name, String value)

通过属性名来设置值



void

setBoolean(String name, boolean value)

设置boolean类型的属性值




用法示例：





HBaseConfiguration hconfig = new HBaseConfiguration();

hconfig.set("hbase.zookeeper.property.clientPort","2181");

复制代码



　　该方法设置了"hbase.zookeeper.property.clientPort"的端口号为2181。一般情况下，HBaseConfiguration会使用构造函数进行初始化，然后在使用其他方法。


二、HBaseAdmin

关系：org.apache.hadoop.hbase.client.HBaseAdmin

作用：提供了一个接口来管理HBase数据库的表信息。它提供的方法包括：创建表，删除表，列出表项，使表有效或无效，以及添加或删除表列族成员等。




返回值

函数

描述



      void

addColumn(String tableName, HColumnDescriptor column)

向一个已经存在的表添加咧



checkHBaseAvailable(HBaseConfiguration conf)

静态函数，查看HBase是否处于运行状态



createTable(HTableDescriptor desc)

创建一个表，同步操作



deleteTable(byte[] tableName)

删除一个已经存在的表



enableTable(byte[] tableName)

使表处于有效状态



disableTable(byte[] tableName)

使表处于无效状态



HTableDescriptor[]

listTables()

列出所有用户控件表项



void

modifyTable(byte[] tableName, HTableDescriptor htd)

修改表的模式，是异步的操作，可能需要花费一定的时间



boolean

tableExists(String tableName)

检查表是否存在




用法示例：





HBaseAdmin admin = new HBaseAdmin(config);

admin.disableTable("tablename")

复制代码



三、HTableDescriptor

关系：org.apache.hadoop.hbase.HTableDescriptor

作用：包含了表的名字极其对应表的列族




返回值

函数

描述



void

addFamily(HColumnDescriptor)

添加一个列族



HColumnDescriptor

removeFamily(byte[] column)

移除一个列族



byte[]

getName()

获取表的名字



byte[]

getValue(byte[] key)

获取属性的值



void

setValue(String key, String value)

设置属性的值




用法示例：





HTableDescriptor htd = new HTableDescriptor(table);

htd.addFamily(new HcolumnDescriptor("family"));

复制代码



在上述例子中，通过一个HColumnDescriptor实例，为HTableDescriptor添加了一个列族：family


四、HColumnDescriptor

关系：org.apache.hadoop.hbase.HColumnDescriptor

作用：维护着关于列族的信息，例如版本号，压缩设置等。它通常在创建表或者为表添加列族的时候使用。列族被创建后不能直接修改，只能通过删除然后重新创建的方式。列族被删除的时候，列族里面的数据也会同时被删除。




返回值

函数

描述



byte[]

getName()

获取列族的名字



byte[]

getValue(byte[] key)

获取对应的属性的值



void

setValue(String key, String value)

设置对应属性的值




用法示例：





HTableDescriptor htd = new HTableDescriptor(tablename);

HColumnDescriptor col = new HColumnDescriptor("content:");

htd.addFamily(col);

复制代码




此例添加了一个content的列族


五、HTable

关系：org.apache.hadoop.hbase.client.HTable

作用：可以用来和HBase表直接通信。此方法对于更新操作来说是非线程安全的。




返回值

函数

描述



void

checkAdnPut(byte[] row, byte[] family, byte[] qualifier, byte[] value, Put put

自动的检查row/family/qualifier是否与给定的值匹配



void

close()

释放所有的资源或挂起内部缓冲区中的更新



Boolean

exists(Get get)

检查Get实例所指定的值是否存在于HTable的列中



Result

get(Get get)

获取指定行的某些单元格所对应的值



byte[][]

getEndKeys()

获取当前一打开的表每个区域的结束键值



ResultScanner

getScanner(byte[] family)

获取当前给定列族的scanner实例



HTableDescriptor

getTableDescriptor()

获取当前表的HTableDescriptor实例



byte[]

getTableName()

获取表名



static boolean

isTableEnabled(HBaseConfiguration conf, String tableName)

检查表是否有效



void

put(Put put)

向表中添加值




用法示例：





HTable table = new HTable(conf, Bytes.toBytes(tablename));

ResultScanner scanner =  table.getScanner(family);

复制代码



六、Put

关系：org.apache.hadoop.hbase.client.Put

作用：用来对单个行执行添加操作




返回值

函数

描述



Put

add(byte[] family, byte[] qualifier, byte[] value)

将指定的列和对应的值添加到Put实例中



Put

add(byte[] family, byte[] qualifier, long ts, byte[] value)

将指定的列和对应的值及时间戳添加到Put实例中



byte[]

getRow()

获取Put实例的行



RowLock

getRowLock()

获取Put实例的行锁



long

getTimeStamp()

获取Put实例的时间戳



boolean

isEmpty()

检查familyMap是否为空



Put

setTimeStamp(long timeStamp)

设置Put实例的时间戳




用法示例：





HTable table = new HTable(conf,Bytes.toBytes(tablename));

Put p = new Put(brow);//为指定行创建一个Put操作

p.add(family,qualifier,value);

table.put(p);

复制代码



七、Get

关系：org.apache.hadoop.hbase.client.Get

作用：用来获取单个行的相关信息




返回值

函数

描述



Get

addColumn(byte[] family, byte[] qualifier)

获取指定列族和列修饰符对应的列



Get

addFamily(byte[] family)

通过指定的列族获取其对应列的所有列



Get

setTimeRange(long minStamp,long maxStamp)

获取指定取件的列的版本号



Get

setFilter(Filter filter)

当执行Get操作时设置服务器端的过滤器




用法示例：





HTable table = new HTable(conf, Bytes.toBytes(tablename));

Get g = new Get(Bytes.toBytes(row));

复制代码



八、Result

关系：org.apache.hadoop.hbase.client.Result

作用：存储Get或者Scan操作后获取表的单行值。使用此类提供的方法可以直接获取值或者各种Map结构（key-value对）




返回值

函数

描述



boolean

containsColumn(byte[] family, byte[] qualifier)

检查指定的列是否存在



NavigableMap<byte[],byte[]>

getFamilyMap(byte[] family)

获取对应列族所包含的修饰符与值的键值对



byte[]

getValue(byte[] family, byte[] qualifier)

获取对应列的最新值






九、ResultScanner

关系：Interface

作用：客户端获取值的接口




返回值

函数

描述



void

close()

关闭scanner并释放分配给它的资源



Result

next()

获取下一行的值





二：代码草操作实例





hbase shell 基本操作命令

具体的hbase shell 命令如下表所示：

查看hbase 的状态  ：              status
查看hbase 的版本  ：              version

创建scores表：                                     create ‘scores’，‘grad’,'course'
查看当前hbase 中有哪些表：               list
查看表scores的构造：                          describe ‘scores’
使用put插入数据：                                put 'scores','xiapi','grad:','1'
                 (xiaoxue  类似)                     put 'scores','xiapi','course:chine',97'
                                                              put 'scores','xiapi',course:math','128'
                                                              put 'scorse','xiapi','course:engish','85'
查看表‘scores’ 中的行‘xiapi’：              get scores','xiapi'
查看表中所有数据：                             scan 'scores'

查看表中列簇所有数据：                      scan 'scores',{COLUMNS=>'course'}
删除表中xiapi行中course列簇的math：delete 'scores','xiapi','course:math'

关闭表：                                                disable ‘scores’
删除表(删除之前必须关闭)：                 drop 'scores'


三、伪分布环境下安装hbase

环境说明：
    1、hadoop2.6伪分布安装：具体请参考博主的一篇文章：http://blog.csdn.net/gamer_gyt/article/details/46793731

    2、Ubuntu14.04
    3、hbase-0.98.13-hadoop2-bin，hbase下载链接：http://apache.mirrors.tds.net/hbase/

安装配置：
    1、解压hbase到指定的目录（我的是在/usr/local/hadoop/）
           tar -axvf hbase-0.98.13-hadoop2-bin.tar.gz -C /usr/local/hadoop/
          为了后续方便,小编改名称为hbase
           mv hbase-0.98-hadoop2.13-hadoop2
 hbase
    2、配置系统环境变量
          默认的配置信息不是供伪分布使用的，我们修改一下。
        2.1修改文件${HBASE_HOME}/conf/hbase_env.sh，修改两处
        一是修改JAVA_HOME的值，去掉前面的“#”，修改为自己环境的jdk安装路径

   export JAVA_HOME=/usr/local/jdk/

        二是修改最后一行，去掉前面的“#”即可

   export HBASE_MANAGES_ZK=true

        最后一句的含义是使用HBase托管的ZooKeeper。

        2.2修改文件${HBASE_HOME}/conf/hbase-site.xml
       在标记<configuration>中增加以下内容

<configuration>    <property>     <name>hbase.rootdir</name>     <value>hdfs://192.168.2.6:9000/hbase</value>    </property>    <property>     <name>hbase.cluster.distributed</name>     <value>true</value>    </property>    <property>    <name>hbase.master</name>    <value>192.168.2.6:60000</value>    </property>    <property>     <name>hbase.zookeeper.quorum</name>     <value>192.168.2.6</value>    </property>    </configuration>  


       3.启动HBase
          先确保hadoop已经启动。
       进入hbase解压目录执行命令bin/start-hbase.sh。
       启动时若出现无法连接的错误，执行命令：sudo chown
-R hadoop:hadoop
./hadoop（安装hadoop伪分布时候赋予文件权限，因为这里我是把hbase放在hadoop目录下了，所以需要重新此命令）
      4.验证
        执行命令jps，可以看到新增了三个java进程，分别是HBase、HRegionserver、HQuorumpeer。
        还有一个办法，在浏览器查看地址http://192.168.2.6:60010 也可以看到hbase的管理界面。





