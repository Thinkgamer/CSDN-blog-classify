MySQL学习笔记之命令总结

   用文本方式将数据装入数据表中（eg:d:/mysql.txt）
   load data local infile "D:/mysql.txt" into table mytable

   导入sql文件命令（eg:d:/mysql.sql）
   use database;
   source d:/mysql.sql

   清空表
   delete from mytable
----------------------------------------------------

一：alter命令
    1：删除列
    ALTER TABLE 【表名字】 DROP 【列名称】
    2：增加列
    ALTER TABLE 【表名字】 ADD 【列名称】 INT NOT NULL  COMMENT '注释说明'
    3：修改列的类型信息
    ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称（这里可以用和原来列同名即可）】 BIGINT NOT NULL  COMMENT '注释说明'
    4：重命名列
    ALTER TABLE 【表名字】 CHANGE 【列名称】【新列名称】 BIGINT NOT NULL  COMMENT '注释说明'
    5：重命名表
    ALTER TABLE 【表名字】 RENAME 【表新名字】
    6：删除表中主键
    Alter TABLE 【表名字】 drop primary key
    7：添加主键
    ALTER TABLE 【表名字】 ADD CONSTRAINT PK_SJ_RESOURCE_CHARGES PRIMARY KEY (resid,resfromid)
    8：添加索引
    ALTER TABLE sj_resource_charges add index INDEX_NAME (name);
    9: 添加唯一限制条件索引
    ALTER TABLE sj_resource_charges add unique emp_name2(cardnumber);
    10: 删除索引
    alter table tablename drop index emp_name;

二：update语句理解

   UPDATE的功能是更新表中的数据。这的语法和INSERT的第二种用法相似。必须提供表名以及SET表达式，在后面可以加WHERE以限制更新的记录范围。
   UPDATE table_anem SET column_name1 = value1, column_name2 = value2, ...
   WHERE ... ;
   
   如下面的语句将users表中id等于123的记录的age改为24
   UPDATE users SET age = 24 WHERE id = 123;
   同样，可以使用UPDATE更新多个字段的值 UPDATE users SET age = 24, name = 'Mike' WHERE id = 123;
   上面的UPDATE语句通过WHERE指定一个条件，否则，UPDATE将更新表中的所有记录的值。

   在使用UPDATE更新记录时，如果被更新的字段的类型和所赋的值不匹配时，MySQL将这个值转换为相应类型的值。如果这个字段是数值类型，而且所赋 值超过了这个数据类型的最大范围，那么MySQL就将这个值转换为这个范围最大或最小值。如果字符串太长，MySQL就将多余的字符串截去。如果设置非空 字段为空，那么将这个字段设置为它们的默认值，数字的默认值是0，字符串的默认值是空串（不是null，是""）。
   
   有两种情况UPDATE不会对影响表中的数据。
   1. 当WHERE中的条件在表中没有记录和它匹配时。
   2. 当我们将同样的值赋给某个字段时，如将字段abc赋为'123'，而abc的原值就是'123'。
   
   和INSERT、REPLACE一样，UPDATE也返回所更新的记录数。但这些记录数并不包括满足WHERE条件的，但却未被更新的记录。如下同的UPDATE语句就未更新任何记录。
   UPDATE users SET age = 30 WHERE id = 12;
   Query OK, 0 rows affected (0.00 sec)
   
   需要注意的时，如果一个字段的类型是TIMESTAMP，那么这个字段在其它字段更新时自动更新。
   在有些时候我们需要得到UPDATE所选择的行数，而不是被更新的行数。我们可以通过一些API来达到这个目的。如MySQL提供的C API提供了一个选项可以得到你想要的记录数。而MySQL的JDBC驱动得到的默认记录数也是匹配的记录数。
   
   UPDATE和REPLACE基本类似，但是它们之间有两点不同。
   1. UPDATE在没有匹配记录时什么都不做，而REPLACE在有重复记录时更新，在没有重复记录时插入。
   2. UPDATE可以选择性地更新记录的一部分字段。而REPLACE在发现有重复记录时就将这条记录彻底删除，再插入新的记录。也就是说，将所有的字段都更新了。

三：Insert语句的理解
 
   看到这个标题也许大家会问，这有什么好说的，调用多次INSERT语句不就可以插入多条记录了吗！但使用这种方法要增加服务器的负荷，因为，执行每一次 SQL服务器都要同样对SQL进行分析、优化等操作。幸好MySQL提供了另一种解决方案，就是使用一条INSERT语句来插入多条记录。这并不是标准的 SQL语法，因此只能在MySQL中使用。
   INSERT INTO users(name, age)
   VALUES('姚明', 25), ('比尔.盖茨', 50), ('火星人', 600);
   上面的INSERT 语句向users表中连续插入了3条记录。值得注意的是，上面的INSERT语句中的VALUES后必须每一条记录的值放到一对(…)中，中间使用","分割。假设有一个表table1
   CREATE TABLE table1(n INT)；
   如果要向table1中插入5条记录，下面写法是错误的：
   INSERT INTO table1 (i) VALUES(1,2,3,4,5);
   MySQL将会抛出下面的错误
   ERROR 1136: Column count doesn't match value count at row 1
   而正确的写法应该是这样：
   INSERT INTO t able1(i) VALUES(1),(2),(3),(4),(5);
   当然，这种写法也可以省略列名，这样每一对括号里的值的数目必须一致，而且这个数目必须和列数一致。如：
   INSERT INTO t able1 VALUES(1),(2),(3),(4),(5);

四：replace语句

   我们在使用数据库时可能会经常遇到这种情况。如果一个表在一个字段上建立了唯一索引，当我们再向这个表中使用已经存在的键值插入一条记录，那将会抛出一 个主键冲突的错误。当然，我们可能想用新记录的值来覆盖原来的记录值。如果使用传统的做法，必须先使用DELETE语句删除原先的记录，然后再使用 INSERT插入新的记录。而在MySQL中为我们提供了一种新的解决方案，这就是REPLACE语句。使用REPLACE插入一条记录时，如果不重 复，REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。

   使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用DELETE和INSERT时添加事务等复杂操作了。
   在使用REPLACE时，表中必须有唯一索引，而且这个索引所在的字段不能允许空值，否则REPLACE就和INSERT完全一样的。

   在执行REPLACE后，系统返回了所影响的行数，如果返回1，说明在表中并没有重复的记录，如果返回2，说明有一条重复记录，系统自动先调用了 DELETE删除这条记录，然后再记录用INSERT来插入这条记录。如果返回的值大于2，那说明有多个唯一索引，有多条记录被删除和插入。

   REPLACE的语法和INSERT非常的相似，如下面的REPLACE语句是插入或更新一条记录。
   REPLACE INTO users (id,name,age) VALUES(123, '赵本山', 50);
   
   插入多条记录：
   REPLACE INTO users(id, name, age)
   VALUES(123, '赵本山', 50), (134,'Mary',15);
   REPLACE也可以使用SET语句
   REPLACE INTO users SET id = 123, name = '赵本山', age = 50;
   
   上面曾提到REPLACE可能影响3条以上的记录，这是因为在表中有超过一个的唯一索引。在这种情况下，REPLACE将考虑每一个唯一索引，并对每一 个索引对应的重复记录都删除，然后插入这条新记录。假设有一个table1表，有3个字段a, b, c。它们都有一个唯一索引。
   CREATE TABLE table1(a INT NOT NULL UNIQUE,b INT NOT NULL UNIQUE,c INT NOT NULL UNIQUE);
   假设table1中已经有了3条记录
   a b c
   1 1 1
   2 2 2
   3 3 3
   下面我们使用REPLACE语句向table1中插入一条记录。
   REPLACE INTO table1(a, b, c) VALUES(1,2,3);
   返回的结果如下
   Query OK, 4 rows affected (0.00 sec)
   在table1中的记录如下
   a b c
   1 2 3
   我们可以看到，REPLACE将原先的3条记录都删除了，然后将（1, 2, 3）插入。

五：DELETE和TRUNCATE TABLE
   
   在MySQL中有两种方法可以删除数据，一种是DELETE语句，另一种是TRUNCATE TABLE语句。DELETE语句可以通过WHERE对要删除的记录进行选择。而使用TRUNCATE TABLE将删除表中的所有记录。因此，DELETE语句更灵活。
   
   如果要清空表中的所有记录，可以使用下面的两种方法：
   DELETE FROM table1
   TRUNCATE TABLE table1
   其中第二条记录中的TABLE是可选的。
   
   如果要删除表中的部分记录，只能使用DELETE语句。
   DELETE FROM table1 WHERE ...;
   如果DELETE不加WHERE子句，那么它和TRUNCATE TABLE是一样的，但它们有一点不同，那就是DELETE可以返回被删除的记录数，而TRUNCATE TABLE返回的是0。

   如果一个表中有自增字段，使用TRUNCATE TABLE和没有WHERE子句的DELETE删除所有记录后，这个自增字段将起始值恢复成1.如果你不想这样做的话，可以在DELETE语句中加上永真的WHERE，如WHERE 1或WHERE true。
   DELETE FROM table1 WHERE 1;

   上面的语句在执行时将扫描每一条记录。但它并不比较，因为这个WHERE条件永远为true。这样做虽然可以保持自增的最大值，但由于它是扫描了所有的记录，因此，它的执行成本要比没有WHERE子句的DELETE大得多。
   DELETE和TRUNCATE TABLE的最大区别是DELETE可以通过WHERE语句选择要删除的记录。但执行得速度不快。而且还可以返回被删除的记录数。而TRUNCATE TABLE无法删除指定的记录，而且不能返回被删除的记录。但它执行得非常快。

   和标准的SQL语句不同，DELETE支持ORDER BY和LIMIT子句，通过这两个子句，我们可以更好地控制要删除的记录。如当我们只想删除WHERE子句过滤出来的记录的一部分，可以使用LIMIB， 如果要删除后几条记录，可以通过ORDER BY和LIMIT配合使用。假设我们要删除users表中name等于"Mike"的前6条记录。可以使用如下的DELETE语句：
DELETE FROM users WHERE name = 'Mike' LIMIT 6;
   一般MySQL并不确定删除的这6条记录是哪6条，为了更保险，我们可以使用ORDER BY对记录进行排序。
   DELETE FROM users WHERE name = 'Mike' ORDER BY id DESC LIMIT 6


关系型数据库的理解

1.关系型数据库简单的可以理解为二维数据库，表的格式就如Excel，有行有列。常用的关系数据库有Oracle，SqlServer，Informix，MySql，SyBase等。（也即是我们平时看到的数据库，都是关系型数据库）


2.所谓关系型数据库，是指采用了关系模型来组织数据的数据库。关系模型是在1970年由IBM的研究员E.F.Codd博士首先提出，在之后的几十年中，关系模型的概念得到了充分的发展并逐渐成为数据库架构的主流模型。简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。下面列出了关系模型中的常用概念。

3.关系型数据库并不是唯一的高级数据库模型，也完全不是性能最优的模型，但是关系型数据库确实是现今使用最广泛、最容易理解和使用的数据库模型。大多数的企业级系统数据库都采用关系型数据库，关系型数据库的概念是掌握数据库开发的基础，所以本节的问题也成为.NET面试中频繁出现的问题之一。
 
4.
关系：可以理解为一张二维表，每个关系都具有一个关系名，就是通常说的表名。
元组：可以理解为二维表中的一行，在数据库中经常被称为记录。
属性：可以理解为二维表中的一列，在数据库中经常被称为字段。
域：属性的取值范围，也就是数据库中某一列的取值限制。
关键字：一组可以唯一标识元组的属性。数据库中常称为主键，由一个或多个列组成。
关系模式：指对关系的描述，其格式为：关系名（属性1，属性2，…，属性N）。在数据库中通常称为表结构。


5.
关系型数据库的优点
关系型数据库相比其他模型的数据库而言，有着以下优点：
容易理解：二维表结构是非常贴近逻辑世界的一个概念，关系模型相对网状、层次等其他模型来说更容易理解。
使用方便：通用的SQL语言使得操作关系型数据库非常方便，程序员甚至于数据管理员可以方便地在逻辑层面操作数据库，而完全不必理解其底层实现。
易于维护：丰富的完整性（实体完整性、参照完整性和用户定义的完整性）大大降低了数据冗余和数据不一致的概率。
6.
标准数据查询语言SQL就是一种基于关系数据库的语言，
这种语言执行对关系数据库中数据的检索和操作。


7.
关系操作
关系模块中常用的操作包括：
数据查询
选择 投影 连接 并 交 差 除 数据操作 增加 删除 修改 查询



MySQL学习笔记之约束条件

约束条件：
PRIMARY KEY(主键)        
NOT NULL(非空)              
AUTO_INCREMENT(自增长)
UNIQUE(值唯一)               
FOREING KEY(外键)       DEFAULT(默认值)

 1、主键（一个表中主键只能有一个 ，但是可以组合使用，PRIMARY可以省略）
CREATE TABLE thinkgamer(
id INT PRIMARY KEY

);
符合主键使用例子


CREATE TABLE thinkgamer(
id INT,

number INT,

PRIMARY KEY(id,number)

);
2、非空

CREATE TABLE thinkgamer(
id INT PRIMARY KEY,

sex ENUM('男','女','保密') NOT NULL

)CHARSET=UTF8;
这里必须指定字符集为utf8，否则会报错： Column 'sex' has duplicated value '?' in ENUM
3、自增长

CREATE TABLE thinkgamer(
id INT PRIMARY KEY AUTO_INCREMENT,

sex ENUM('男','女','保密') NOT NULL

)CHARSET=UTF8;
在车入数据时自增长字段可以这样写：
INSERT thinkgamer VALUES(1,'男');               #注释：插入的第一条数据必须指定id
之后可以这样写INSERT thinkgamer VALUES(null,'男');或者INSERT thinkgamer(sex) VALUES('男');
4、唯一（指定的字段不允许重复,一旦插入name重复就会报错）

CREATE TABLE thinkgamer(
id INT PRIMARY KEY AUTO_INCREMENT,

sex ENUM('男','女','保密') NOT NULL,

name VARCHAR(20) UNIQUE

)CHARSET=UTF8;
5、外键()
主要用于多表，具体请参考：http://www.cnblogs.com/babycool/archive/2012/05/06/2485809.html

6、默认值

CREATE TABLE thinkgamer(
id INT PRIMARY KEY AUTO_INCREMENT,

sex ENUM('男','女','保密') NOT NULL,

name VARCHAR(20) UNIQUE,
age INT DEFAULT 20

)CHARSET=UTF8;

MySQL学习笔记之启动停止与登录，显示相关信息

1、MySQL的启动与停止
      net start/stop mysql
      退出MySQL命令行界面\q (exit)
2、登录
      连接本机：
      mysql -umysql所属用户名 -p密码 [-h用户名] [-p端口号] [--prompt=name(设置命令提示符)] [--delimiter=name(指定分隔符)]
      [XXXX]为可选可不选
      eg:mysql -uroot -proot
      连接远程(假设远程ip为111.111.111.111,用户root,密码root)：
      mysql -uroot -proot -h111.111.111.111
3、修改密码
      mysqladmin- uname -pold_password password new_password
3、常用显示信息
     (1)：show warnings;          #显示警告

     (2)：show create databases data_name;   #显示编码格式
     (3)：alter databases data_name default character set utf8;    #修改编码格式

     (4)：select database()        #得到当前打开数据库名称

     (5)：drop database data_name if exists;      #如果存在该数据库删除
4、设置存储引擎，字符集
     ENGINE=INNODB CHARSET=UTF8;


下面给出一个创建数据库的例子
    CREATE DATABASE  IF NOT EXISTS THINKGAMER DEFAULT CHARASTER=UTF8;


    USE THINKGAMER;


   CREATE TABLE TH(
        id TINYINT KEY AUTO_INCREMENT,
        name VARCHAR(20) UNIQUE,
        age INT NOT NULL
   ) ENGINE=INNODB CHARSET=UTF8;


MySQL学习笔记之数据类型详解

注：以下内容针对MySQL5.0及以上版本
MySQL的数据类型非常多，选择正确的数据类型对于获得高性能至关重要，本文是我结合网上看到的一些blog加上《高性能MySQL》一书上的内容整理而成的。
三大原则：
1，更小的通常更好，应该尽量使用可以正确存储数据的最小数据类型。
2，简单就好，简单数据类型的操作通常需要更少的CPU周期。
3，尽量避免NULL，如果查询中包含可为NULL的列，对MySQL来说更难优化，因为可为NULL的列使得索引、索引统计和值比较都更复杂。
1、整型



MySQL数据类型
含义（有符号）


tinyint(m)
1个字节 范围(-128~127)


smallint(m)
2个字节 范围(-32768~32767)


mediumint(m)
3个字节 范围(-8388608~8388607)


int(m)
4个字节 范围(-2147483648~2147483647)


bigint(m)
8个字节 范围(+-9.22*10的18次方)



取值范围如果加了unsigned，则最大值翻倍，如tinyint unsigned的取值范围为(0~256)。
int(m)里的m是表示SELECT查询结果集中的显示宽度，并不影响实际的取值范围。
（MySQL可以为整型类型指定宽度，例如Int(11)，对绝大多数应用这是没有意义的：它不会限制值的合法范围，只是规定了MySQL的一些交互工具（例如MySQL命令行客户端）用来显示字符的个数。对于存储和计算来说，Int(1)和Int(20)是相同的。）
2、浮点型(float和double)



MySQL数据类型
含义


float(m,d)
单精度浮点型 8位精度(4字节) m总个数，d小数位


double(m,d)
双精度浮点型 16位精度(8字节) m总个数，d小数位



设一个字段定义为float(5,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位。
3、定点数
浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。
decimal(m,d) 参数m<65 是总个数，d<30且 d<m 是小数位。
MySQL5.0和更高版本将数字打包保存到一个二进制字符串中（每4个直接存9个数字）。例如，decimal(18,9)小数点两边将各存储9个数字，一共使用9个字节：小数点前的数字用4个字节，小数点后的数字用4个字节，小数点本身占1个字节。
浮点类型在存储同样范围的值时，通常比decimal使用更少的空间。float使用4个字节存储。double占用8个字节。
因为需要额外的空间和计算开销，所以应该尽量只在对小数进行精确计算时才使用decimal——例如存储财务数据。但在数据量比较大的时候，可以考虑使用bigint代替decimal。
4、字符串(char,varchar,_text)



MySQL数据类型
含义


char(n)
固定长度，最多255个字符


varchar(n)
固定长度，最多65535个字符


tinytext
可变长度，最多255个字符


text
可变长度，最多65535个字符


mediumtext
可变长度，最多2的24次方-1个字符


longtext
可变长度，最多2的32次方-1个字符



char和varchar：
1.char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，varchar不限于此。
2.char(n) 固定长度，char(4)不管是存入几个字符，都将占用4个字节，varchar是存入的实际字符数+1个字节（n< n>255)，所以varchar(4),存入3个字符将占用4个字节。
3.char类型的字符串检索速度要比varchar类型的快。

varchar和text：
1.varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（n< n>255)，text是实际字符数+2个字节。
2.text类型不能有默认值。
3.varchar可直接创建索引，text创建索引要指定前多少个字符。varchar查询速度快于text,在都创建索引的情况下，text的索引似乎不起作用。
5.二进制数据(_Blob)
1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。
2._BLOB存储的数据只能整体读出。
3._TEXT可以指定字符集，_BLO不用指定字符集。
6.日期时间类型 



MySQL数据类型
含义


date
日期 '2008-12-2'


time
时间 '12:25:36'


datetime
日期时间 '2008-12-2 22:06:44'


timestamp
自动存储记录修改时间



若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间。
数据类型的属性



MySQL关键字
含义


NULL
数据列可包含NULL值


NOT NULL
数据列不允许包含NULL值


DEFAULT
默认值


PRIMARY KEY
主键


AUTO_INCREMENT
自动递增，适用于整数类型


UNSIGNED
无符号


CHARACTER SET name
指定一个字符集




